compiling from forth.src... ERROR: : HERE DP @ ; INLINE: 'DP'??
ERROR: : LAST (LAST) @ ; INLINE: '(LAST)'??
ERROR: : CELLS CELL * ; \ ( num1 -- num2 ): 'CELL'??
ERROR: : --  DUP @  1- SWAP ! ;  \ ( addr -- ): '1-'??
ERROR: : C-- DUP C@ 1- SWAP C! ; \ ( addr -- ): '1-'??
ERROR: : +!  TUCK @  + SWAP !  ;: 'TUCK'??
ERROR: : C+! TUCK C@ + SWAP C! ;: 'TUCK'??
ERROR: : ,  HERE !  CELL DP +! ;: 'HERE'??
ERROR: : ,  HERE !  CELL DP +! ;: 'CELL'??
ERROR: : ,  HERE !  CELL DP +! ;: 'DP'??
ERROR: : ,  HERE !  CELL DP +! ;: '+!'??
ERROR: : C, HERE C!      DP ++ ;: 'HERE'??
ERROR: : C, HERE C!      DP ++ ;: 'DP'??
ERROR: : C, HERE C!      DP ++ ;: '++'??
ERROR: : ?COMPILING STATE @ ;: 'STATE'??
ERROR: : [ 0 STATE ! ; IMMEDIATE: 'STATE'??
ERROR: : ] 1 STATE ! ; IMMEDIATE: 'STATE'??
ERROR: : LEAVE ?COMPILING IF <asm> CPUSH RET </asm> C, THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : LEAVE ?COMPILING IF <asm> CPUSH RET </asm> C, THEN ; IMMEDIATE: 'C,'??
ERROR: : IF   ?COMPILING IF <asm> CPUSH JMPZ </asm> C, HERE 0 , THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : IF   ?COMPILING IF <asm> CPUSH JMPZ </asm> C, HERE 0 , THEN ; IMMEDIATE: 'C,'??
ERROR: : IF   ?COMPILING IF <asm> CPUSH JMPZ </asm> C, HERE 0 , THEN ; IMMEDIATE: 'HERE'??
ERROR: : IF   ?COMPILING IF <asm> CPUSH JMPZ </asm> C, HERE 0 , THEN ; IMMEDIATE: ','??
ERROR: : ELSE ?COMPILING IF <asm> CPUSH JMP  </asm> C, HERE SWAP 0 , HERE SWAP ! THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : ELSE ?COMPILING IF <asm> CPUSH JMP  </asm> C, HERE SWAP 0 , HERE SWAP ! THEN ; IMMEDIATE: 'C,'??
ERROR: : ELSE ?COMPILING IF <asm> CPUSH JMP  </asm> C, HERE SWAP 0 , HERE SWAP ! THEN ; IMMEDIATE: 'HERE'??
ERROR: : ELSE ?COMPILING IF <asm> CPUSH JMP  </asm> C, HERE SWAP 0 , HERE SWAP ! THEN ; IMMEDIATE: ','??
ERROR: : ELSE ?COMPILING IF <asm> CPUSH JMP  </asm> C, HERE SWAP 0 , HERE SWAP ! THEN ; IMMEDIATE: 'HERE'??
ERROR: : THEN ?COMPILING IF HERE SWAP ! THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : THEN ?COMPILING IF HERE SWAP ! THEN ; IMMEDIATE: 'HERE'??
ERROR: : BEGIN ?COMPILING IF HERE THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : BEGIN ?COMPILING IF HERE THEN ; IMMEDIATE: 'HERE'??
ERROR: : AGAIN ?COMPILING IF <asm> CPUSH JMP   </asm> C, , THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : AGAIN ?COMPILING IF <asm> CPUSH JMP   </asm> C, , THEN ; IMMEDIATE: 'C,'??
ERROR: : AGAIN ?COMPILING IF <asm> CPUSH JMP   </asm> C, , THEN ; IMMEDIATE: ','??
ERROR: : WHILE ?COMPILING IF <asm> CPUSH JMPNZ </asm> C, , THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : WHILE ?COMPILING IF <asm> CPUSH JMPNZ </asm> C, , THEN ; IMMEDIATE: 'C,'??
ERROR: : WHILE ?COMPILING IF <asm> CPUSH JMPNZ </asm> C, , THEN ; IMMEDIATE: ','??
ERROR: : UNTIL ?COMPILING IF <asm> CPUSH JMPZ  </asm> C, , THEN ; IMMEDIATE: '?COMPILING'??
ERROR: : UNTIL ?COMPILING IF <asm> CPUSH JMPZ  </asm> C, , THEN ; IMMEDIATE: 'C,'??
ERROR: : UNTIL ?COMPILING IF <asm> CPUSH JMPZ  </asm> C, , THEN ; IMMEDIATE: ','??
ERROR: : <> = 0= ; INLINE: '0='??
ERROR: : <= > 0= ; INLINE: '0='??
ERROR: : >= < 0= ; INLINE: '0='??
ERROR: 	< IF 2DROP 0 LEAVE THEN: '2DROP'??
ERROR: 	< 0=: '0='??
ERROR: : CT COUNT TYPE ;: 'COUNT'??
ERROR: : CT COUNT TYPE ;: 'TYPE'??
ERROR: : PAD LAST 200 - ;: 'LAST'??
ERROR: : getInput PAD 128 0 FREADLINE DROP PAD ; \ ( -- addr ): 'PAD'??
ERROR: : getInput PAD 128 0 FREADLINE DROP PAD ; \ ( -- addr ): 'PAD'??
ERROR: : HEX     16 BASE ! ;: 'BASE'??
ERROR: : DECIMAL 10 BASE ! ;: 'BASE'??
ERROR: : OCTAL    8 BASE ! ;: 'BASE'??
ERROR: : BINARY   2 BASE ! ;: 'BASE'??
ERROR: : DICT>XT     CELL + ;: 'CELL'??
ERROR: : DICT>FLAGS  2 CELLS + ;: 'CELLS'??
ERROR: : DICT>NAME   DICT>FLAGS 1+ ;: 'DICT>FLAGS'??
ERROR: : XT>DICT     CELL - ;: 'CELL'??
ERROR: : FLAGS>DICT  2 CELLS - ;: 'CELLS'??
ERROR: : NAME>DICT   1- 2 CELLS - ;: '1-'??
ERROR: : NAME>DICT   1- 2 CELLS - ;: 'CELLS'??
ERROR: : DICT.GetXT DICT>XT @ ;: 'DICT>XT'??
ERROR: : DICT.GetFLAGS DICT>FLAGS C@ ;: 'DICT>FLAGS'??
ERROR: : DICTP>NAME 1+ @ DICT>NAME ;: 'DICT>NAME'??
ERROR: : FLAGS.ISIMMEDIATE? FLAG_IMMEDIATE AND ;: 'FLAG_IMMEDIATE'??
ERROR: : FLAGS.ISINLINE?    FLAG_INLINE    AND ;: 'FLAG_INLINE'??
ERROR: : DICT.GetIMMEDIATE DICT.GetFLAGS FLAGS.ISIMMEDIATE? ;: 'DICT.GetFLAGS'??
ERROR: : DICT.GetIMMEDIATE DICT.GetFLAGS FLAGS.ISIMMEDIATE? ;: 'FLAGS.ISIMMEDIATE?'??
ERROR: : DICT.GetINLINE    DICT.GetFLAGS FLAGS.ISINLINE? ;: 'DICT.GetFLAGS'??
ERROR: : DICT.GetINLINE    DICT.GetFLAGS FLAGS.ISINLINE? ;: 'FLAGS.ISINLINE?'??
ERROR: 	LAST >R: 'LAST'??
ERROR: 			DICT>NAME 1+ OVER COMPAREI: 'DICT>NAME'??
ERROR: 				DROP R@ DICT.GetXT R> DICT.GetFLAGS 1: 'DICT.GetXT'??
ERROR: 				DROP R@ DICT.GetXT R> DICT.GetFLAGS 1: 'DICT.GetFLAGS'??
ERROR: 			2DROP R> 0 0 LEAVE: '2DROP'??
ERROR: : isHEX? BASE @ 16 = ;: 'BASE'??
ERROR: 	DUP 48 57 BETWEEN IF 48 - 1 LEAVE THEN: 'BETWEEN'??
ERROR: 	isHEX? : 'isHEX?'??
ERROR: 		DUP 65  70 BETWEEN IF 55 - 1 LEAVE THEN: 'BETWEEN'??
ERROR: 		DUP 97 102 BETWEEN IF 87 - 1 LEAVE THEN: 'BETWEEN'??
ERROR: : ABS DUP 0 < IF NEGATE THEN ;: 'NEGATE'??
ERROR: 	DUP C@ 45 = DUP isNeg C! IF 1+ THEN: 'isNeg'??
ERROR: 			2DROP R> : '2DROP'??
ERROR: 			isNeg C@ IF NEGATE THEN: 'isNeg'??
ERROR: 			isNeg C@ IF NEGATE THEN: 'NEGATE'??
ERROR: 		isNumChar? : 'isNumChar?'??
ERROR: 			R> BASE @ * + >R: 'BASE'??
ERROR: : MOD 2DUP / * - ;: '2DUP'??
ERROR: 	2DUP / >R R@ * - R> SWAP: '2DUP'??
ERROR: 	DUP 0 < IF NEGATE 1 ELSE 0 THEN >R: 'NEGATE'??
ERROR: 			BASE @ /MOD : 'BASE'??
ERROR: 			BASE @ /MOD : '/MOD'??
ERROR: : . BL (.) ;: 'BL'??
ERROR: : . BL (.) ;: '(.)'??
ERROR: : HEX.     BASE @ SWAP HEX     (.) BASE ! ;: 'BASE'??
ERROR: : HEX.     BASE @ SWAP HEX     (.) BASE ! ;: 'HEX'??
ERROR: : HEX.     BASE @ SWAP HEX     (.) BASE ! ;: '(.)'??
ERROR: : HEX.     BASE @ SWAP HEX     (.) BASE ! ;: 'BASE'??
ERROR: : DECIMAL. BASE @ SWAP DECIMAL (.) BASE ! ;: 'BASE'??
ERROR: : DECIMAL. BASE @ SWAP DECIMAL (.) BASE ! ;: 'DECIMAL'??
ERROR: : DECIMAL. BASE @ SWAP DECIMAL (.) BASE ! ;: '(.)'??
ERROR: : DECIMAL. BASE @ SWAP DECIMAL (.) BASE ! ;: 'BASE'??
ERROR: : BINARY.  BASE @ SWAP BINARY  (.) BASE ! ;: 'BASE'??
ERROR: : BINARY.  BASE @ SWAP BINARY  (.) BASE ! ;: 'BINARY'??
ERROR: : BINARY.  BASE @ SWAP BINARY  (.) BASE ! ;: '(.)'??
ERROR: : BINARY.  BASE @ SWAP BINARY  (.) BASE ! ;: 'BASE'??
ERROR: : MIN 2DUP > IF SWAP THEN DROP ; : '2DUP'??
ERROR: : MAX 2DUP < IF SWAP THEN DROP ; : '2DUP'??
ERROR: 	BL DEPTH 0 < : 'BL'??
ERROR: 	IF S" Stack underflow!" COUNT TYPE RESET THEN: 'COUNT'??
ERROR: 	IF S" Stack underflow!" COUNT TYPE RESET THEN: 'TYPE'??
ERROR: 	DEPTH 1- >R: '1-'??
ERROR: 		R@ PICK . R@ : '.'??
ERROR: 			R> 1- >R: '1-'??
ERROR: 			RDROP BL 41 EMIT LEAVE: 'RDROP'??
ERROR: 			RDROP BL 41 EMIT LEAVE: 'BL'??
ERROR: 	LAST: 'LAST'??
ERROR: 			DROP CRLF LEAVE: 'CRLF'??
ERROR: 		DUP DICT>NAME CT BL: 'DICT>NAME'??
ERROR: 		DUP DICT>NAME CT BL: 'CT'??
ERROR: 		DUP DICT>NAME CT BL: 'BL'??
ERROR: 		DUP DICT.GetXT 40 EMIT HEX. 41 EMIT BL \ DEBUG: 'DICT.GetXT'??
ERROR: 		DUP DICT.GetXT 40 EMIT HEX. 41 EMIT BL \ DEBUG: 'HEX.'??
ERROR: 		DUP DICT.GetXT 40 EMIT HEX. 41 EMIT BL \ DEBUG: 'BL'??
ERROR: : EXECUTE RDROP >R ; \ ( addr -- ): 'RDROP'??
ERROR: 	2DUP < IF SWAP THEN: '2DUP'??
ERROR: 		DUP C@ C,: 'C,'??
ERROR: 		1+ 2DUP >: '2DUP'??
ERROR: 	2DROP: '2DROP'??
ERROR: 	R> DUP find.ret: 'find.ret'??
ERROR: 	(inline): '(inline)'??
ERROR: 		1+ CELL +: 'CELL'??
ERROR: 	DUP find.ret: 'find.ret'??
ERROR: 	(inline): '(inline)'??
ERROR: 		TUCK C@ DUP: 'TUCK'??
ERROR: 	NIP: 'NIP'??
ERROR: 	(inline): '(inline)'??
ERROR: 	DUP FLAGS.ISIMMEDIATE? \ Immediate?: 'FLAGS.ISIMMEDIATE?'??
ERROR: 		DROP EXECUTE: 'EXECUTE'??
ERROR: 		FLAGS.ISINLINE? : 'FLAGS.ISINLINE?'??
ERROR: 			Copy.INLINE: 'Copy.INLINE'??
ERROR: 			<asm> CPUSH CALL </asm> C, ,: 'C,'??
ERROR: 			<asm> CPUSH CALL </asm> C, ,: ','??
ERROR: 	R@ @ DICT.GetXT: 'DICT.GetXT'??
ERROR: 	R@ @ DICT.GetFLAGS: 'DICT.GetFLAGS'??
ERROR: 	R> CELL + >R: 'CELL'??
ERROR: 	[COMPILE]: '[COMPILE]'??
ERROR: LAST DICT.GetXT: 'LAST'??
ERROR: LAST DICT.GetXT: 'DICT.GetXT'??
ERROR: 	<asm> CPUSH CALL </asm> C,: 'C,'??
ERROR: 	<asm> PUSH , </asm> ,: ','??
ERROR: 	<asm> PUSH , </asm> ,: ','??
ERROR: 	isPostpone ON: 'isPostpone'??
ERROR: 	isPostpone ON: 'ON'??
ERROR: 	>R R@ findInDict \ ( addr -- XT FLAGS found ): 'findInDict'??
ERROR: 		RDROP: 'RDROP'??
ERROR: 		?COMPILING: '?COMPILING'??
ERROR: 			isPostpone @ : 'isPostpone'??
ERROR: 				DROP XT.GetDICTP ,: 'XT.GetDICTP'??
ERROR: 				DROP XT.GetDICTP ,: ','??
ERROR: 				isPostpone OFF: 'isPostpone'??
ERROR: 				isPostpone OFF: 'OFF'??
ERROR: 				DUP FLAGS.ISIMMEDIATE? \ Immediate?: 'FLAGS.ISIMMEDIATE?'??
ERROR: 					DROP EXECUTE: 'EXECUTE'??
ERROR: 					[COMPILE]: '[COMPILE]'??
ERROR: 			DROP EXECUTE: 'EXECUTE'??
ERROR: 		2DROP \ discard IMM and XT place holders: '2DROP'??
ERROR: 		R@ isNumber? \ ( addr -- num bool ): 'isNumber?'??
ERROR: 			?COMPILING: '?COMPILING'??
ERROR: 				isPostpone @ : 'isPostpone'??
ERROR: 					isPostpone OFF: 'isPostpone'??
ERROR: 					isPostpone OFF: 'OFF'??
ERROR: 					DUP 0 255 BETWEEN: 'BETWEEN'??
ERROR: 						<asm> CPUSH CPUSH </asm> C, C,: 'C,'??
ERROR: 						<asm> CPUSH CPUSH </asm> C, C,: 'C,'??
ERROR: 						<asm> CPUSH PUSH </asm> C, ,: 'C,'??
ERROR: 						<asm> CPUSH PUSH </asm> C, ,: ','??
ERROR: 			R@ ZTYPE S" ??" CT RESET \ TODO: error: 'CT'??
ERROR: 		RDROP: 'RDROP'??
ERROR: 		>IN @ skipWS: '>IN'??
ERROR: 		>IN @ skipWS: 'skipWS'??
ERROR: 		>IN ! : '>IN'??
ERROR: 		>IN @ C@ : '>IN'??
ERROR: 			>IN @ getOneWord : '>IN'??
ERROR: 			>IN @ getOneWord : 'getOneWord'??
ERROR: 			>IN ! executeWord: '>IN'??
ERROR: 			>IN ! executeWord: 'executeWord'??
ERROR: : Pad LAST 200 - ;: 'LAST'??
ERROR: 	0 Pad DUP 1+ >In ! C!: 'Pad'??
ERROR: 	0 Pad DUP 1+ >In ! C!: '>In'??
ERROR: 		0 >In @ C!: '>In'??
ERROR: 		IF DROP Pad BL LEAVE THEN: 'Pad'??
ERROR: 		IF DROP Pad BL LEAVE THEN: 'BL'??
ERROR: 			Pad C@ 0 >: 'Pad'??
ERROR: 				Pad C--: 'Pad'??
ERROR: 				Pad C--: 'C--'??
ERROR: 				>In --: '>In'??
ERROR: 				>In --: '--'??
ERROR: 				DUP EMIT BL EMIT: 'BL'??
ERROR: 			DUP 32 127 BETWEEN: 'BETWEEN'??
ERROR: 				>In @ C! : '>In'??
ERROR: 				>In ++: '>In'??
ERROR: 				>In ++: '++'??
ERROR: 				Pad C++: 'Pad'??
ERROR: 				Pad C++: 'C++'??
ERROR: 			R@ C++: 'C++'??
ERROR: 			ROT C! DROP: 'ROT'??
ERROR: 			RDROP: 'RDROP'??
ERROR: 	LAST OVER strlen 2 CELLS 3 + + - : 'LAST'??
ERROR: 	LAST OVER strlen 2 CELLS 3 + + - : 'strlen'??
ERROR: 	LAST OVER strlen 2 CELLS 3 + + - : 'CELLS'??
ERROR: 	LAST R@  !  R> CELL + >R	\ NEXT: 'LAST'??
ERROR: 	LAST R@  !  R> CELL + >R	\ NEXT: 'CELL'??
ERROR: 	HERE R@  !  R> CELL + >R	\ XT: 'HERE'??
ERROR: 	HERE R@  !  R> CELL + >R	\ XT: 'CELL'??
ERROR: 	R> strcpy2c					\ LEN + NAME: 'strcpy2c'??
ERROR: 	R> (LAST) !: '(LAST)'??
ERROR: : IMMEDIATE LAST DICT>FLAGS DUP C@ FLAG_IMMEDIATE OR SWAP C! ;: 'LAST'??
ERROR: : IMMEDIATE LAST DICT>FLAGS DUP C@ FLAG_IMMEDIATE OR SWAP C! ;: 'DICT>FLAGS'??
ERROR: : IMMEDIATE LAST DICT>FLAGS DUP C@ FLAG_IMMEDIATE OR SWAP C! ;: 'FLAG_IMMEDIATE'??
ERROR: : INLINE    LAST DICT>FLAGS DUP C@ FLAG_INLINE    OR SWAP C! ;: 'LAST'??
ERROR: : INLINE    LAST DICT>FLAGS DUP C@ FLAG_INLINE    OR SWAP C! ;: 'DICT>FLAGS'??
ERROR: : INLINE    LAST DICT>FLAGS DUP C@ FLAG_INLINE    OR SWAP C! ;: 'FLAG_INLINE'??
ERROR: 	>IN @ skipWS >IN ! : '>IN'??
ERROR: 	>IN @ skipWS >IN ! : 'skipWS'??
ERROR: 	>IN @ skipWS >IN ! : '>IN'??
ERROR: 	>IN @ C@ : '>IN'??
ERROR: 		>IN @ getOneWord >IN ! : '>IN'??
ERROR: 		>IN @ getOneWord >IN ! : 'getOneWord'??
ERROR: 		>IN @ getOneWord >IN ! : '>IN'??
ERROR: 			Define-Word: 'Define-Word'??
ERROR: 			<asm> CPUSH DICTP </asm> C,: 'C,'??
ERROR: 			LAST ,: 'LAST'??
ERROR: 			LAST ,: ','??
ERROR: : : CREATE-NAME STATE ON ;: 'CREATE-NAME'??
ERROR: : : CREATE-NAME STATE ON ;: 'STATE'??
ERROR: : : CREATE-NAME STATE ON ;: 'ON'??
ERROR: : :NONAME HERE STATE ON ;: 'HERE'??
ERROR: : :NONAME HERE STATE ON ;: 'STATE'??
ERROR: : :NONAME HERE STATE ON ;: 'ON'??
ERROR: 	?COMPILING : '?COMPILING'??
ERROR: 		<asm> CPUSH RET </asm> C,: 'C,'??
ERROR: 		STATE OFF: 'STATE'??
ERROR: 		STATE OFF: 'OFF'??
ERROR: : LAST? LAST DICT>NAME COUNT TYPE ;: 'LAST'??
ERROR: : LAST? LAST DICT>NAME COUNT TYPE ;: 'DICT>NAME'??
ERROR: : LAST? LAST DICT>NAME COUNT TYPE ;: 'COUNT'??
ERROR: : LAST? LAST DICT>NAME COUNT TYPE ;: 'TYPE'??
ERROR: 	LAST CELL + @ DP ! : 'LAST'??
ERROR: 	LAST CELL + @ DP ! : 'CELL'??
ERROR: 	LAST CELL + @ DP ! : 'DP'??
ERROR: 	LAST @ (LAST) ! : 'LAST'??
ERROR: 	LAST @ (LAST) ! : '(LAST)'??
ERROR: : .fl (FL) LAST? ;: '(FL)'??
ERROR: : .fl (FL) LAST? ;: 'LAST?'??
ERROR: : resetState ?COMPILING : '?COMPILING'??
ERROR: 	IF (FL) THEN : '(FL)'??
ERROR: 	STATE OFF: 'STATE'??
ERROR: 	STATE OFF: 'OFF'??
ERROR: 	isPostpone OFF: 'isPostpone'??
ERROR: 	isPostpone OFF: 'OFF'??
ERROR: 	DECIMAL: 'DECIMAL'??
ERROR: : z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;: 'BL'??
ERROR: : z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;: 'DECIMAL.'??
ERROR: : z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;: 'BL'??
ERROR: : z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;: 'HEX.'??
ERROR: : z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;: 'BL'??
ERROR: : z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;: 'HEX.'??
ERROR: : HELLO >IN @: '>IN'??
ERROR: 		S"  Reset. " COUNT TYPE: 'COUNT'??
ERROR: 		S"  Reset. " COUNT TYPE: 'TYPE'??
ERROR: 		S" Hello." COUNT TYPE CRLF: 'COUNT'??
ERROR: 		S" Hello." COUNT TYPE CRLF: 'TYPE'??
ERROR: 		S" Hello." COUNT TYPE CRLF: 'CRLF'??
ERROR: : ALLOT HERE + DP ! ;: 'HERE'??
ERROR: : ALLOT HERE + DP ! ;: 'DP'??
ERROR: : (const) <asm> CPUSH PUSH </asm> C, , <asm> CPUSH RET </asm> C, ;: 'C,'??
ERROR: : (const) <asm> CPUSH PUSH </asm> C, , <asm> CPUSH RET </asm> C, ;: ','??
ERROR: : (const) <asm> CPUSH PUSH </asm> C, , <asm> CPUSH RET </asm> C, ;: 'C,'??
ERROR: : CONSTANT CREATE-NAME (const) ; INLINE: 'CREATE-NAME'??
ERROR: : CONSTANT CREATE-NAME (const) ; INLINE: '(const)'??
ERROR: : VARIABLE CREATE-NAME HERE 2 + CELL + (const) 0 , ; INLINE: 'CREATE-NAME'??
ERROR: : VARIABLE CREATE-NAME HERE 2 + CELL + (const) 0 , ; INLINE: 'HERE'??
ERROR: : VARIABLE CREATE-NAME HERE 2 + CELL + (const) 0 , ; INLINE: 'CELL'??
ERROR: : VARIABLE CREATE-NAME HERE 2 + CELL + (const) 0 , ; INLINE: '(const)'??
ERROR: : VARIABLE CREATE-NAME HERE 2 + CELL + (const) 0 , ; INLINE: ','??
ERROR: : CVARIABLE CREATE-NAME HERE 2 + 1 + (const) 0 C, ; INLINE: 'CREATE-NAME'??
ERROR: : CVARIABLE CREATE-NAME HERE 2 + 1 + (const) 0 C, ; INLINE: 'HERE'??
ERROR: : CVARIABLE CREATE-NAME HERE 2 + 1 + (const) 0 C, ; INLINE: '(const)'??
ERROR: : CVARIABLE CREATE-NAME HERE 2 + 1 + (const) 0 C, ; INLINE: 'C,'??
ERROR: : ? @ . ; \ ( addr -- ): '.'??
ERROR: : C? C@ . ; \ ( addr -- ): '.'??
ERROR: : FREE LAST HERE - ;: 'LAST'??
ERROR: : FREE LAST HERE - ;: 'HERE'??
ERROR: : FREE? FREE . S"  bytes free." CT ;: 'FREE'??
ERROR: : FREE? FREE . S"  bytes free." CT ;: '.'??
ERROR: : FREE? FREE . S"  bytes free." CT ;: 'CT'??
ERROR: : bufAppend DUP C++ DUP C@ + C! ; \ ( ch addr -- ): 'C++'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'CT'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'HERE'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'HEX.'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'BL'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'CT'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: '.'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'BL'??
ERROR: : .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;: 'CT'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'LAST'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'CT'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'HEX.'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'BL'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'CT'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: '.'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'BL'??
ERROR: : .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;: 'CT'??
ERROR: : ascii. DUP HEX. BL DUP DECIMAL. BL EMIT ;: 'HEX.'??
ERROR: : ascii. DUP HEX. BL DUP DECIMAL. BL EMIT ;: 'BL'??
ERROR: : ascii. DUP HEX. BL DUP DECIMAL. BL EMIT ;: 'DECIMAL.'??
ERROR: : ascii. DUP HEX. BL DUP DECIMAL. BL EMIT ;: 'BL'??
ERROR: : ascii 2DUP < IF SWAP THEN BEGIN CRLF DUP ascii. 1+ 2DUP > WHILE 2DROP ;: '2DUP'??
ERROR: : ascii 2DUP < IF SWAP THEN BEGIN CRLF DUP ascii. 1+ 2DUP > WHILE 2DROP ;: 'CRLF'??
ERROR: : ascii 2DUP < IF SWAP THEN BEGIN CRLF DUP ascii. 1+ 2DUP > WHILE 2DROP ;: 'ascii.'??
ERROR: : ascii 2DUP < IF SWAP THEN BEGIN CRLF DUP ascii. 1+ 2DUP > WHILE 2DROP ;: '2DUP'??
ERROR: : ascii 2DUP < IF SWAP THEN BEGIN CRLF DUP ascii. 1+ 2DUP > WHILE 2DROP ;: '2DROP'??
ERROR: : t0 2DUP < IF SWAP THEN BEGIN DUP . 1+ 2DUP > WHILE 2DROP ;: '2DUP'??
ERROR: : t0 2DUP < IF SWAP THEN BEGIN DUP . 1+ 2DUP > WHILE 2DROP ;: '.'??
ERROR: : t0 2DUP < IF SWAP THEN BEGIN DUP . 1+ 2DUP > WHILE 2DROP ;: '2DUP'??
ERROR: : t0 2DUP < IF SWAP THEN BEGIN DUP . 1+ 2DUP > WHILE 2DROP ;: '2DROP'??
ERROR: : t1 2DUP < IF SWAP THEN BEGIN 1+ DUP . 2DUP > WHILE 2DROP ;: '2DUP'??
ERROR: : t1 2DUP < IF SWAP THEN BEGIN 1+ DUP . 2DUP > WHILE 2DROP ;: '.'??
ERROR: : t1 2DUP < IF SWAP THEN BEGIN 1+ DUP . 2DUP > WHILE 2DROP ;: '2DUP'??
ERROR: : t1 2DUP < IF SWAP THEN BEGIN 1+ DUP . 2DUP > WHILE 2DROP ;: '2DROP'??
ERROR: : OK ?COMPILING 0 = IF S" OK" COUNT TYPE .S THEN CRLF ;: '?COMPILING'??
ERROR: : OK ?COMPILING 0 = IF S" OK" COUNT TYPE .S THEN CRLF ;: 'COUNT'??
ERROR: : OK ?COMPILING 0 = IF S" OK" COUNT TYPE .S THEN CRLF ;: 'TYPE'??
ERROR: : OK ?COMPILING 0 = IF S" OK" COUNT TYPE .S THEN CRLF ;: '.S'??
ERROR: : OK ?COMPILING 0 = IF S" OK" COUNT TYPE .S THEN CRLF ;: 'CRLF'??
ERROR: : mainLoop-orig resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;: 'resetState'??
ERROR: : mainLoop-orig resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;: 'OK'??
ERROR: : mainLoop-orig resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;: 'getLine'??
ERROR: : mainLoop-orig resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;: '>IN'??
ERROR: : mainLoop-orig resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;: 'executeInput'??
ERROR: : mainLoop-orig resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;: 'BL'??
ERROR: 	resetState : 'resetState'??
ERROR: 		?COMPILING 0= IF S"  OK" CT .S THEN: '?COMPILING'??
ERROR: 		?COMPILING 0= IF S"  OK" CT .S THEN: '0='??
ERROR: 		?COMPILING 0= IF S"  OK" CT .S THEN: 'CT'??
ERROR: 		?COMPILING 0= IF S"  OK" CT .S THEN: '.S'??
ERROR: 		CRLF getLine 1+ >IN ! : 'CRLF'??
ERROR: 		CRLF getLine 1+ >IN ! : 'getLine'??
ERROR: 		CRLF getLine 1+ >IN ! : '>IN'??
ERROR: 		executeInput BL : 'executeInput'??
ERROR: 		executeInput BL : 'BL'??
ERROR: 99 STATE !: 'STATE'??
ERROR: : main STATE @ 99 = IF S" Hello." CT THEN mainLoop ;: 'STATE'??
ERROR: : main STATE @ 99 = IF S" Hello." CT THEN mainLoop ;: 'CT'??
ERROR: : main STATE @ 99 = IF S" Hello." CT THEN mainLoop ;: 'mainLoop'??
ERROR: : another main ;: 'main'??
ERROR: WORDS: 'WORDS'??
ERROR: .(HERE) BL .(LAST) BL FREE? CRLF: '.(HERE)'??
ERROR: .(HERE) BL .(LAST) BL FREE? CRLF: 'BL'??
ERROR: .(HERE) BL .(LAST) BL FREE? CRLF: '.(LAST)'??
ERROR: .(HERE) BL .(LAST) BL FREE? CRLF: 'BL'??
ERROR: .(HERE) BL .(LAST) BL FREE? CRLF: 'FREE?'??
ERROR: .(HERE) BL .(LAST) BL FREE? CRLF: 'CRLF'??
ERROR: (LAST) . (LAST) @ BL HEX. CRLF: '(LAST)'??
ERROR: (LAST) . (LAST) @ BL HEX. CRLF: '.'??
ERROR: (LAST) . (LAST) @ BL HEX. CRLF: '(LAST)'??
ERROR: (LAST) . (LAST) @ BL HEX. CRLF: 'BL'??
ERROR: (LAST) . (LAST) @ BL HEX. CRLF: 'HEX.'??
ERROR: (LAST) . (LAST) @ BL HEX. CRLF: 'CRLF'??
done.
writing output file forth.bin... done.

writing assembly file forth.asm... done.
all done.