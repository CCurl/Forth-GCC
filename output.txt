log level set to trace.
compiling from forth.src... Parse(): line=[\ ------------------------------------------------------------------------------------------]
Parse(): line=[\ This is the source code for the VM's boot loader.]
Parse(): line=[\ This file is compiled by CFComp.exe and an image of the VM's initial state is created.]
Parse(): line=[\ CFComp.exe then disassembles that image, creating a listing file named dis.txt]
Parse(): line=[\ The resulting dis.txt is read by the VM when it boots.]
Parse(): line=[\ ------------------------------------------------------------------------------------------]
Parse(): line=[]
Parse(): line=[\ .CELL 2 \ 2 => 16-bit, 4 => 32-bit]
Parse(): line=[]
Parse(): line=[.ORG 32]
Parse(): word=[.ORG], HERE=0000, LAST=3dfc, STATE=0
Parse(): word=[32], HERE=0020, LAST=3dfc, STATE=0
 looking for word [32]
IsNumber: 32 (0020), STATE=0
Parse(): line=[]
Parse(): line=[\ don't inline anything with a 12 in it ... that is RET]
Parse(): line=[\ The compiler/dis-assembler is hard-coded to put these values here ...]
Parse(): line=[: CELL   7 C@ ; INLINE]
Parse(): word=[:], HERE=0020, LAST=3dfc, STATE=0

Defining word [CELL]...
Parse(): word=[7], HERE=0025, LAST=3ded, STATE=1
 looking for word [7]
IsNumber: 7 (0007), STATE=1
Parse(): word=[C@], HERE=0027, LAST=3ded, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[;], HERE=0028, LAST=3ded, STATE=1
Parse(): word=[INLINE], HERE=0029, LAST=3ded, STATE=0
Parse(): line=[: DP       16 ; INLINE]
Parse(): word=[:], HERE=0029, LAST=3ded, STATE=0

Defining word [DP]...
Parse(): word=[16], HERE=002e, LAST=3de0, STATE=1
 looking for word [16]
IsNumber: 16 (0010), STATE=1
Parse(): word=[;], HERE=0030, LAST=3de0, STATE=1
Parse(): word=[INLINE], HERE=0031, LAST=3de0, STATE=0
Parse(): line=[: (LAST)   20 ; INLINE]
Parse(): word=[:], HERE=0031, LAST=3de0, STATE=0

Defining word [(LAST)]...
Parse(): word=[20], HERE=0036, LAST=3dcf, STATE=1
 looking for word [20]
IsNumber: 20 (0014), STATE=1
Parse(): word=[;], HERE=0038, LAST=3dcf, STATE=1
Parse(): word=[INLINE], HERE=0039, LAST=3dcf, STATE=0
Parse(): line=[: BASE     24 ; INLINE]
Parse(): word=[:], HERE=0039, LAST=3dcf, STATE=0

Defining word [BASE]...
Parse(): word=[24], HERE=003e, LAST=3dc0, STATE=1
 looking for word [24]
IsNumber: 24 (0018), STATE=1
Parse(): word=[;], HERE=0040, LAST=3dc0, STATE=1
Parse(): word=[INLINE], HERE=0041, LAST=3dc0, STATE=0
Parse(): line=[: MEM_SZ 16 1024 * ;]
Parse(): word=[:], HERE=0041, LAST=3dc0, STATE=0

Defining word [MEM_SZ]...
Parse(): word=[16], HERE=0046, LAST=3daf, STATE=1
 looking for word [16]
IsNumber: 16 (0010), STATE=1
Parse(): word=[1024], HERE=0048, LAST=3daf, STATE=1
 looking for word [1024]
IsNumber: 1024 (0400), STATE=1
Parse(): word=[*], HERE=004d, LAST=3daf, STATE=1
[*] Is a FORTH primitive: opcode=19
Parse(): word=[;], HERE=004e, LAST=3daf, STATE=1
Parse(): line=[]
Parse(): line=[: HERE DP @ ; INLINE]
Parse(): word=[:], HERE=004f, LAST=3daf, STATE=0

Defining word [HERE]...
Parse(): word=[DP], HERE=0054, LAST=3da0, STATE=1
 looking for word [DP]
FORTH word [DP]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0056, LAST=3da0, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[;], HERE=0057, LAST=3da0, STATE=1
Parse(): word=[INLINE], HERE=0058, LAST=3da0, STATE=0
Parse(): line=[: LAST (LAST) @ ; INLINE]
Parse(): word=[:], HERE=0058, LAST=3da0, STATE=0

Defining word [LAST]...
Parse(): word=[(LAST)], HERE=005d, LAST=3d91, STATE=1
 looking for word [(LAST)]
FORTH word [(LAST)]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=005f, LAST=3d91, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[;], HERE=0060, LAST=3d91, STATE=1
Parse(): word=[INLINE], HERE=0061, LAST=3d91, STATE=0
Parse(): line=[]
Parse(): line=[: CELLS CELL * ; \ ( num1 -- num2 )]
Parse(): word=[:], HERE=0061, LAST=3d91, STATE=0

Defining word [CELLS]...
Parse(): word=[CELL], HERE=0066, LAST=3d81, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[*], HERE=0069, LAST=3d81, STATE=1
[*] Is a FORTH primitive: opcode=19
Parse(): word=[;], HERE=006a, LAST=3d81, STATE=1
Parse(): line=[]
Parse(): line=[: >IN   <asm> .HERE 2 + .CELL + .LITERAL </asm> ; 0 .COMMA]
Parse(): word=[:], HERE=006b, LAST=3d81, STATE=0

Defining word [>IN]...
Parse(): word=[<asm>], HERE=0070, LAST=3d73, STATE=1
Parse(): word=[.HERE], HERE=0070, LAST=3d73, STATE=2
Parse(): word=[2], HERE=0070, LAST=3d73, STATE=2
 looking for word [2]
IsNumber: 2 (0002), STATE=2
Parse(): word=[+], HERE=0070, LAST=3d73, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=007a, IR=17 - ADD 112 + 2 = 114
Parse(): word=[.CELL], HERE=0070, LAST=3d73, STATE=2
Parse(): word=[+], HERE=0070, LAST=3d73, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=007a, IR=17 - ADD 114 + 4 = 118
Parse(): word=[.LITERAL], HERE=0070, LAST=3d73, STATE=2
Parse(): word=[</asm>], HERE=0075, LAST=3d73, STATE=2
Parse(): word=[;], HERE=0075, LAST=3d73, STATE=1
Parse(): word=[0], HERE=0076, LAST=3d73, STATE=0
 looking for word [0]
IsNumber: 0 (0000), STATE=0
Parse(): word=[.COMMA], HERE=0076, LAST=3d73, STATE=0
Parse(): line=[: STATE <asm> .HERE 2 + .CELL + .LITERAL </asm> ; 0 .COMMA]
Parse(): word=[:], HERE=007a, LAST=3d73, STATE=0

Defining word [STATE]...
Parse(): word=[<asm>], HERE=007f, LAST=3d63, STATE=1
Parse(): word=[.HERE], HERE=007f, LAST=3d63, STATE=2
Parse(): word=[2], HERE=007f, LAST=3d63, STATE=2
 looking for word [2]
IsNumber: 2 (0002), STATE=2
Parse(): word=[+], HERE=007f, LAST=3d63, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=0089, IR=17 - ADD 127 + 2 = 129
Parse(): word=[.CELL], HERE=007f, LAST=3d63, STATE=2
Parse(): word=[+], HERE=007f, LAST=3d63, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=0089, IR=17 - ADD 129 + 4 = 133
Parse(): word=[.LITERAL], HERE=007f, LAST=3d63, STATE=2
Parse(): word=[</asm>], HERE=0084, LAST=3d63, STATE=2
Parse(): word=[;], HERE=0084, LAST=3d63, STATE=1
Parse(): word=[0], HERE=0085, LAST=3d63, STATE=0
 looking for word [0]
IsNumber: 0 (0000), STATE=0
Parse(): word=[.COMMA], HERE=0085, LAST=3d63, STATE=0
Parse(): line=[: isNeg <asm> .HERE 2 + .CELL + .LITERAL </asm> ; 0 .COMMA]
Parse(): word=[:], HERE=0089, LAST=3d63, STATE=0

Defining word [isNeg]...
Parse(): word=[<asm>], HERE=008e, LAST=3d53, STATE=1
Parse(): word=[.HERE], HERE=008e, LAST=3d53, STATE=2
Parse(): word=[2], HERE=008e, LAST=3d53, STATE=2
 looking for word [2]
IsNumber: 2 (0002), STATE=2
Parse(): word=[+], HERE=008e, LAST=3d53, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=0098, IR=17 - ADD 142 + 2 = 144
Parse(): word=[.CELL], HERE=008e, LAST=3d53, STATE=2
Parse(): word=[+], HERE=008e, LAST=3d53, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=0098, IR=17 - ADD 144 + 4 = 148
Parse(): word=[.LITERAL], HERE=008e, LAST=3d53, STATE=2
Parse(): word=[</asm>], HERE=0093, LAST=3d53, STATE=2
Parse(): word=[;], HERE=0093, LAST=3d53, STATE=1
Parse(): word=[0], HERE=0094, LAST=3d53, STATE=0
 looking for word [0]
IsNumber: 0 (0000), STATE=0
Parse(): word=[.COMMA], HERE=0094, LAST=3d53, STATE=0
Parse(): line=[]
Parse(): line=[\ : STDIN <asm> .HERE 2 + .CELL + .LITERAL </asm> ; 0 .COMMA]
Parse(): line=[\ : INPUT-FP <asm> .HERE 4 + .LITERAL </asm> ; 0 .COMMA]
Parse(): line=[]
Parse(): line=[: !  <asm> STORE  </asm> ; INLINE]
Parse(): word=[:], HERE=0098, LAST=3d53, STATE=0

Defining word [!]...
Parse(): word=[<asm>], HERE=009d, LAST=3d47, STATE=1
Parse(): word=[STORE], HERE=009d, LAST=3d47, STATE=2
[STORE] Is an ASM keyword: opcode=3
Parse(): word=[</asm>], HERE=009e, LAST=3d47, STATE=2
Parse(): word=[;], HERE=009e, LAST=3d47, STATE=1
Parse(): word=[INLINE], HERE=009f, LAST=3d47, STATE=0
Parse(): line=[: C! <asm> CSTORE </asm> ; INLINE]
Parse(): word=[:], HERE=009f, LAST=3d47, STATE=0

Defining word [C!]...
Parse(): word=[<asm>], HERE=00a4, LAST=3d3a, STATE=1
Parse(): word=[CSTORE], HERE=00a4, LAST=3d3a, STATE=2
[CSTORE] Is an ASM keyword: opcode=16
Parse(): word=[</asm>], HERE=00a5, LAST=3d3a, STATE=2
Parse(): word=[;], HERE=00a5, LAST=3d3a, STATE=1
Parse(): word=[INLINE], HERE=00a6, LAST=3d3a, STATE=0
Parse(): line=[]
Parse(): line=[: @  <asm> FETCH  </asm> ; INLINE]
Parse(): word=[:], HERE=00a6, LAST=3d3a, STATE=0

Defining word [@]...
Parse(): word=[<asm>], HERE=00ab, LAST=3d2e, STATE=1
Parse(): word=[FETCH], HERE=00ab, LAST=3d2e, STATE=2
[FETCH] Is an ASM keyword: opcode=2
Parse(): word=[</asm>], HERE=00ac, LAST=3d2e, STATE=2
Parse(): word=[;], HERE=00ac, LAST=3d2e, STATE=1
Parse(): word=[INLINE], HERE=00ad, LAST=3d2e, STATE=0
Parse(): line=[: C@ <asm> CFETCH </asm> ; INLINE]
Parse(): word=[:], HERE=00ad, LAST=3d2e, STATE=0

Defining word [C@]...
Parse(): word=[<asm>], HERE=00b2, LAST=3d21, STATE=1
Parse(): word=[CFETCH], HERE=00b2, LAST=3d21, STATE=2
[CFETCH] Is an ASM keyword: opcode=15
Parse(): word=[</asm>], HERE=00b3, LAST=3d21, STATE=2
Parse(): word=[;], HERE=00b3, LAST=3d21, STATE=1
Parse(): word=[INLINE], HERE=00b4, LAST=3d21, STATE=0
Parse(): line=[]
Parse(): line=[: + <asm> ADD </asm> ; INLINE]
Parse(): word=[:], HERE=00b4, LAST=3d21, STATE=0

Defining word [+]...
Parse(): word=[<asm>], HERE=00b9, LAST=3d15, STATE=1
Parse(): word=[ADD], HERE=00b9, LAST=3d15, STATE=2
[ADD] Is an ASM keyword: opcode=17
Parse(): word=[</asm>], HERE=00ba, LAST=3d15, STATE=2
Parse(): word=[;], HERE=00ba, LAST=3d15, STATE=1
Parse(): word=[INLINE], HERE=00bb, LAST=3d15, STATE=0
Parse(): line=[: - <asm> SUB </asm> ; INLINE]
Parse(): word=[:], HERE=00bb, LAST=3d15, STATE=0

Defining word [-]...
Parse(): word=[<asm>], HERE=00c0, LAST=3d09, STATE=1
Parse(): word=[SUB], HERE=00c0, LAST=3d09, STATE=2
[SUB] Is an ASM keyword: opcode=18
Parse(): word=[</asm>], HERE=00c1, LAST=3d09, STATE=2
Parse(): word=[;], HERE=00c1, LAST=3d09, STATE=1
Parse(): word=[INLINE], HERE=00c2, LAST=3d09, STATE=0
Parse(): line=[: * <asm> MUL </asm> ; INLINE]
Parse(): word=[:], HERE=00c2, LAST=3d09, STATE=0

Defining word [*]...
Parse(): word=[<asm>], HERE=00c7, LAST=3cfd, STATE=1
Parse(): word=[MUL], HERE=00c7, LAST=3cfd, STATE=2
[MUL] Is an ASM keyword: opcode=19
Parse(): word=[</asm>], HERE=00c8, LAST=3cfd, STATE=2
Parse(): word=[;], HERE=00c8, LAST=3cfd, STATE=1
Parse(): word=[INLINE], HERE=00c9, LAST=3cfd, STATE=0
Parse(): line=[: / <asm> DIV </asm> ; INLINE]
Parse(): word=[:], HERE=00c9, LAST=3cfd, STATE=0

Defining word [/]...
Parse(): word=[<asm>], HERE=00ce, LAST=3cf1, STATE=1
Parse(): word=[DIV], HERE=00ce, LAST=3cf1, STATE=2
[DIV] Is an ASM keyword: opcode=20
Parse(): word=[</asm>], HERE=00cf, LAST=3cf1, STATE=2
Parse(): word=[;], HERE=00cf, LAST=3cf1, STATE=1
Parse(): word=[INLINE], HERE=00d0, LAST=3cf1, STATE=0
Parse(): line=[]
Parse(): line=[: 1+ <asm> ONEPLUS </asm> ; INLINE]
Parse(): word=[:], HERE=00d0, LAST=3cf1, STATE=0

Defining word [1+]...
Parse(): word=[<asm>], HERE=00d5, LAST=3ce4, STATE=1
Parse(): word=[ONEPLUS], HERE=00d5, LAST=3ce4, STATE=2
[ONEPLUS] Is an ASM keyword: opcode=36
Parse(): word=[</asm>], HERE=00d6, LAST=3ce4, STATE=2
Parse(): word=[;], HERE=00d6, LAST=3ce4, STATE=1
Parse(): word=[INLINE], HERE=00d7, LAST=3ce4, STATE=0
Parse(): line=[: 1- 1 - ; INLINE]
Parse(): word=[:], HERE=00d7, LAST=3ce4, STATE=0

Defining word [1-]...
Parse(): word=[1], HERE=00dc, LAST=3cd7, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[-], HERE=00de, LAST=3cd7, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=00df, LAST=3cd7, STATE=1
Parse(): word=[INLINE], HERE=00e0, LAST=3cd7, STATE=0
Parse(): line=[]
Parse(): line=[: << <asm> LSHIFT </asm> ; INLINE]
Parse(): word=[:], HERE=00e0, LAST=3cd7, STATE=0

Defining word [<<]...
Parse(): word=[<asm>], HERE=00e5, LAST=3cca, STATE=1
Parse(): word=[LSHIFT], HERE=00e5, LAST=3cca, STATE=2
[LSHIFT] Is an ASM keyword: opcode=40
Parse(): word=[</asm>], HERE=00e6, LAST=3cca, STATE=2
Parse(): word=[;], HERE=00e6, LAST=3cca, STATE=1
Parse(): word=[INLINE], HERE=00e7, LAST=3cca, STATE=0
Parse(): line=[: >> <asm> RSHIFT </asm> ; INLINE]
Parse(): word=[:], HERE=00e7, LAST=3cca, STATE=0

Defining word [>>]...
Parse(): word=[<asm>], HERE=00ec, LAST=3cbd, STATE=1
Parse(): word=[RSHIFT], HERE=00ec, LAST=3cbd, STATE=2
[RSHIFT] Is an ASM keyword: opcode=41
Parse(): word=[</asm>], HERE=00ed, LAST=3cbd, STATE=2
Parse(): word=[;], HERE=00ed, LAST=3cbd, STATE=1
Parse(): word=[INLINE], HERE=00ee, LAST=3cbd, STATE=0
Parse(): line=[: 2* 1 << ; INLINE ]
Parse(): word=[:], HERE=00ee, LAST=3cbd, STATE=0

Defining word [2*]...
Parse(): word=[1], HERE=00f3, LAST=3cb0, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[<<], HERE=00f5, LAST=3cb0, STATE=1
[<<] Is a FORTH primitive: opcode=40
Parse(): word=[;], HERE=00f6, LAST=3cb0, STATE=1
Parse(): word=[INLINE], HERE=00f7, LAST=3cb0, STATE=0
Parse(): line=[: 2/ 1 >> ; INLINE]
Parse(): word=[:], HERE=00f7, LAST=3cb0, STATE=0

Defining word [2/]...
Parse(): word=[1], HERE=00fc, LAST=3ca3, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[>>], HERE=00fe, LAST=3ca3, STATE=1
[>>] Is a FORTH primitive: opcode=41
Parse(): word=[;], HERE=00ff, LAST=3ca3, STATE=1
Parse(): word=[INLINE], HERE=0100, LAST=3ca3, STATE=0
Parse(): line=[]
Parse(): line=[: AND <asm> AND </asm> ; INLINE]
Parse(): word=[:], HERE=0100, LAST=3ca3, STATE=0

Defining word [AND]...
Parse(): word=[<asm>], HERE=0105, LAST=3c95, STATE=1
Parse(): word=[AND], HERE=0105, LAST=3c95, STATE=2
[AND] Is an ASM keyword: opcode=42
Parse(): word=[</asm>], HERE=0106, LAST=3c95, STATE=2
Parse(): word=[;], HERE=0106, LAST=3c95, STATE=1
Parse(): word=[INLINE], HERE=0107, LAST=3c95, STATE=0
Parse(): line=[: OR  <asm> OR  </asm> ; INLINE]
Parse(): word=[:], HERE=0107, LAST=3c95, STATE=0

Defining word [OR]...
Parse(): word=[<asm>], HERE=010c, LAST=3c88, STATE=1
Parse(): word=[OR], HERE=010c, LAST=3c88, STATE=2
[OR] Is an ASM keyword: opcode=43
Parse(): word=[</asm>], HERE=010d, LAST=3c88, STATE=2
Parse(): word=[;], HERE=010d, LAST=3c88, STATE=1
Parse(): word=[INLINE], HERE=010e, LAST=3c88, STATE=0
Parse(): line=[]
Parse(): line=[: >R <asm> DTOR   </asm> ; INLINE]
Parse(): word=[:], HERE=010e, LAST=3c88, STATE=0

Defining word [>R]...
Parse(): word=[<asm>], HERE=0113, LAST=3c7b, STATE=1
Parse(): word=[DTOR], HERE=0113, LAST=3c7b, STATE=2
[DTOR] Is an ASM keyword: opcode=33
Parse(): word=[</asm>], HERE=0114, LAST=3c7b, STATE=2
Parse(): word=[;], HERE=0114, LAST=3c7b, STATE=1
Parse(): word=[INLINE], HERE=0115, LAST=3c7b, STATE=0
Parse(): line=[: R@ <asm> RFETCH </asm> ; INLINE]
Parse(): word=[:], HERE=0115, LAST=3c7b, STATE=0

Defining word [R@]...
Parse(): word=[<asm>], HERE=011a, LAST=3c6e, STATE=1
Parse(): word=[RFETCH], HERE=011a, LAST=3c6e, STATE=2
[RFETCH] Is an ASM keyword: opcode=34
Parse(): word=[</asm>], HERE=011b, LAST=3c6e, STATE=2
Parse(): word=[;], HERE=011b, LAST=3c6e, STATE=1
Parse(): word=[INLINE], HERE=011c, LAST=3c6e, STATE=0
Parse(): line=[: R> <asm> RTOD   </asm> ; INLINE]
Parse(): word=[:], HERE=011c, LAST=3c6e, STATE=0

Defining word [R>]...
Parse(): word=[<asm>], HERE=0121, LAST=3c61, STATE=1
Parse(): word=[RTOD], HERE=0121, LAST=3c61, STATE=2
[RTOD] Is an ASM keyword: opcode=35
Parse(): word=[</asm>], HERE=0122, LAST=3c61, STATE=2
Parse(): word=[;], HERE=0122, LAST=3c61, STATE=1
Parse(): word=[INLINE], HERE=0123, LAST=3c61, STATE=0
Parse(): line=[]
Parse(): line=[: < <asm> LT </asm> ; INLINE]
Parse(): word=[:], HERE=0123, LAST=3c61, STATE=0

Defining word [<]...
Parse(): word=[<asm>], HERE=0128, LAST=3c55, STATE=1
Parse(): word=[LT], HERE=0128, LAST=3c55, STATE=2
[LT] Is an ASM keyword: opcode=21
Parse(): word=[</asm>], HERE=0129, LAST=3c55, STATE=2
Parse(): word=[;], HERE=0129, LAST=3c55, STATE=1
Parse(): word=[INLINE], HERE=012a, LAST=3c55, STATE=0
Parse(): line=[: = <asm> EQ </asm> ; INLINE]
Parse(): word=[:], HERE=012a, LAST=3c55, STATE=0

Defining word [=]...
Parse(): word=[<asm>], HERE=012f, LAST=3c49, STATE=1
Parse(): word=[EQ], HERE=012f, LAST=3c49, STATE=2
[EQ] Is an ASM keyword: opcode=22
Parse(): word=[</asm>], HERE=0130, LAST=3c49, STATE=2
Parse(): word=[;], HERE=0130, LAST=3c49, STATE=1
Parse(): word=[INLINE], HERE=0131, LAST=3c49, STATE=0
Parse(): line=[: > <asm> GT </asm> ; INLINE]
Parse(): word=[:], HERE=0131, LAST=3c49, STATE=0

Defining word [>]...
Parse(): word=[<asm>], HERE=0136, LAST=3c3d, STATE=1
Parse(): word=[GT], HERE=0136, LAST=3c3d, STATE=2
[GT] Is an ASM keyword: opcode=23
Parse(): word=[</asm>], HERE=0137, LAST=3c3d, STATE=2
Parse(): word=[;], HERE=0137, LAST=3c3d, STATE=1
Parse(): word=[INLINE], HERE=0138, LAST=3c3d, STATE=0
Parse(): line=[]
Parse(): line=[: DUP  <asm> DUP  </asm> ; INLINE]
Parse(): word=[:], HERE=0138, LAST=3c3d, STATE=0

Defining word [DUP]...
Parse(): word=[<asm>], HERE=013d, LAST=3c2f, STATE=1
Parse(): word=[DUP], HERE=013d, LAST=3c2f, STATE=2
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[</asm>], HERE=013e, LAST=3c2f, STATE=2
Parse(): word=[;], HERE=013e, LAST=3c2f, STATE=1
Parse(): word=[INLINE], HERE=013f, LAST=3c2f, STATE=0
Parse(): line=[: SWAP <asm> SWAP </asm> ; INLINE]
Parse(): word=[:], HERE=013f, LAST=3c2f, STATE=0

Defining word [SWAP]...
Parse(): word=[<asm>], HERE=0144, LAST=3c20, STATE=1
Parse(): word=[SWAP], HERE=0144, LAST=3c20, STATE=2
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[</asm>], HERE=0145, LAST=3c20, STATE=2
Parse(): word=[;], HERE=0145, LAST=3c20, STATE=1
Parse(): word=[INLINE], HERE=0146, LAST=3c20, STATE=0
Parse(): line=[: DROP <asm> DROP </asm> ; INLINE]
Parse(): word=[:], HERE=0146, LAST=3c20, STATE=0

Defining word [DROP]...
Parse(): word=[<asm>], HERE=014b, LAST=3c11, STATE=1
Parse(): word=[DROP], HERE=014b, LAST=3c11, STATE=2
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[</asm>], HERE=014c, LAST=3c11, STATE=2
Parse(): word=[;], HERE=014c, LAST=3c11, STATE=1
Parse(): word=[INLINE], HERE=014d, LAST=3c11, STATE=0
Parse(): line=[: OVER <asm> OVER </asm> ; INLINE]
Parse(): word=[:], HERE=014d, LAST=3c11, STATE=0

Defining word [OVER]...
Parse(): word=[<asm>], HERE=0152, LAST=3c02, STATE=1
Parse(): word=[OVER], HERE=0152, LAST=3c02, STATE=2
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[</asm>], HERE=0153, LAST=3c02, STATE=2
Parse(): word=[;], HERE=0153, LAST=3c02, STATE=1
Parse(): word=[INLINE], HERE=0154, LAST=3c02, STATE=0
Parse(): line=[: PICK <asm> PICK </asm> ; INLINE]
Parse(): word=[:], HERE=0154, LAST=3c02, STATE=0

Defining word [PICK]...
Parse(): word=[<asm>], HERE=0159, LAST=3bf3, STATE=1
Parse(): word=[PICK], HERE=0159, LAST=3bf3, STATE=2
[PICK] Is an ASM keyword: opcode=37
Parse(): word=[</asm>], HERE=015a, LAST=3bf3, STATE=2
Parse(): word=[;], HERE=015a, LAST=3bf3, STATE=1
Parse(): word=[INLINE], HERE=015b, LAST=3bf3, STATE=0
Parse(): line=[]
Parse(): line=[: DEPTH <asm> DEPTH </asm> ; INLINE]
Parse(): word=[:], HERE=015b, LAST=3bf3, STATE=0

Defining word [DEPTH]...
Parse(): word=[<asm>], HERE=0160, LAST=3be3, STATE=1
Parse(): word=[DEPTH], HERE=0160, LAST=3be3, STATE=2
[DEPTH] Is an ASM keyword: opcode=38
Parse(): word=[</asm>], HERE=0161, LAST=3be3, STATE=2
Parse(): word=[;], HERE=0161, LAST=3be3, STATE=1
Parse(): word=[INLINE], HERE=0162, LAST=3be3, STATE=0
Parse(): line=[: RESET <asm> RESET </asm> ; INLINE]
Parse(): word=[:], HERE=0162, LAST=3be3, STATE=0

Defining word [RESET]...
Parse(): word=[<asm>], HERE=0167, LAST=3bd3, STATE=1
Parse(): word=[RESET], HERE=0167, LAST=3bd3, STATE=2
[RESET] Is an ASM keyword: opcode=254
Parse(): word=[</asm>], HERE=0168, LAST=3bd3, STATE=2
Parse(): word=[;], HERE=0168, LAST=3bd3, STATE=1
Parse(): word=[INLINE], HERE=0169, LAST=3bd3, STATE=0
Parse(): line=[: BREAK <asm> BREAK </asm> ; INLINE]
Parse(): word=[:], HERE=0169, LAST=3bd3, STATE=0

Defining word [BREAK]...
Parse(): word=[<asm>], HERE=016e, LAST=3bc3, STATE=1
Parse(): word=[BREAK], HERE=016e, LAST=3bc3, STATE=2
[BREAK] Is an ASM keyword: opcode=253
Parse(): word=[</asm>], HERE=016f, LAST=3bc3, STATE=2
Parse(): word=[;], HERE=016f, LAST=3bc3, STATE=1
Parse(): word=[INLINE], HERE=0170, LAST=3bc3, STATE=0
Parse(): line=[: BYE   <asm> BYE   </asm> ; INLINE]
Parse(): word=[:], HERE=0170, LAST=3bc3, STATE=0

Defining word [BYE]...
Parse(): word=[<asm>], HERE=0175, LAST=3bb5, STATE=1
Parse(): word=[BYE], HERE=0175, LAST=3bb5, STATE=2
[BYE] Is an ASM keyword: opcode=255
Parse(): word=[</asm>], HERE=0176, LAST=3bb5, STATE=2
Parse(): word=[;], HERE=0176, LAST=3bb5, STATE=1
Parse(): word=[INLINE], HERE=0177, LAST=3bb5, STATE=0
Parse(): line=[]
Parse(): line=[: EMIT  <asm> EMIT  </asm> ; INLINE]
Parse(): word=[:], HERE=0177, LAST=3bb5, STATE=0

Defining word [EMIT]...
Parse(): word=[<asm>], HERE=017c, LAST=3ba6, STATE=1
Parse(): word=[EMIT], HERE=017c, LAST=3ba6, STATE=2
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[</asm>], HERE=017d, LAST=3ba6, STATE=2
Parse(): word=[;], HERE=017d, LAST=3ba6, STATE=1
Parse(): word=[INLINE], HERE=017e, LAST=3ba6, STATE=0
Parse(): line=[: ZTYPE <asm> ZTYPE </asm> ; INLINE]
Parse(): word=[:], HERE=017e, LAST=3ba6, STATE=0

Defining word [ZTYPE]...
Parse(): word=[<asm>], HERE=0183, LAST=3b96, STATE=1
Parse(): word=[ZTYPE], HERE=0183, LAST=3b96, STATE=2
[ZTYPE] Is an ASM keyword: opcode=13
Parse(): word=[</asm>], HERE=0184, LAST=3b96, STATE=2
Parse(): word=[;], HERE=0184, LAST=3b96, STATE=1
Parse(): word=[INLINE], HERE=0185, LAST=3b96, STATE=0
Parse(): line=[: GETCH <asm> GETCH </asm> ; INLINE]
Parse(): word=[:], HERE=0185, LAST=3b96, STATE=0

Defining word [GETCH]...
Parse(): word=[<asm>], HERE=018a, LAST=3b86, STATE=1
Parse(): word=[GETCH], HERE=018a, LAST=3b86, STATE=2
[GETCH] Is an ASM keyword: opcode=39
Parse(): word=[</asm>], HERE=018b, LAST=3b86, STATE=2
Parse(): word=[;], HERE=018b, LAST=3b86, STATE=1
Parse(): word=[INLINE], HERE=018c, LAST=3b86, STATE=0
Parse(): line=[]
Parse(): line=[: FOPEN     <asm> FOPEN     </asm> ; INLINE]
Parse(): word=[:], HERE=018c, LAST=3b86, STATE=0

Defining word [FOPEN]...
Parse(): word=[<asm>], HERE=0191, LAST=3b76, STATE=1
Parse(): word=[FOPEN], HERE=0191, LAST=3b76, STATE=2
[FOPEN] Is an ASM keyword: opcode=28
Parse(): word=[</asm>], HERE=0192, LAST=3b76, STATE=2
Parse(): word=[;], HERE=0192, LAST=3b76, STATE=1
Parse(): word=[INLINE], HERE=0193, LAST=3b76, STATE=0
Parse(): line=[: FREAD     <asm> FREAD     </asm> ; INLINE]
Parse(): word=[:], HERE=0193, LAST=3b76, STATE=0

Defining word [FREAD]...
Parse(): word=[<asm>], HERE=0198, LAST=3b66, STATE=1
Parse(): word=[FREAD], HERE=0198, LAST=3b66, STATE=2
[FREAD] Is an ASM keyword: opcode=29
Parse(): word=[</asm>], HERE=0199, LAST=3b66, STATE=2
Parse(): word=[;], HERE=0199, LAST=3b66, STATE=1
Parse(): word=[INLINE], HERE=019a, LAST=3b66, STATE=0
Parse(): line=[: FREADLINE <asm> FREADLINE </asm> ; INLINE]
Parse(): word=[:], HERE=019a, LAST=3b66, STATE=0

Defining word [FREADLINE]...
Parse(): word=[<asm>], HERE=019f, LAST=3b52, STATE=1
Parse(): word=[FREADLINE], HERE=019f, LAST=3b52, STATE=2
[FREADLINE] Is an ASM keyword: opcode=30
Parse(): word=[</asm>], HERE=01a0, LAST=3b52, STATE=2
Parse(): word=[;], HERE=01a0, LAST=3b52, STATE=1
Parse(): word=[INLINE], HERE=01a1, LAST=3b52, STATE=0
Parse(): line=[: FWRITE    <asm> FWRITE    </asm> ; INLINE]
Parse(): word=[:], HERE=01a1, LAST=3b52, STATE=0

Defining word [FWRITE]...
Parse(): word=[<asm>], HERE=01a6, LAST=3b41, STATE=1
Parse(): word=[FWRITE], HERE=01a6, LAST=3b41, STATE=2
[FWRITE] Is an ASM keyword: opcode=31
Parse(): word=[</asm>], HERE=01a7, LAST=3b41, STATE=2
Parse(): word=[;], HERE=01a7, LAST=3b41, STATE=1
Parse(): word=[INLINE], HERE=01a8, LAST=3b41, STATE=0
Parse(): line=[: FCLOSE    <asm> FCLOSE    </asm> ; INLINE]
Parse(): word=[:], HERE=01a8, LAST=3b41, STATE=0

Defining word [FCLOSE]...
Parse(): word=[<asm>], HERE=01ad, LAST=3b30, STATE=1
Parse(): word=[FCLOSE], HERE=01ad, LAST=3b30, STATE=2
[FCLOSE] Is an ASM keyword: opcode=32
Parse(): word=[</asm>], HERE=01ae, LAST=3b30, STATE=2
Parse(): word=[;], HERE=01ae, LAST=3b30, STATE=1
Parse(): word=[INLINE], HERE=01af, LAST=3b30, STATE=0
Parse(): line=[]
Parse(): line=[: COMPARE <asm> COMPARE </asm> ; INLINE]
Parse(): word=[:], HERE=01af, LAST=3b30, STATE=0

Defining word [COMPARE]...
Parse(): word=[<asm>], HERE=01b4, LAST=3b1e, STATE=1
Parse(): word=[COMPARE], HERE=01b4, LAST=3b1e, STATE=2
[COMPARE] Is an ASM keyword: opcode=27
Parse(): word=[</asm>], HERE=01b5, LAST=3b1e, STATE=2
Parse(): word=[;], HERE=01b5, LAST=3b1e, STATE=1
Parse(): word=[INLINE], HERE=01b6, LAST=3b1e, STATE=0
Parse(): line=[: COMPAREI <asm> COMPAREI </asm> ; INLINE]
Parse(): word=[:], HERE=01b6, LAST=3b1e, STATE=0

Defining word [COMPAREI]...
Parse(): word=[<asm>], HERE=01bb, LAST=3b0b, STATE=1
Parse(): word=[COMPAREI], HERE=01bb, LAST=3b0b, STATE=2
[COMPAREI] Is an ASM keyword: opcode=47
Parse(): word=[</asm>], HERE=01bc, LAST=3b0b, STATE=2
Parse(): word=[;], HERE=01bc, LAST=3b0b, STATE=1
Parse(): word=[INLINE], HERE=01bd, LAST=3b0b, STATE=0
Parse(): line=[]
Parse(): line=[: RDROP R> DROP   ; INLINE]
Parse(): word=[:], HERE=01bd, LAST=3b0b, STATE=0

Defining word [RDROP]...
Parse(): word=[R>], HERE=01c2, LAST=3afb, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[DROP], HERE=01c3, LAST=3afb, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[;], HERE=01c4, LAST=3afb, STATE=1
Parse(): word=[INLINE], HERE=01c5, LAST=3afb, STATE=0
Parse(): line=[: TUCK  SWAP OVER ; INLINE]
Parse(): word=[:], HERE=01c5, LAST=3afb, STATE=0

Defining word [TUCK]...
Parse(): word=[SWAP], HERE=01ca, LAST=3aec, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[OVER], HERE=01cb, LAST=3aec, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[;], HERE=01cc, LAST=3aec, STATE=1
Parse(): word=[INLINE], HERE=01cd, LAST=3aec, STATE=0
Parse(): line=[: NIP   SWAP DROP ; INLINE]
Parse(): word=[:], HERE=01cd, LAST=3aec, STATE=0

Defining word [NIP]...
Parse(): word=[SWAP], HERE=01d2, LAST=3ade, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[DROP], HERE=01d3, LAST=3ade, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[;], HERE=01d4, LAST=3ade, STATE=1
Parse(): word=[INLINE], HERE=01d5, LAST=3ade, STATE=0
Parse(): line=[: ROT   >R SWAP R> SWAP ;]
Parse(): word=[:], HERE=01d5, LAST=3ade, STATE=0

Defining word [ROT]...
Parse(): word=[>R], HERE=01da, LAST=3ad0, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[SWAP], HERE=01db, LAST=3ad0, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[R>], HERE=01dc, LAST=3ad0, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[SWAP], HERE=01dd, LAST=3ad0, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[;], HERE=01de, LAST=3ad0, STATE=1
Parse(): line=[: -ROT  SWAP >R SWAP R> ;]
Parse(): word=[:], HERE=01df, LAST=3ad0, STATE=0

Defining word [-ROT]...
Parse(): word=[SWAP], HERE=01e4, LAST=3ac1, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[>R], HERE=01e5, LAST=3ac1, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[SWAP], HERE=01e6, LAST=3ac1, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[R>], HERE=01e7, LAST=3ac1, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[;], HERE=01e8, LAST=3ac1, STATE=1
Parse(): line=[]
Parse(): line=[: ++  DUP @  1+ SWAP ! ;  \ ( addr -- )]
Parse(): word=[:], HERE=01e9, LAST=3ac1, STATE=0

Defining word [++]...
Parse(): word=[DUP], HERE=01ee, LAST=3ab4, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[@], HERE=01ef, LAST=3ab4, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[1+], HERE=01f0, LAST=3ab4, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[SWAP], HERE=01f1, LAST=3ab4, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=01f2, LAST=3ab4, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=01f3, LAST=3ab4, STATE=1
Parse(): line=[: C++ DUP C@ 1+ SWAP C! ; \ ( addr -- )]
Parse(): word=[:], HERE=01f4, LAST=3ab4, STATE=0

Defining word [C++]...
Parse(): word=[DUP], HERE=01f9, LAST=3aa6, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=01fa, LAST=3aa6, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[1+], HERE=01fb, LAST=3aa6, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[SWAP], HERE=01fc, LAST=3aa6, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C!], HERE=01fd, LAST=3aa6, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=01fe, LAST=3aa6, STATE=1
Parse(): line=[]
Parse(): line=[: --  DUP @  1- SWAP ! ;  \ ( addr -- )]
Parse(): word=[:], HERE=01ff, LAST=3aa6, STATE=0

Defining word [--]...
Parse(): word=[DUP], HERE=0204, LAST=3a99, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[@], HERE=0205, LAST=3a99, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[1-], HERE=0206, LAST=3a99, STATE=1
 looking for word [1-]
FORTH word [1-]. STATE=1 ... compiling into current word
Parse(): word=[SWAP], HERE=0209, LAST=3a99, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=020a, LAST=3a99, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=020b, LAST=3a99, STATE=1
Parse(): line=[: C-- DUP C@ 1- SWAP C! ; \ ( addr -- )]
Parse(): word=[:], HERE=020c, LAST=3a99, STATE=0

Defining word [C--]...
Parse(): word=[DUP], HERE=0211, LAST=3a8b, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0212, LAST=3a8b, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[1-], HERE=0213, LAST=3a8b, STATE=1
 looking for word [1-]
FORTH word [1-]. STATE=1 ... compiling into current word
Parse(): word=[SWAP], HERE=0216, LAST=3a8b, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C!], HERE=0217, LAST=3a8b, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=0218, LAST=3a8b, STATE=1
Parse(): line=[]
Parse(): line=[: +!  TUCK @  + SWAP !  ;]
Parse(): word=[:], HERE=0219, LAST=3a8b, STATE=0

Defining word [+!]...
Parse(): word=[TUCK], HERE=021e, LAST=3a7e, STATE=1
 looking for word [TUCK]
FORTH word [TUCK]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0220, LAST=3a7e, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[+], HERE=0221, LAST=3a7e, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[SWAP], HERE=0222, LAST=3a7e, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=0223, LAST=3a7e, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=0224, LAST=3a7e, STATE=1
Parse(): line=[: C+! TUCK C@ + SWAP C! ;]
Parse(): word=[:], HERE=0225, LAST=3a7e, STATE=0

Defining word [C+!]...
Parse(): word=[TUCK], HERE=022a, LAST=3a70, STATE=1
 looking for word [TUCK]
FORTH word [TUCK]. STATE=1 ... compiling into current word
Parse(): word=[C@], HERE=022c, LAST=3a70, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[+], HERE=022d, LAST=3a70, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[SWAP], HERE=022e, LAST=3a70, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C!], HERE=022f, LAST=3a70, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=0230, LAST=3a70, STATE=1
Parse(): line=[]
Parse(): line=[: ,  HERE !  CELL DP +! ;]
Parse(): word=[:], HERE=0231, LAST=3a70, STATE=0

Defining word [,]...
Parse(): word=[HERE], HERE=0236, LAST=3a64, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0239, LAST=3a64, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[CELL], HERE=023a, LAST=3a64, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[DP], HERE=023d, LAST=3a64, STATE=1
 looking for word [DP]
FORTH word [DP]. STATE=1 ... compiling into current word
Parse(): word=[+!], HERE=023f, LAST=3a64, STATE=1
 looking for word [+!]
FORTH word [+!]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0244, LAST=3a64, STATE=1
Parse(): line=[: C, HERE C!      DP ++ ;]
Parse(): word=[:], HERE=0244, LAST=3a64, STATE=0

Defining word [C,]...
Parse(): word=[HERE], HERE=0249, LAST=3a57, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[C!], HERE=024c, LAST=3a57, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[DP], HERE=024d, LAST=3a57, STATE=1
 looking for word [DP]
FORTH word [DP]. STATE=1 ... compiling into current word
Parse(): word=[++], HERE=024f, LAST=3a57, STATE=1
 looking for word [++]
FORTH word [++]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0254, LAST=3a57, STATE=1
Parse(): line=[]
Parse(): line=[: ?COMPILING STATE @ ;]
Parse(): word=[:], HERE=0254, LAST=3a57, STATE=0

Defining word [?COMPILING]...
Parse(): word=[STATE], HERE=0259, LAST=3a42, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=025e, LAST=3a42, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[;], HERE=025f, LAST=3a42, STATE=1
Parse(): line=[: [ 0 STATE ! ; IMMEDIATE]
Parse(): word=[:], HERE=0260, LAST=3a42, STATE=0

Defining word [[]...
Parse(): word=[0], HERE=0265, LAST=3a36, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[STATE], HERE=0267, LAST=3a36, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=026c, LAST=3a36, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=026d, LAST=3a36, STATE=1
Parse(): word=[IMMEDIATE], HERE=026e, LAST=3a36, STATE=0
Parse(): line=[: ] 1 STATE ! ; IMMEDIATE]
Parse(): word=[:], HERE=026e, LAST=3a36, STATE=0

Defining word []]...
Parse(): word=[1], HERE=0273, LAST=3a2a, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[STATE], HERE=0275, LAST=3a2a, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=027a, LAST=3a2a, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=027b, LAST=3a2a, STATE=1
Parse(): word=[IMMEDIATE], HERE=027c, LAST=3a2a, STATE=0
Parse(): line=[]
Parse(): line=[: LEAVE ?COMPILING IF <asm> CPUSH RET </asm> C, THEN ; IMMEDIATE]
Parse(): word=[:], HERE=027c, LAST=3a2a, STATE=0

Defining word [LEAVE]...
Parse(): word=[?COMPILING], HERE=0281, LAST=3a1a, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=0286, LAST=3a1a, STATE=1
Parse(): word=[<asm>], HERE=028b, LAST=3a1a, STATE=1
Parse(): word=[CPUSH], HERE=028b, LAST=3a1a, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[RET], HERE=028c, LAST=3a1a, STATE=2
[RET] Is an ASM keyword: opcode=12
Parse(): word=[</asm>], HERE=028d, LAST=3a1a, STATE=2
Parse(): word=[C,], HERE=028d, LAST=3a1a, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=0292, LAST=3a1a, STATE=1
Parse(): word=[;], HERE=0292, LAST=3a1a, STATE=1
Parse(): word=[IMMEDIATE], HERE=0293, LAST=3a1a, STATE=0
Parse(): line=[]
Parse(): line=[: IF   ?COMPILING IF <asm> CPUSH JMPZ </asm> C, HERE 0 , THEN ; IMMEDIATE]
Parse(): word=[:], HERE=0293, LAST=3a1a, STATE=0

Defining word [IF]...
Parse(): word=[?COMPILING], HERE=0298, LAST=3a0d, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=029d, LAST=3a0d, STATE=1
Parse(): word=[<asm>], HERE=02a2, LAST=3a0d, STATE=1
Parse(): word=[CPUSH], HERE=02a2, LAST=3a0d, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[JMPZ], HERE=02a3, LAST=3a0d, STATE=2
[JMPZ] Is an ASM keyword: opcode=9
Parse(): word=[</asm>], HERE=02a4, LAST=3a0d, STATE=2
Parse(): word=[C,], HERE=02a4, LAST=3a0d, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[HERE], HERE=02a9, LAST=3a0d, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[0], HERE=02ac, LAST=3a0d, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[,], HERE=02ae, LAST=3a0d, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=02b3, LAST=3a0d, STATE=1
Parse(): word=[;], HERE=02b3, LAST=3a0d, STATE=1
Parse(): word=[IMMEDIATE], HERE=02b4, LAST=3a0d, STATE=0
Parse(): line=[: ELSE ?COMPILING IF <asm> CPUSH JMP  </asm> C, HERE SWAP 0 , HERE SWAP ! THEN ; IMMEDIATE]
Parse(): word=[:], HERE=02b4, LAST=3a0d, STATE=0

Defining word [ELSE]...
Parse(): word=[?COMPILING], HERE=02b9, LAST=39fe, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=02be, LAST=39fe, STATE=1
Parse(): word=[<asm>], HERE=02c3, LAST=39fe, STATE=1
Parse(): word=[CPUSH], HERE=02c3, LAST=39fe, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[JMP], HERE=02c4, LAST=39fe, STATE=2
[JMP] Is an ASM keyword: opcode=8
Parse(): word=[</asm>], HERE=02c5, LAST=39fe, STATE=2
Parse(): word=[C,], HERE=02c5, LAST=39fe, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[HERE], HERE=02ca, LAST=39fe, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[SWAP], HERE=02cd, LAST=39fe, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[0], HERE=02ce, LAST=39fe, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[,], HERE=02d0, LAST=39fe, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[HERE], HERE=02d5, LAST=39fe, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[SWAP], HERE=02d8, LAST=39fe, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=02d9, LAST=39fe, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[THEN], HERE=02da, LAST=39fe, STATE=1
Parse(): word=[;], HERE=02da, LAST=39fe, STATE=1
Parse(): word=[IMMEDIATE], HERE=02db, LAST=39fe, STATE=0
Parse(): line=[: THEN ?COMPILING IF HERE SWAP ! THEN ; IMMEDIATE]
Parse(): word=[:], HERE=02db, LAST=39fe, STATE=0

Defining word [THEN]...
Parse(): word=[?COMPILING], HERE=02e0, LAST=39ef, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=02e5, LAST=39ef, STATE=1
Parse(): word=[HERE], HERE=02ea, LAST=39ef, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[SWAP], HERE=02ed, LAST=39ef, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=02ee, LAST=39ef, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[THEN], HERE=02ef, LAST=39ef, STATE=1
Parse(): word=[;], HERE=02ef, LAST=39ef, STATE=1
Parse(): word=[IMMEDIATE], HERE=02f0, LAST=39ef, STATE=0
Parse(): line=[]
Parse(): line=[: BEGIN ?COMPILING IF HERE THEN ; IMMEDIATE]
Parse(): word=[:], HERE=02f0, LAST=39ef, STATE=0

Defining word [BEGIN]...
Parse(): word=[?COMPILING], HERE=02f5, LAST=39df, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=02fa, LAST=39df, STATE=1
Parse(): word=[HERE], HERE=02ff, LAST=39df, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=0302, LAST=39df, STATE=1
Parse(): word=[;], HERE=0302, LAST=39df, STATE=1
Parse(): word=[IMMEDIATE], HERE=0303, LAST=39df, STATE=0
Parse(): line=[: AGAIN ?COMPILING IF <asm> CPUSH JMP   </asm> C, , THEN ; IMMEDIATE]
Parse(): word=[:], HERE=0303, LAST=39df, STATE=0

Defining word [AGAIN]...
Parse(): word=[?COMPILING], HERE=0308, LAST=39cf, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=030d, LAST=39cf, STATE=1
Parse(): word=[<asm>], HERE=0312, LAST=39cf, STATE=1
Parse(): word=[CPUSH], HERE=0312, LAST=39cf, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[JMP], HERE=0313, LAST=39cf, STATE=2
[JMP] Is an ASM keyword: opcode=8
Parse(): word=[</asm>], HERE=0314, LAST=39cf, STATE=2
Parse(): word=[C,], HERE=0314, LAST=39cf, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0319, LAST=39cf, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=031e, LAST=39cf, STATE=1
Parse(): word=[;], HERE=031e, LAST=39cf, STATE=1
Parse(): word=[IMMEDIATE], HERE=031f, LAST=39cf, STATE=0
Parse(): line=[: WHILE ?COMPILING IF <asm> CPUSH JMPNZ </asm> C, , THEN ; IMMEDIATE]
Parse(): word=[:], HERE=031f, LAST=39cf, STATE=0

Defining word [WHILE]...
Parse(): word=[?COMPILING], HERE=0324, LAST=39bf, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=0329, LAST=39bf, STATE=1
Parse(): word=[<asm>], HERE=032e, LAST=39bf, STATE=1
Parse(): word=[CPUSH], HERE=032e, LAST=39bf, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[JMPNZ], HERE=032f, LAST=39bf, STATE=2
[JMPNZ] Is an ASM keyword: opcode=10
Parse(): word=[</asm>], HERE=0330, LAST=39bf, STATE=2
Parse(): word=[C,], HERE=0330, LAST=39bf, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0335, LAST=39bf, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=033a, LAST=39bf, STATE=1
Parse(): word=[;], HERE=033a, LAST=39bf, STATE=1
Parse(): word=[IMMEDIATE], HERE=033b, LAST=39bf, STATE=0
Parse(): line=[: UNTIL ?COMPILING IF <asm> CPUSH JMPZ  </asm> C, , THEN ; IMMEDIATE]
Parse(): word=[:], HERE=033b, LAST=39bf, STATE=0

Defining word [UNTIL]...
Parse(): word=[?COMPILING], HERE=0340, LAST=39af, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=0345, LAST=39af, STATE=1
Parse(): word=[<asm>], HERE=034a, LAST=39af, STATE=1
Parse(): word=[CPUSH], HERE=034a, LAST=39af, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[JMPZ], HERE=034b, LAST=39af, STATE=2
[JMPZ] Is an ASM keyword: opcode=9
Parse(): word=[</asm>], HERE=034c, LAST=39af, STATE=2
Parse(): word=[C,], HERE=034c, LAST=39af, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0351, LAST=39af, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=0356, LAST=39af, STATE=1
Parse(): word=[;], HERE=0356, LAST=39af, STATE=1
Parse(): word=[IMMEDIATE], HERE=0357, LAST=39af, STATE=0
Parse(): line=[]
Parse(): line=[: 0= 0 =  ; INLINE]
Parse(): word=[:], HERE=0357, LAST=39af, STATE=0

Defining word [0=]...
Parse(): word=[0], HERE=035c, LAST=39a2, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[=], HERE=035e, LAST=39a2, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): word=[;], HERE=035f, LAST=39a2, STATE=1
Parse(): word=[INLINE], HERE=0360, LAST=39a2, STATE=0
Parse(): line=[: <> = 0= ; INLINE]
Parse(): word=[:], HERE=0360, LAST=39a2, STATE=0

Defining word [<>]...
Parse(): word=[=], HERE=0365, LAST=3995, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): word=[0=], HERE=0366, LAST=3995, STATE=1
 looking for word [0=]
FORTH word [0=]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0369, LAST=3995, STATE=1
Parse(): word=[INLINE], HERE=036a, LAST=3995, STATE=0
Parse(): line=[: <= > 0= ; INLINE]
Parse(): word=[:], HERE=036a, LAST=3995, STATE=0

Defining word [<=]...
Parse(): word=[>], HERE=036f, LAST=3988, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[0=], HERE=0370, LAST=3988, STATE=1
 looking for word [0=]
FORTH word [0=]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0373, LAST=3988, STATE=1
Parse(): word=[INLINE], HERE=0374, LAST=3988, STATE=0
Parse(): line=[: >= < 0= ; INLINE]
Parse(): word=[:], HERE=0374, LAST=3988, STATE=0

Defining word [>=]...
Parse(): word=[<], HERE=0379, LAST=397b, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[0=], HERE=037a, LAST=397b, STATE=1
 looking for word [0=]
FORTH word [0=]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=037d, LAST=397b, STATE=1
Parse(): word=[INLINE], HERE=037e, LAST=397b, STATE=0
Parse(): line=[]
Parse(): line=[: 2DUP  OVER OVER ; INLINE]
Parse(): word=[:], HERE=037e, LAST=397b, STATE=0

Defining word [2DUP]...
Parse(): word=[OVER], HERE=0383, LAST=396c, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[OVER], HERE=0384, LAST=396c, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[;], HERE=0385, LAST=396c, STATE=1
Parse(): word=[INLINE], HERE=0386, LAST=396c, STATE=0
Parse(): line=[: 2DROP DROP DROP ; INLINE]
Parse(): word=[:], HERE=0386, LAST=396c, STATE=0

Defining word [2DROP]...
Parse(): word=[DROP], HERE=038b, LAST=395c, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[DROP], HERE=038c, LAST=395c, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[;], HERE=038d, LAST=395c, STATE=1
Parse(): word=[INLINE], HERE=038e, LAST=395c, STATE=0
Parse(): line=[]
Parse(): line=[: CRLF 13 EMIT 10 EMIT ;]
Parse(): word=[:], HERE=038e, LAST=395c, STATE=0

Defining word [CRLF]...
Parse(): word=[13], HERE=0393, LAST=394d, STATE=1
 looking for word [13]
IsNumber: 13 (000d), STATE=1
Parse(): word=[EMIT], HERE=0395, LAST=394d, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[10], HERE=0396, LAST=394d, STATE=1
 looking for word [10]
IsNumber: 10 (000a), STATE=1
Parse(): word=[EMIT], HERE=0398, LAST=394d, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[;], HERE=0399, LAST=394d, STATE=1
Parse(): line=[: BL 32 EMIT ; INLINE]
Parse(): word=[:], HERE=039a, LAST=394d, STATE=0

Defining word [BL]...
Parse(): word=[32], HERE=039f, LAST=3940, STATE=1
 looking for word [32]
IsNumber: 32 (0020), STATE=1
Parse(): word=[EMIT], HERE=03a1, LAST=3940, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[;], HERE=03a2, LAST=3940, STATE=1
Parse(): word=[INLINE], HERE=03a3, LAST=3940, STATE=0
Parse(): line=[]
Parse(): line=[: ON 1 SWAP ! ; : OFF 0 SWAP ! ;]
Parse(): word=[:], HERE=03a3, LAST=3940, STATE=0

Defining word [ON]...
Parse(): word=[1], HERE=03a8, LAST=3933, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[SWAP], HERE=03aa, LAST=3933, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=03ab, LAST=3933, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=03ac, LAST=3933, STATE=1
Parse(): word=[:], HERE=03ad, LAST=3933, STATE=0

Defining word [OFF]...
Parse(): word=[0], HERE=03b2, LAST=3925, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[SWAP], HERE=03b4, LAST=3925, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[!], HERE=03b5, LAST=3925, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=03b6, LAST=3925, STATE=1
Parse(): line=[]
Parse(): line=[: BETWEEN \ ( num min max -- bool )]
Parse(): word=[:], HERE=03b7, LAST=3925, STATE=0

Defining word [BETWEEN]...
Parse(): line=[	2 PICK ]
Parse(): word=[2], HERE=03bc, LAST=3913, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[PICK], HERE=03be, LAST=3913, STATE=1
[PICK] Is an ASM keyword: opcode=37
Parse(): line=[	< IF 2DROP 0 LEAVE THEN]
Parse(): word=[<], HERE=03bf, LAST=3913, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=03c0, LAST=3913, STATE=1
Parse(): word=[2DROP], HERE=03c5, LAST=3913, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): word=[0], HERE=03c7, LAST=3913, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[LEAVE], HERE=03c9, LAST=3913, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=03ca, LAST=3913, STATE=1
Parse(): line=[	< 0=]
Parse(): word=[<], HERE=03ca, LAST=3913, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[0=], HERE=03cb, LAST=3913, STATE=1
 looking for word [0=]
FORTH word [0=]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=03ce, LAST=3913, STATE=1
Parse(): line=[]
Parse(): line=[: COUNT DUP 1+ SWAP C@ ; \ ( addr1 --  addr2 num )]
Parse(): word=[:], HERE=03cf, LAST=3913, STATE=0

Defining word [COUNT]...
Parse(): word=[DUP], HERE=03d4, LAST=3903, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[1+], HERE=03d5, LAST=3903, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[SWAP], HERE=03d6, LAST=3903, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C@], HERE=03d7, LAST=3903, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[;], HERE=03d8, LAST=3903, STATE=1
Parse(): line=[: TYPE DROP ZTYPE ; \ ( addr num -- )]
Parse(): word=[:], HERE=03d9, LAST=3903, STATE=0

Defining word [TYPE]...
Parse(): word=[DROP], HERE=03de, LAST=38f4, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[ZTYPE], HERE=03df, LAST=38f4, STATE=1
[ZTYPE] Is an ASM keyword: opcode=13
Parse(): word=[;], HERE=03e0, LAST=38f4, STATE=1
Parse(): line=[: CT COUNT TYPE ;]
Parse(): word=[:], HERE=03e1, LAST=38f4, STATE=0

Defining word [CT]...
Parse(): word=[COUNT], HERE=03e6, LAST=38e7, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=03eb, LAST=38e7, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=03f0, LAST=38e7, STATE=1
Parse(): line=[]
Parse(): line=[: PAD LAST 200 - ;]
Parse(): word=[:], HERE=03f0, LAST=38e7, STATE=0

Defining word [PAD]...
Parse(): word=[LAST], HERE=03f5, LAST=38d9, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[200], HERE=03f8, LAST=38d9, STATE=1
 looking for word [200]
IsNumber: 200 (00c8), STATE=1
Parse(): word=[-], HERE=03fa, LAST=38d9, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=03fb, LAST=38d9, STATE=1
Parse(): line=[: getInput PAD 128 0 FREADLINE DROP PAD ; \ ( -- addr )]
Parse(): word=[:], HERE=03fc, LAST=38d9, STATE=0

Defining word [getInput]...
Parse(): word=[PAD], HERE=0401, LAST=38c6, STATE=1
 looking for word [PAD]
FORTH word [PAD]. STATE=1 ... compiling into current word
Parse(): word=[128], HERE=0406, LAST=38c6, STATE=1
 looking for word [128]
IsNumber: 128 (0080), STATE=1
Parse(): word=[0], HERE=0408, LAST=38c6, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[FREADLINE], HERE=040a, LAST=38c6, STATE=1
[FREADLINE] Is an ASM keyword: opcode=30
Parse(): word=[DROP], HERE=040b, LAST=38c6, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[PAD], HERE=040c, LAST=38c6, STATE=1
 looking for word [PAD]
FORTH word [PAD]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0411, LAST=38c6, STATE=1
Parse(): line=[]
Parse(): line=[: ?DUP DUP IF DUP THEN ;]
Parse(): word=[:], HERE=0411, LAST=38c6, STATE=0

Defining word [?DUP]...
Parse(): word=[DUP], HERE=0416, LAST=38b7, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[IF], HERE=0417, LAST=38b7, STATE=1
Parse(): word=[DUP], HERE=041c, LAST=38b7, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[THEN], HERE=041d, LAST=38b7, STATE=1
Parse(): word=[;], HERE=041d, LAST=38b7, STATE=1
Parse(): line=[]
Parse(): line=[: HEX     16 BASE ! ;]
Parse(): word=[:], HERE=041e, LAST=38b7, STATE=0

Defining word [HEX]...
Parse(): word=[16], HERE=0423, LAST=38a9, STATE=1
 looking for word [16]
IsNumber: 16 (0010), STATE=1
Parse(): word=[BASE], HERE=0425, LAST=38a9, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0427, LAST=38a9, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=0428, LAST=38a9, STATE=1
Parse(): line=[: DECIMAL 10 BASE ! ;]
Parse(): word=[:], HERE=0429, LAST=38a9, STATE=0

Defining word [DECIMAL]...
Parse(): word=[10], HERE=042e, LAST=3897, STATE=1
 looking for word [10]
IsNumber: 10 (000a), STATE=1
Parse(): word=[BASE], HERE=0430, LAST=3897, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0432, LAST=3897, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=0433, LAST=3897, STATE=1
Parse(): line=[: OCTAL    8 BASE ! ;]
Parse(): word=[:], HERE=0434, LAST=3897, STATE=0

Defining word [OCTAL]...
Parse(): word=[8], HERE=0439, LAST=3887, STATE=1
 looking for word [8]
IsNumber: 8 (0008), STATE=1
Parse(): word=[BASE], HERE=043b, LAST=3887, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=043d, LAST=3887, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=043e, LAST=3887, STATE=1
Parse(): line=[: BINARY   2 BASE ! ;]
Parse(): word=[:], HERE=043f, LAST=3887, STATE=0

Defining word [BINARY]...
Parse(): word=[2], HERE=0444, LAST=3876, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[BASE], HERE=0446, LAST=3876, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0448, LAST=3876, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=0449, LAST=3876, STATE=1
Parse(): line=[]
Parse(): line=[: skipWS \ ( addr1 -- addr2 )]
Parse(): word=[:], HERE=044a, LAST=3876, STATE=0

Defining word [skipWS]...
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=044f, LAST=3865, STATE=1
Parse(): line=[		DUP C@ DUP]
Parse(): word=[DUP], HERE=044f, LAST=3865, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0450, LAST=3865, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[DUP], HERE=0451, LAST=3865, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0452, LAST=3865, STATE=1
Parse(): line=[			32 > ]
Parse(): word=[32], HERE=0457, LAST=3865, STATE=1
 looking for word [32]
IsNumber: 32 (0020), STATE=1
Parse(): word=[>], HERE=0459, LAST=3865, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): line=[			IF LEAVE ELSE 1+ THEN]
Parse(): word=[IF], HERE=045a, LAST=3865, STATE=1
Parse(): word=[LEAVE], HERE=045f, LAST=3865, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[ELSE], HERE=0460, LAST=3865, STATE=1
Parse(): word=[1+], HERE=0465, LAST=3865, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[THEN], HERE=0466, LAST=3865, STATE=1
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0466, LAST=3865, STATE=1
Parse(): line=[			DROP LEAVE]
Parse(): word=[DROP], HERE=046b, LAST=3865, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[LEAVE], HERE=046c, LAST=3865, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=046d, LAST=3865, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=046d, LAST=3865, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0472, LAST=3865, STATE=1
Parse(): line=[]
Parse(): line=[\ NB: this word assumes that leading WS has already been skipped.]
Parse(): line=[: getOneWord \ ( addr1 -- word-addr addr2 )]
Parse(): word=[:], HERE=0473, LAST=3865, STATE=0

Defining word [getOneWord]...
Parse(): line=[	DUP >R >R]
Parse(): word=[DUP], HERE=0478, LAST=3850, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[>R], HERE=0479, LAST=3850, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[>R], HERE=047a, LAST=3850, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=047b, LAST=3850, STATE=1
Parse(): line=[		R@ C@ 32 > IF]
Parse(): word=[R@], HERE=047b, LAST=3850, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[C@], HERE=047c, LAST=3850, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[32], HERE=047d, LAST=3850, STATE=1
 looking for word [32]
IsNumber: 32 (0020), STATE=1
Parse(): word=[>], HERE=047f, LAST=3850, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[IF], HERE=0480, LAST=3850, STATE=1
Parse(): line=[			R> 1+ >R]
Parse(): word=[R>], HERE=0485, LAST=3850, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[1+], HERE=0486, LAST=3850, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[>R], HERE=0487, LAST=3850, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0488, LAST=3850, STATE=1
Parse(): line=[			\ If not at the end of the line, stick a ]
Parse(): line=[			\ ZERO here and go to the next char.]
Parse(): line=[			R@ C@ ]
Parse(): word=[R@], HERE=048d, LAST=3850, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[C@], HERE=048e, LAST=3850, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[			IF]
Parse(): word=[IF], HERE=048f, LAST=3850, STATE=1
Parse(): line=[				0 R@ C! R> 1+ >R]
Parse(): word=[0], HERE=0494, LAST=3850, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[R@], HERE=0496, LAST=3850, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[C!], HERE=0497, LAST=3850, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[R>], HERE=0498, LAST=3850, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[1+], HERE=0499, LAST=3850, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[>R], HERE=049a, LAST=3850, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[			THEN]
Parse(): word=[THEN], HERE=049b, LAST=3850, STATE=1
Parse(): line=[			R> R> SWAP LEAVE]
Parse(): word=[R>], HERE=049b, LAST=3850, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[R>], HERE=049c, LAST=3850, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[SWAP], HERE=049d, LAST=3850, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[LEAVE], HERE=049e, LAST=3850, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=049f, LAST=3850, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=049f, LAST=3850, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=04a4, LAST=3850, STATE=1
Parse(): line=[]
Parse(): line=[: DICT>NEXT ;]
Parse(): word=[:], HERE=04a5, LAST=3850, STATE=0

Defining word [DICT>NEXT]...
Parse(): word=[;], HERE=04aa, LAST=383c, STATE=1
Parse(): line=[: DICT>XT     CELL + ;]
Parse(): word=[:], HERE=04ab, LAST=383c, STATE=0

Defining word [DICT>XT]...
Parse(): word=[CELL], HERE=04b0, LAST=382a, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=04b3, LAST=382a, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[;], HERE=04b4, LAST=382a, STATE=1
Parse(): line=[: DICT>FLAGS  2 CELLS + ;]
Parse(): word=[:], HERE=04b5, LAST=382a, STATE=0

Defining word [DICT>FLAGS]...
Parse(): word=[2], HERE=04ba, LAST=3815, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[CELLS], HERE=04bc, LAST=3815, STATE=1
 looking for word [CELLS]
FORTH word [CELLS]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=04c1, LAST=3815, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[;], HERE=04c2, LAST=3815, STATE=1
Parse(): line=[: DICT>NAME   DICT>FLAGS 1+ ;]
Parse(): word=[:], HERE=04c3, LAST=3815, STATE=0

Defining word [DICT>NAME]...
Parse(): word=[DICT>FLAGS], HERE=04c8, LAST=3801, STATE=1
 looking for word [DICT>FLAGS]
FORTH word [DICT>FLAGS]. STATE=1 ... compiling into current word
Parse(): word=[1+], HERE=04cd, LAST=3801, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[;], HERE=04ce, LAST=3801, STATE=1
Parse(): line=[]
Parse(): line=[: NEXT>DICT ;]
Parse(): word=[:], HERE=04cf, LAST=3801, STATE=0

Defining word [NEXT>DICT]...
Parse(): word=[;], HERE=04d4, LAST=37ed, STATE=1
Parse(): line=[: XT>DICT     CELL - ;]
Parse(): word=[:], HERE=04d5, LAST=37ed, STATE=0

Defining word [XT>DICT]...
Parse(): word=[CELL], HERE=04da, LAST=37db, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[-], HERE=04dd, LAST=37db, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=04de, LAST=37db, STATE=1
Parse(): line=[: FLAGS>DICT  2 CELLS - ;]
Parse(): word=[:], HERE=04df, LAST=37db, STATE=0

Defining word [FLAGS>DICT]...
Parse(): word=[2], HERE=04e4, LAST=37c6, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[CELLS], HERE=04e6, LAST=37c6, STATE=1
 looking for word [CELLS]
FORTH word [CELLS]. STATE=1 ... compiling into current word
Parse(): word=[-], HERE=04eb, LAST=37c6, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=04ec, LAST=37c6, STATE=1
Parse(): line=[: NAME>DICT   1- 2 CELLS - ;]
Parse(): word=[:], HERE=04ed, LAST=37c6, STATE=0

Defining word [NAME>DICT]...
Parse(): word=[1-], HERE=04f2, LAST=37b2, STATE=1
 looking for word [1-]
FORTH word [1-]. STATE=1 ... compiling into current word
Parse(): word=[2], HERE=04f5, LAST=37b2, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[CELLS], HERE=04f7, LAST=37b2, STATE=1
 looking for word [CELLS]
FORTH word [CELLS]. STATE=1 ... compiling into current word
Parse(): word=[-], HERE=04fc, LAST=37b2, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=04fd, LAST=37b2, STATE=1
Parse(): line=[]
Parse(): line=[: DICT.GetXT DICT>XT @ ;]
Parse(): word=[:], HERE=04fe, LAST=37b2, STATE=0

Defining word [DICT.GetXT]...
Parse(): word=[DICT>XT], HERE=0503, LAST=379d, STATE=1
 looking for word [DICT>XT]
FORTH word [DICT>XT]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0508, LAST=379d, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[;], HERE=0509, LAST=379d, STATE=1
Parse(): line=[: DICT.GetFLAGS DICT>FLAGS C@ ;]
Parse(): word=[:], HERE=050a, LAST=379d, STATE=0

Defining word [DICT.GetFLAGS]...
Parse(): word=[DICT>FLAGS], HERE=050f, LAST=3785, STATE=1
 looking for word [DICT>FLAGS]
FORTH word [DICT>FLAGS]. STATE=1 ... compiling into current word
Parse(): word=[C@], HERE=0514, LAST=3785, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[;], HERE=0515, LAST=3785, STATE=1
Parse(): line=[]
Parse(): line=[: DICTP>NAME 1+ @ DICT>NAME ;]
Parse(): word=[:], HERE=0516, LAST=3785, STATE=0

Defining word [DICTP>NAME]...
Parse(): word=[1+], HERE=051b, LAST=3770, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[@], HERE=051c, LAST=3770, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[DICT>NAME], HERE=051d, LAST=3770, STATE=1
 looking for word [DICT>NAME]
FORTH word [DICT>NAME]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0522, LAST=3770, STATE=1
Parse(): line=[]
Parse(): line=[: XT.GetDICTP \ ( XT -- dictp )]
Parse(): word=[:], HERE=0522, LAST=3770, STATE=0

Defining word [XT.GetDICTP]...
Parse(): line=[	DUP C@ <asm> CPUSH DICTP </asm> = ]
Parse(): word=[DUP], HERE=0527, LAST=375a, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0528, LAST=375a, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[<asm>], HERE=0529, LAST=375a, STATE=1
Parse(): word=[CPUSH], HERE=0529, LAST=375a, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[DICTP], HERE=052a, LAST=375a, STATE=2
[DICTP] Is an ASM keyword: opcode=24
Parse(): word=[</asm>], HERE=052b, LAST=375a, STATE=2
Parse(): word=[=], HERE=052b, LAST=375a, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[	IF]
Parse(): word=[IF], HERE=052c, LAST=375a, STATE=1
Parse(): line=[		1+ @]
Parse(): word=[1+], HERE=0531, LAST=375a, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[@], HERE=0532, LAST=375a, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): line=[	ELSE]
Parse(): word=[ELSE], HERE=0533, LAST=375a, STATE=1
Parse(): line=[		DROP RESET]
Parse(): word=[DROP], HERE=0538, LAST=375a, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[RESET], HERE=0539, LAST=375a, STATE=1
[RESET] Is an ASM keyword: opcode=254
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=053a, LAST=375a, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=053a, LAST=375a, STATE=1
Parse(): line=[]
Parse(): line=[: FLAG_IMMEDIATE 1 ;]
Parse(): word=[:], HERE=053b, LAST=375a, STATE=0

Defining word [FLAG_IMMEDIATE]...
Parse(): word=[1], HERE=0540, LAST=3741, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[;], HERE=0542, LAST=3741, STATE=1
Parse(): line=[: FLAG_INLINE    2 ;]
Parse(): word=[:], HERE=0543, LAST=3741, STATE=0

Defining word [FLAG_INLINE]...
Parse(): word=[2], HERE=0548, LAST=372b, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[;], HERE=054a, LAST=372b, STATE=1
Parse(): line=[]
Parse(): line=[: FLAGS.ISIMMEDIATE? FLAG_IMMEDIATE AND ;]
Parse(): word=[:], HERE=054b, LAST=372b, STATE=0

Defining word [FLAGS.ISIMMEDIATE?]...
Parse(): word=[FLAG_IMMEDIATE], HERE=0550, LAST=370e, STATE=1
 looking for word [FLAG_IMMEDIATE]
FORTH word [FLAG_IMMEDIATE]. STATE=1 ... compiling into current word
Parse(): word=[AND], HERE=0555, LAST=370e, STATE=1
[AND] Is an ASM keyword: opcode=42
Parse(): word=[;], HERE=0556, LAST=370e, STATE=1
Parse(): line=[: FLAGS.ISINLINE?    FLAG_INLINE    AND ;]
Parse(): word=[:], HERE=0557, LAST=370e, STATE=0

Defining word [FLAGS.ISINLINE?]...
Parse(): word=[FLAG_INLINE], HERE=055c, LAST=36f4, STATE=1
 looking for word [FLAG_INLINE]
FORTH word [FLAG_INLINE]. STATE=1 ... compiling into current word
Parse(): word=[AND], HERE=0561, LAST=36f4, STATE=1
[AND] Is an ASM keyword: opcode=42
Parse(): word=[;], HERE=0562, LAST=36f4, STATE=1
Parse(): line=[]
Parse(): line=[: DICT.GetIMMEDIATE DICT.GetFLAGS FLAGS.ISIMMEDIATE? ;]
Parse(): word=[:], HERE=0563, LAST=36f4, STATE=0

Defining word [DICT.GetIMMEDIATE]...
Parse(): word=[DICT.GetFLAGS], HERE=0568, LAST=36d8, STATE=1
 looking for word [DICT.GetFLAGS]
FORTH word [DICT.GetFLAGS]. STATE=1 ... compiling into current word
Parse(): word=[FLAGS.ISIMMEDIATE?], HERE=056d, LAST=36d8, STATE=1
 looking for word [FLAGS.ISIMMEDIATE?]
FORTH word [FLAGS.ISIMMEDIATE?]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0572, LAST=36d8, STATE=1
Parse(): line=[: DICT.GetINLINE    DICT.GetFLAGS FLAGS.ISINLINE? ;]
Parse(): word=[:], HERE=0572, LAST=36d8, STATE=0

Defining word [DICT.GetINLINE]...
Parse(): word=[DICT.GetFLAGS], HERE=0577, LAST=36bf, STATE=1
 looking for word [DICT.GetFLAGS]
FORTH word [DICT.GetFLAGS]. STATE=1 ... compiling into current word
Parse(): word=[FLAGS.ISINLINE?], HERE=057c, LAST=36bf, STATE=1
 looking for word [FLAGS.ISINLINE?]
FORTH word [FLAGS.ISINLINE?]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0581, LAST=36bf, STATE=1
Parse(): line=[]
Parse(): line=[: findInDict \ ( addr -- XT IMM bool )]
Parse(): word=[:], HERE=0581, LAST=36bf, STATE=0

Defining word [findInDict]...
Parse(): line=[	LAST >R]
Parse(): word=[LAST], HERE=0586, LAST=36aa, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[>R], HERE=0589, LAST=36aa, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=058a, LAST=36aa, STATE=1
Parse(): line=[		R@ DUP]
Parse(): word=[R@], HERE=058a, LAST=36aa, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[DUP], HERE=058b, LAST=36aa, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): line=[		IF]
Parse(): word=[IF], HERE=058c, LAST=36aa, STATE=1
Parse(): line=[			\ addr is a null-termnated string with no count byte]
Parse(): line=[			DICT>NAME 1+ OVER COMPAREI]
Parse(): word=[DICT>NAME], HERE=0591, LAST=36aa, STATE=1
 looking for word [DICT>NAME]
FORTH word [DICT>NAME]. STATE=1 ... compiling into current word
Parse(): word=[1+], HERE=0596, LAST=36aa, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[OVER], HERE=0597, LAST=36aa, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[COMPAREI], HERE=0598, LAST=36aa, STATE=1
[COMPAREI] Is an ASM keyword: opcode=47
Parse(): line=[			IF]
Parse(): word=[IF], HERE=0599, LAST=36aa, STATE=1
Parse(): line=[				DROP R@ DICT.GetXT R> DICT.GetFLAGS 1]
Parse(): word=[DROP], HERE=059e, LAST=36aa, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[R@], HERE=059f, LAST=36aa, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[DICT.GetXT], HERE=05a0, LAST=36aa, STATE=1
 looking for word [DICT.GetXT]
FORTH word [DICT.GetXT]. STATE=1 ... compiling into current word
Parse(): word=[R>], HERE=05a5, LAST=36aa, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[DICT.GetFLAGS], HERE=05a6, LAST=36aa, STATE=1
 looking for word [DICT.GetFLAGS]
FORTH word [DICT.GetFLAGS]. STATE=1 ... compiling into current word
Parse(): word=[1], HERE=05ab, LAST=36aa, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): line=[				LEAVE]
Parse(): word=[LEAVE], HERE=05ad, LAST=36aa, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[			THEN]
Parse(): word=[THEN], HERE=05ae, LAST=36aa, STATE=1
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=05ae, LAST=36aa, STATE=1
Parse(): line=[			2DROP R> 0 0 LEAVE]
Parse(): word=[2DROP], HERE=05b3, LAST=36aa, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): word=[R>], HERE=05b5, LAST=36aa, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[0], HERE=05b6, LAST=36aa, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[0], HERE=05b8, LAST=36aa, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[LEAVE], HERE=05ba, LAST=36aa, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=05bb, LAST=36aa, STATE=1
Parse(): line=[		R> @ >R]
Parse(): word=[R>], HERE=05bb, LAST=36aa, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[@], HERE=05bc, LAST=36aa, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[>R], HERE=05bd, LAST=36aa, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=05be, LAST=36aa, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=05c3, LAST=36aa, STATE=1
Parse(): line=[]
Parse(): line=[: isHEX? BASE @ 16 = ;]
Parse(): word=[:], HERE=05c4, LAST=36aa, STATE=0

Defining word [isHEX?]...
Parse(): word=[BASE], HERE=05c9, LAST=3699, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=05cb, LAST=3699, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[16], HERE=05cc, LAST=3699, STATE=1
 looking for word [16]
IsNumber: 16 (0010), STATE=1
Parse(): word=[=], HERE=05ce, LAST=3699, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): word=[;], HERE=05cf, LAST=3699, STATE=1
Parse(): line=[]
Parse(): line=[: isNumChar? \ ( ch -- val bool )]
Parse(): word=[:], HERE=05d0, LAST=3699, STATE=0

Defining word [isNumChar?]...
Parse(): line=[	DUP 48 57 BETWEEN IF 48 - 1 LEAVE THEN]
Parse(): word=[DUP], HERE=05d5, LAST=3684, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[48], HERE=05d6, LAST=3684, STATE=1
 looking for word [48]
IsNumber: 48 (0030), STATE=1
Parse(): word=[57], HERE=05d8, LAST=3684, STATE=1
 looking for word [57]
IsNumber: 57 (0039), STATE=1
Parse(): word=[BETWEEN], HERE=05da, LAST=3684, STATE=1
 looking for word [BETWEEN]
FORTH word [BETWEEN]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=05df, LAST=3684, STATE=1
Parse(): word=[48], HERE=05e4, LAST=3684, STATE=1
 looking for word [48]
IsNumber: 48 (0030), STATE=1
Parse(): word=[-], HERE=05e6, LAST=3684, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[1], HERE=05e7, LAST=3684, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[LEAVE], HERE=05e9, LAST=3684, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=05ea, LAST=3684, STATE=1
Parse(): line=[	isHEX? ]
Parse(): word=[isHEX?], HERE=05ea, LAST=3684, STATE=1
 looking for word [isHEX?]
FORTH word [isHEX?]. STATE=1 ... compiling into current word
Parse(): line=[	IF]
Parse(): word=[IF], HERE=05ef, LAST=3684, STATE=1
Parse(): line=[		DUP 65  70 BETWEEN IF 55 - 1 LEAVE THEN]
Parse(): word=[DUP], HERE=05f4, LAST=3684, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[65], HERE=05f5, LAST=3684, STATE=1
 looking for word [65]
IsNumber: 65 (0041), STATE=1
Parse(): word=[70], HERE=05f7, LAST=3684, STATE=1
 looking for word [70]
IsNumber: 70 (0046), STATE=1
Parse(): word=[BETWEEN], HERE=05f9, LAST=3684, STATE=1
 looking for word [BETWEEN]
FORTH word [BETWEEN]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=05fe, LAST=3684, STATE=1
Parse(): word=[55], HERE=0603, LAST=3684, STATE=1
 looking for word [55]
IsNumber: 55 (0037), STATE=1
Parse(): word=[-], HERE=0605, LAST=3684, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[1], HERE=0606, LAST=3684, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[LEAVE], HERE=0608, LAST=3684, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=0609, LAST=3684, STATE=1
Parse(): line=[		DUP 97 102 BETWEEN IF 87 - 1 LEAVE THEN]
Parse(): word=[DUP], HERE=0609, LAST=3684, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[97], HERE=060a, LAST=3684, STATE=1
 looking for word [97]
IsNumber: 97 (0061), STATE=1
Parse(): word=[102], HERE=060c, LAST=3684, STATE=1
 looking for word [102]
IsNumber: 102 (0066), STATE=1
Parse(): word=[BETWEEN], HERE=060e, LAST=3684, STATE=1
 looking for word [BETWEEN]
FORTH word [BETWEEN]. STATE=1 ... compiling into current word
Parse(): word=[IF], HERE=0613, LAST=3684, STATE=1
Parse(): word=[87], HERE=0618, LAST=3684, STATE=1
 looking for word [87]
IsNumber: 87 (0057), STATE=1
Parse(): word=[-], HERE=061a, LAST=3684, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[1], HERE=061b, LAST=3684, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[LEAVE], HERE=061d, LAST=3684, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=061e, LAST=3684, STATE=1
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=061e, LAST=3684, STATE=1
Parse(): line=[	0]
Parse(): word=[0], HERE=061e, LAST=3684, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0620, LAST=3684, STATE=1
Parse(): line=[]
Parse(): line=[: NEGATE 0 SWAP - ;]
Parse(): word=[:], HERE=0621, LAST=3684, STATE=0

Defining word [NEGATE]...
Parse(): word=[0], HERE=0626, LAST=3673, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[SWAP], HERE=0628, LAST=3673, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[-], HERE=0629, LAST=3673, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=062a, LAST=3673, STATE=1
Parse(): line=[: ABS DUP 0 < IF NEGATE THEN ;]
Parse(): word=[:], HERE=062b, LAST=3673, STATE=0

Defining word [ABS]...
Parse(): word=[DUP], HERE=0630, LAST=3665, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[0], HERE=0631, LAST=3665, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[<], HERE=0633, LAST=3665, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=0634, LAST=3665, STATE=1
Parse(): word=[NEGATE], HERE=0639, LAST=3665, STATE=1
 looking for word [NEGATE]
FORTH word [NEGATE]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=063e, LAST=3665, STATE=1
Parse(): word=[;], HERE=063e, LAST=3665, STATE=1
Parse(): line=[]
Parse(): line=[: isNumber? \ ( addr -- num bool )]
Parse(): word=[:], HERE=063f, LAST=3665, STATE=0

Defining word [isNumber?]...
Parse(): line=[	\ find out if it is negative]
Parse(): line=[	DUP C@ 45 = DUP isNeg C! IF 1+ THEN]
Parse(): word=[DUP], HERE=0644, LAST=3651, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0645, LAST=3651, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[45], HERE=0646, LAST=3651, STATE=1
 looking for word [45]
IsNumber: 45 (002d), STATE=1
Parse(): word=[=], HERE=0648, LAST=3651, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): word=[DUP], HERE=0649, LAST=3651, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[isNeg], HERE=064a, LAST=3651, STATE=1
 looking for word [isNeg]
FORTH word [isNeg]. STATE=1 ... compiling into current word
Parse(): word=[C!], HERE=064f, LAST=3651, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[IF], HERE=0650, LAST=3651, STATE=1
Parse(): word=[1+], HERE=0655, LAST=3651, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[THEN], HERE=0656, LAST=3651, STATE=1
Parse(): line=[]
Parse(): line=[	\ accumulate the result on the return stack]
Parse(): line=[	0 >R]
Parse(): word=[0], HERE=0656, LAST=3651, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[>R], HERE=0658, LAST=3651, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=0659, LAST=3651, STATE=1
Parse(): line=[		DUP C@]
Parse(): word=[DUP], HERE=0659, LAST=3651, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=065a, LAST=3651, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[		DUP 0 = \ end of word?]
Parse(): word=[DUP], HERE=065b, LAST=3651, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[0], HERE=065c, LAST=3651, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[=], HERE=065e, LAST=3651, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[		IF ]
Parse(): word=[IF], HERE=065f, LAST=3651, STATE=1
Parse(): line=[			2DROP R> ]
Parse(): word=[2DROP], HERE=0664, LAST=3651, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): word=[R>], HERE=0666, LAST=3651, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): line=[			isNeg C@ IF NEGATE THEN]
Parse(): word=[isNeg], HERE=0667, LAST=3651, STATE=1
 looking for word [isNeg]
FORTH word [isNeg]. STATE=1 ... compiling into current word
Parse(): word=[C@], HERE=066c, LAST=3651, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[IF], HERE=066d, LAST=3651, STATE=1
Parse(): word=[NEGATE], HERE=0672, LAST=3651, STATE=1
 looking for word [NEGATE]
FORTH word [NEGATE]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=0677, LAST=3651, STATE=1
Parse(): line=[			1 LEAVE]
Parse(): word=[1], HERE=0677, LAST=3651, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[LEAVE], HERE=0679, LAST=3651, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=067a, LAST=3651, STATE=1
Parse(): line=[]
Parse(): line=[		isNumChar? ]
Parse(): word=[isNumChar?], HERE=067a, LAST=3651, STATE=1
 looking for word [isNumChar?]
FORTH word [isNumChar?]. STATE=1 ... compiling into current word
Parse(): line=[		IF]
Parse(): word=[IF], HERE=067f, LAST=3651, STATE=1
Parse(): line=[			R> BASE @ * + >R]
Parse(): word=[R>], HERE=0684, LAST=3651, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[BASE], HERE=0685, LAST=3651, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0687, LAST=3651, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[*], HERE=0688, LAST=3651, STATE=1
[*] Is a FORTH primitive: opcode=19
Parse(): word=[+], HERE=0689, LAST=3651, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[>R], HERE=068a, LAST=3651, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[			1+]
Parse(): word=[1+], HERE=068b, LAST=3651, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=068c, LAST=3651, STATE=1
Parse(): line=[			DROP R> 0 LEAVE]
Parse(): word=[DROP], HERE=0691, LAST=3651, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[R>], HERE=0692, LAST=3651, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[0], HERE=0693, LAST=3651, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[LEAVE], HERE=0695, LAST=3651, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0696, LAST=3651, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0696, LAST=3651, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=069b, LAST=3651, STATE=1
Parse(): line=[]
Parse(): line=[: MOD 2DUP / * - ;]
Parse(): word=[:], HERE=069c, LAST=3651, STATE=0

Defining word [MOD]...
Parse(): word=[2DUP], HERE=06a1, LAST=3643, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[/], HERE=06a3, LAST=3643, STATE=1
[/] Is a FORTH primitive: opcode=20
Parse(): word=[*], HERE=06a4, LAST=3643, STATE=1
[*] Is a FORTH primitive: opcode=19
Parse(): word=[-], HERE=06a5, LAST=3643, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=06a6, LAST=3643, STATE=1
Parse(): line=[]
Parse(): line=[: /MOD \ ( num1 num2 -- num3 mod )]
Parse(): word=[:], HERE=06a7, LAST=3643, STATE=0

Defining word [/MOD]...
Parse(): line=[	2DUP / >R R@ * - R> SWAP]
Parse(): word=[2DUP], HERE=06ac, LAST=3634, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[/], HERE=06ae, LAST=3634, STATE=1
[/] Is a FORTH primitive: opcode=20
Parse(): word=[>R], HERE=06af, LAST=3634, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[R@], HERE=06b0, LAST=3634, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[*], HERE=06b1, LAST=3634, STATE=1
[*] Is a FORTH primitive: opcode=19
Parse(): word=[-], HERE=06b2, LAST=3634, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[R>], HERE=06b3, LAST=3634, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[SWAP], HERE=06b4, LAST=3634, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): line=[;]
Parse(): word=[;], HERE=06b5, LAST=3634, STATE=1
Parse(): line=[]
Parse(): line=[: (.)  \ ( num -- )]
Parse(): word=[:], HERE=06b6, LAST=3634, STATE=0

Defining word [(.)]...
Parse(): line=[	DUP 0 = ]
Parse(): word=[DUP], HERE=06bb, LAST=3626, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[0], HERE=06bc, LAST=3626, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[=], HERE=06be, LAST=3626, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[	IF]
Parse(): word=[IF], HERE=06bf, LAST=3626, STATE=1
Parse(): line=[		DROP 48 EMIT LEAVE]
Parse(): word=[DROP], HERE=06c4, LAST=3626, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[48], HERE=06c5, LAST=3626, STATE=1
 looking for word [48]
IsNumber: 48 (0030), STATE=1
Parse(): word=[EMIT], HERE=06c7, LAST=3626, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[LEAVE], HERE=06c8, LAST=3626, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=06c9, LAST=3626, STATE=1
Parse(): line=[]
Parse(): line=[	DUP 0 < IF NEGATE 1 ELSE 0 THEN >R]
Parse(): word=[DUP], HERE=06c9, LAST=3626, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[0], HERE=06ca, LAST=3626, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[<], HERE=06cc, LAST=3626, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=06cd, LAST=3626, STATE=1
Parse(): word=[NEGATE], HERE=06d2, LAST=3626, STATE=1
 looking for word [NEGATE]
FORTH word [NEGATE]. STATE=1 ... compiling into current word
Parse(): word=[1], HERE=06d7, LAST=3626, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): word=[ELSE], HERE=06d9, LAST=3626, STATE=1
Parse(): word=[0], HERE=06de, LAST=3626, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[THEN], HERE=06e0, LAST=3626, STATE=1
Parse(): word=[>R], HERE=06e0, LAST=3626, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[]
Parse(): line=[	0 SWAP]
Parse(): word=[0], HERE=06e1, LAST=3626, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[SWAP], HERE=06e3, LAST=3626, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=06e4, LAST=3626, STATE=1
Parse(): line=[		DUP]
Parse(): word=[DUP], HERE=06e4, LAST=3626, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): line=[		IF]
Parse(): word=[IF], HERE=06e5, LAST=3626, STATE=1
Parse(): line=[			BASE @ /MOD ]
Parse(): word=[BASE], HERE=06ea, LAST=3626, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=06ec, LAST=3626, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[/MOD], HERE=06ed, LAST=3626, STATE=1
 looking for word [/MOD]
FORTH word [/MOD]. STATE=1 ... compiling into current word
Parse(): line=[			48 OVER 9 > IF 7 + THEN]
Parse(): word=[48], HERE=06f2, LAST=3626, STATE=1
 looking for word [48]
IsNumber: 48 (0030), STATE=1
Parse(): word=[OVER], HERE=06f4, LAST=3626, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[9], HERE=06f5, LAST=3626, STATE=1
 looking for word [9]
IsNumber: 9 (0009), STATE=1
Parse(): word=[>], HERE=06f7, LAST=3626, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[IF], HERE=06f8, LAST=3626, STATE=1
Parse(): word=[7], HERE=06fd, LAST=3626, STATE=1
 looking for word [7]
IsNumber: 7 (0007), STATE=1
Parse(): word=[+], HERE=06ff, LAST=3626, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[THEN], HERE=0700, LAST=3626, STATE=1
Parse(): line=[			+ SWAP]
Parse(): word=[+], HERE=0700, LAST=3626, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[SWAP], HERE=0701, LAST=3626, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0702, LAST=3626, STATE=1
Parse(): line=[			\ spit out the string]
Parse(): line=[			DROP]
Parse(): word=[DROP], HERE=0707, LAST=3626, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): line=[			R> IF 45 EMIT THEN]
Parse(): word=[R>], HERE=0708, LAST=3626, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[IF], HERE=0709, LAST=3626, STATE=1
Parse(): word=[45], HERE=070e, LAST=3626, STATE=1
 looking for word [45]
IsNumber: 45 (002d), STATE=1
Parse(): word=[EMIT], HERE=0710, LAST=3626, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[THEN], HERE=0711, LAST=3626, STATE=1
Parse(): line=[			BEGIN DUP IF EMIT ELSE DROP LEAVE THEN AGAIN]
Parse(): word=[BEGIN], HERE=0711, LAST=3626, STATE=1
Parse(): word=[DUP], HERE=0711, LAST=3626, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[IF], HERE=0712, LAST=3626, STATE=1
Parse(): word=[EMIT], HERE=0717, LAST=3626, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[ELSE], HERE=0718, LAST=3626, STATE=1
Parse(): word=[DROP], HERE=071d, LAST=3626, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[LEAVE], HERE=071e, LAST=3626, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=071f, LAST=3626, STATE=1
Parse(): word=[AGAIN], HERE=071f, LAST=3626, STATE=1
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0724, LAST=3626, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0724, LAST=3626, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0729, LAST=3626, STATE=1
Parse(): line=[]
Parse(): line=[: . BL (.) ;]
Parse(): word=[:], HERE=072a, LAST=3626, STATE=0

Defining word [.]...
Parse(): word=[BL], HERE=072f, LAST=361a, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[(.)], HERE=0732, LAST=361a, STATE=1
 looking for word [(.)]
FORTH word [(.)]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0737, LAST=361a, STATE=1
Parse(): line=[]
Parse(): line=[: HEX.     BASE @ SWAP HEX     (.) BASE ! ;]
Parse(): word=[:], HERE=0737, LAST=361a, STATE=0

Defining word [HEX.]...
Parse(): word=[BASE], HERE=073c, LAST=360b, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=073e, LAST=360b, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[SWAP], HERE=073f, LAST=360b, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[HEX], HERE=0740, LAST=360b, STATE=1
 looking for word [HEX]
FORTH word [HEX]. STATE=1 ... compiling into current word
Parse(): word=[(.)], HERE=0745, LAST=360b, STATE=1
 looking for word [(.)]
FORTH word [(.)]. STATE=1 ... compiling into current word
Parse(): word=[BASE], HERE=074a, LAST=360b, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=074c, LAST=360b, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=074d, LAST=360b, STATE=1
Parse(): line=[: DECIMAL. BASE @ SWAP DECIMAL (.) BASE ! ;]
Parse(): word=[:], HERE=074e, LAST=360b, STATE=0

Defining word [DECIMAL.]...
Parse(): word=[BASE], HERE=0753, LAST=35f8, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0755, LAST=35f8, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[SWAP], HERE=0756, LAST=35f8, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[DECIMAL], HERE=0757, LAST=35f8, STATE=1
 looking for word [DECIMAL]
FORTH word [DECIMAL]. STATE=1 ... compiling into current word
Parse(): word=[(.)], HERE=075c, LAST=35f8, STATE=1
 looking for word [(.)]
FORTH word [(.)]. STATE=1 ... compiling into current word
Parse(): word=[BASE], HERE=0761, LAST=35f8, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0763, LAST=35f8, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=0764, LAST=35f8, STATE=1
Parse(): line=[: BINARY.  BASE @ SWAP BINARY  (.) BASE ! ;]
Parse(): word=[:], HERE=0765, LAST=35f8, STATE=0

Defining word [BINARY.]...
Parse(): word=[BASE], HERE=076a, LAST=35e6, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=076c, LAST=35e6, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[SWAP], HERE=076d, LAST=35e6, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[BINARY], HERE=076e, LAST=35e6, STATE=1
 looking for word [BINARY]
FORTH word [BINARY]. STATE=1 ... compiling into current word
Parse(): word=[(.)], HERE=0773, LAST=35e6, STATE=1
 looking for word [(.)]
FORTH word [(.)]. STATE=1 ... compiling into current word
Parse(): word=[BASE], HERE=0778, LAST=35e6, STATE=1
 looking for word [BASE]
FORTH word [BASE]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=077a, LAST=35e6, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=077b, LAST=35e6, STATE=1
Parse(): line=[]
Parse(): line=[: MIN 2DUP > IF SWAP THEN DROP ; ]
Parse(): word=[:], HERE=077c, LAST=35e6, STATE=0

Defining word [MIN]...
Parse(): word=[2DUP], HERE=0781, LAST=35d8, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[>], HERE=0783, LAST=35d8, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[IF], HERE=0784, LAST=35d8, STATE=1
Parse(): word=[SWAP], HERE=0789, LAST=35d8, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[THEN], HERE=078a, LAST=35d8, STATE=1
Parse(): word=[DROP], HERE=078a, LAST=35d8, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[;], HERE=078b, LAST=35d8, STATE=1
Parse(): line=[: MAX 2DUP < IF SWAP THEN DROP ; ]
Parse(): word=[:], HERE=078c, LAST=35d8, STATE=0

Defining word [MAX]...
Parse(): word=[2DUP], HERE=0791, LAST=35ca, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[<], HERE=0793, LAST=35ca, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=0794, LAST=35ca, STATE=1
Parse(): word=[SWAP], HERE=0799, LAST=35ca, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[THEN], HERE=079a, LAST=35ca, STATE=1
Parse(): word=[DROP], HERE=079a, LAST=35ca, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[;], HERE=079b, LAST=35ca, STATE=1
Parse(): line=[]
Parse(): line=[: .S ]
Parse(): word=[:], HERE=079c, LAST=35ca, STATE=0

Defining word [.S]...
Parse(): line=[	BL DEPTH 0 < ]
Parse(): word=[BL], HERE=07a1, LAST=35bd, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[DEPTH], HERE=07a4, LAST=35bd, STATE=1
[DEPTH] Is an ASM keyword: opcode=38
Parse(): word=[0], HERE=07a5, LAST=35bd, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[<], HERE=07a7, LAST=35bd, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): line=[	IF S" Stack underflow!" COUNT TYPE RESET THEN]
Parse(): word=[IF], HERE=07a8, LAST=35bd, STATE=1
Parse(): word=[S"], HERE=07ad, LAST=35bd, STATE=1
SLITERAL(1-07ae) (83, 07af, 0, 07ae)(2-07ae)(1-07ae) (116, 07b0, 1, 07ae)(2-07ae)(1-07ae) (97, 07b1, 2, 07ae)(2-07ae)(1-07ae) (99, 07b2, 3, 07ae)(2-07ae)(1-07ae) (107, 07b3, 4, 07ae)(2-07ae)(1-07ae) (32, 07b4, 5, 07ae)(2-07ae)(1-07ae) (117, 07b5, 6, 07ae)(2-07ae)(1-07ae) (110, 07b6, 7, 07ae)(2-07ae)(1-07ae) (100, 07b7, 8, 07ae)(2-07ae)(1-07ae) (101, 07b8, 9, 07ae)(2-07ae)(1-07ae) (114, 07b9, 10, 07ae)(2-07ae)(1-07ae) (102, 07ba, 11, 07ae)(2-07ae)(1-07ae) (108, 07bb, 12, 07ae)(2-07ae)(1-07ae) (111, 07bc, 13, 07ae)(2-07ae)(1-07ae) (119, 07bd, 14, 07ae)(2-07ae)(1-07ae) (33, 07be, 15, 07ae)(2-07ae)(1-07ae) (34, 07bf(3-07ae)) done. HERE=07bf, cur_here=07ae
) done. HERE=07c0, cur_here=07ae
Parse(): word=[COUNT], HERE=07c0, LAST=35bd, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=07c5, LAST=35bd, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[RESET], HERE=07ca, LAST=35bd, STATE=1
[RESET] Is an ASM keyword: opcode=254
Parse(): word=[THEN], HERE=07cb, LAST=35bd, STATE=1
Parse(): line=[	DEPTH 0 =]
Parse(): word=[DEPTH], HERE=07cb, LAST=35bd, STATE=1
[DEPTH] Is an ASM keyword: opcode=38
Parse(): word=[0], HERE=07cc, LAST=35bd, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[=], HERE=07ce, LAST=35bd, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[	IF 40 EMIT 237 EMIT 41 EMIT LEAVE THEN]
Parse(): word=[IF], HERE=07cf, LAST=35bd, STATE=1
Parse(): word=[40], HERE=07d4, LAST=35bd, STATE=1
 looking for word [40]
IsNumber: 40 (0028), STATE=1
Parse(): word=[EMIT], HERE=07d6, LAST=35bd, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[237], HERE=07d7, LAST=35bd, STATE=1
 looking for word [237]
IsNumber: 237 (00ed), STATE=1
Parse(): word=[EMIT], HERE=07d9, LAST=35bd, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[41], HERE=07da, LAST=35bd, STATE=1
 looking for word [41]
IsNumber: 41 (0029), STATE=1
Parse(): word=[EMIT], HERE=07dc, LAST=35bd, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[LEAVE], HERE=07dd, LAST=35bd, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=07de, LAST=35bd, STATE=1
Parse(): line=[	40 EMIT]
Parse(): word=[40], HERE=07de, LAST=35bd, STATE=1
 looking for word [40]
IsNumber: 40 (0028), STATE=1
Parse(): word=[EMIT], HERE=07e0, LAST=35bd, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): line=[	DEPTH 1- >R]
Parse(): word=[DEPTH], HERE=07e1, LAST=35bd, STATE=1
[DEPTH] Is an ASM keyword: opcode=38
Parse(): word=[1-], HERE=07e2, LAST=35bd, STATE=1
 looking for word [1-]
FORTH word [1-]. STATE=1 ... compiling into current word
Parse(): word=[>R], HERE=07e5, LAST=35bd, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	BEGIN ]
Parse(): word=[BEGIN], HERE=07e6, LAST=35bd, STATE=1
Parse(): line=[		R@ PICK . R@ ]
Parse(): word=[R@], HERE=07e6, LAST=35bd, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[PICK], HERE=07e7, LAST=35bd, STATE=1
[PICK] Is an ASM keyword: opcode=37
Parse(): word=[.], HERE=07e8, LAST=35bd, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[R@], HERE=07ed, LAST=35bd, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): line=[		IF]
Parse(): word=[IF], HERE=07ee, LAST=35bd, STATE=1
Parse(): line=[			R> 1- >R]
Parse(): word=[R>], HERE=07f3, LAST=35bd, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[1-], HERE=07f4, LAST=35bd, STATE=1
 looking for word [1-]
FORTH word [1-]. STATE=1 ... compiling into current word
Parse(): word=[>R], HERE=07f7, LAST=35bd, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=07f8, LAST=35bd, STATE=1
Parse(): line=[			RDROP BL 41 EMIT LEAVE]
Parse(): word=[RDROP], HERE=07fd, LAST=35bd, STATE=1
 looking for word [RDROP]
FORTH word [RDROP]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=07ff, LAST=35bd, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[41], HERE=0802, LAST=35bd, STATE=1
 looking for word [41]
IsNumber: 41 (0029), STATE=1
Parse(): word=[EMIT], HERE=0804, LAST=35bd, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[LEAVE], HERE=0805, LAST=35bd, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0806, LAST=35bd, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0806, LAST=35bd, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=080b, LAST=35bd, STATE=1
Parse(): line=[]
Parse(): line=[: WORDS \ ( -- )]
Parse(): word=[:], HERE=080c, LAST=35bd, STATE=0

Defining word [WORDS]...
Parse(): line=[	LAST]
Parse(): word=[LAST], HERE=0811, LAST=35ad, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=0814, LAST=35ad, STATE=1
Parse(): line=[		DUP @ 0 =]
Parse(): word=[DUP], HERE=0814, LAST=35ad, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[@], HERE=0815, LAST=35ad, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[0], HERE=0816, LAST=35ad, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[=], HERE=0818, LAST=35ad, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0819, LAST=35ad, STATE=1
Parse(): line=[			DROP CRLF LEAVE]
Parse(): word=[DROP], HERE=081e, LAST=35ad, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[CRLF], HERE=081f, LAST=35ad, STATE=1
 looking for word [CRLF]
FORTH word [CRLF]. STATE=1 ... compiling into current word
Parse(): word=[LEAVE], HERE=0824, LAST=35ad, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0825, LAST=35ad, STATE=1
Parse(): line=[		\ DUP 40 EMIT HEX. 41 EMIT BL \ DEBUG]
Parse(): line=[		DUP DICT>NAME]
Parse(): word=[DUP], HERE=0825, LAST=35ad, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[DICT>NAME], HERE=0826, LAST=35ad, STATE=1
 looking for word [DICT>NAME]
FORTH word [DICT>NAME]. STATE=1 ... compiling into current word
Parse(): line=[		COUNT TYPE BL]
Parse(): word=[COUNT], HERE=082b, LAST=35ad, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=0830, LAST=35ad, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0835, LAST=35ad, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): line=[		@]
Parse(): word=[@], HERE=0838, LAST=35ad, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0839, LAST=35ad, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=083e, LAST=35ad, STATE=1
Parse(): line=[]
Parse(): line=[: EXECUTE RDROP >R ; \ ( addr -- )]
Parse(): word=[:], HERE=083f, LAST=35ad, STATE=0

Defining word [EXECUTE]...
Parse(): word=[RDROP], HERE=0844, LAST=359b, STATE=1
 looking for word [RDROP]
FORTH word [RDROP]. STATE=1 ... compiling into current word
Parse(): word=[>R], HERE=0846, LAST=359b, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[;], HERE=0847, LAST=359b, STATE=1
Parse(): line=[]
Parse(): line=[\ ( addr1 -- addr2 )]
Parse(): line=[: find.ret]
Parse(): word=[:], HERE=0848, LAST=359b, STATE=0

Defining word [find.ret]...
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=084d, LAST=3588, STATE=1
Parse(): line=[		DUP C@ ]
Parse(): word=[DUP], HERE=084d, LAST=3588, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=084e, LAST=3588, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[		<asm> CPUSH RET </asm> =]
Parse(): word=[<asm>], HERE=084f, LAST=3588, STATE=1
Parse(): word=[CPUSH], HERE=084f, LAST=3588, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[RET], HERE=0850, LAST=3588, STATE=2
[RET] Is an ASM keyword: opcode=12
Parse(): word=[</asm>], HERE=0851, LAST=3588, STATE=2
Parse(): word=[=], HERE=0851, LAST=3588, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0852, LAST=3588, STATE=1
Parse(): line=[			LEAVE]
Parse(): word=[LEAVE], HERE=0857, LAST=3588, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0858, LAST=3588, STATE=1
Parse(): line=[		1+]
Parse(): word=[1+], HERE=0858, LAST=3588, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0859, LAST=3588, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=085e, LAST=3588, STATE=1
Parse(): line=[]
Parse(): line=[: (inline) \ ( from to -- )]
Parse(): word=[:], HERE=085f, LAST=3588, STATE=0

Defining word [(inline)]...
Parse(): line=[	2DUP < IF SWAP THEN]
Parse(): word=[2DUP], HERE=0864, LAST=3575, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[<], HERE=0866, LAST=3575, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=0867, LAST=3575, STATE=1
Parse(): word=[SWAP], HERE=086c, LAST=3575, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[THEN], HERE=086d, LAST=3575, STATE=1
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=086d, LAST=3575, STATE=1
Parse(): line=[		DUP C@ C,]
Parse(): word=[DUP], HERE=086d, LAST=3575, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=086e, LAST=3575, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[C,], HERE=086f, LAST=3575, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): line=[		1+ 2DUP >]
Parse(): word=[1+], HERE=0874, LAST=3575, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[2DUP], HERE=0875, LAST=3575, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[>], HERE=0877, LAST=3575, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): line=[	WHILE]
Parse(): word=[WHILE], HERE=0878, LAST=3575, STATE=1
Parse(): line=[	2DROP]
Parse(): word=[2DROP], HERE=087d, LAST=3575, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=087f, LAST=3575, STATE=1
Parse(): line=[]
Parse(): line=[: DOES>]
Parse(): word=[:], HERE=0880, LAST=3575, STATE=0

Defining word [DOES>]...
Parse(): line=[	R> DUP find.ret]
Parse(): word=[R>], HERE=0885, LAST=3565, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[DUP], HERE=0886, LAST=3565, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[find.ret], HERE=0887, LAST=3565, STATE=1
 looking for word [find.ret]
FORTH word [find.ret]. STATE=1 ... compiling into current word
Parse(): line=[	DUP >R]
Parse(): word=[DUP], HERE=088c, LAST=3565, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[>R], HERE=088d, LAST=3565, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	1+]
Parse(): word=[1+], HERE=088e, LAST=3565, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): line=[	(inline)]
Parse(): word=[(inline)], HERE=088f, LAST=3565, STATE=1
 looking for word [(inline)]
FORTH word [(inline)]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=0894, LAST=3565, STATE=1
Parse(): line=[]
Parse(): line=[: Copy.INLINE \ ( XT -- )]
Parse(): word=[:], HERE=0894, LAST=3565, STATE=0

Defining word [Copy.INLINE]...
Parse(): line=[	\ Skip over the DICTP]
Parse(): line=[	DUP C@ <asm> CPUSH DICTP </asm> =]
Parse(): word=[DUP], HERE=0899, LAST=354f, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=089a, LAST=354f, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[<asm>], HERE=089b, LAST=354f, STATE=1
Parse(): word=[CPUSH], HERE=089b, LAST=354f, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[DICTP], HERE=089c, LAST=354f, STATE=2
[DICTP] Is an ASM keyword: opcode=24
Parse(): word=[</asm>], HERE=089d, LAST=354f, STATE=2
Parse(): word=[=], HERE=089d, LAST=354f, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[	IF ]
Parse(): word=[IF], HERE=089e, LAST=354f, STATE=1
Parse(): line=[		1+ CELL +]
Parse(): word=[1+], HERE=08a3, LAST=354f, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[CELL], HERE=08a4, LAST=354f, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=08a7, LAST=354f, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=08a8, LAST=354f, STATE=1
Parse(): line=[]
Parse(): line=[	DUP find.ret]
Parse(): word=[DUP], HERE=08a8, LAST=354f, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[find.ret], HERE=08a9, LAST=354f, STATE=1
 looking for word [find.ret]
FORTH word [find.ret]. STATE=1 ... compiling into current word
Parse(): line=[	(inline)]
Parse(): word=[(inline)], HERE=08ae, LAST=354f, STATE=1
 looking for word [(inline)]
FORTH word [(inline)]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=08b3, LAST=354f, STATE=1
Parse(): line=[]
Parse(): line=[: strlen 0 SWAP ]
Parse(): word=[:], HERE=08b3, LAST=354f, STATE=0

Defining word [strlen]...
Parse(): word=[0], HERE=08b8, LAST=353e, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[SWAP], HERE=08ba, LAST=353e, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=08bb, LAST=353e, STATE=1
Parse(): line=[		TUCK C@ DUP]
Parse(): word=[TUCK], HERE=08bb, LAST=353e, STATE=1
 looking for word [TUCK]
FORTH word [TUCK]. STATE=1 ... compiling into current word
Parse(): word=[C@], HERE=08bd, LAST=353e, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[DUP], HERE=08be, LAST=353e, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): line=[		IF]
Parse(): word=[IF], HERE=08bf, LAST=353e, STATE=1
Parse(): line=[			DROP 1+ SWAP 1+ 1]
Parse(): word=[DROP], HERE=08c4, LAST=353e, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[1+], HERE=08c5, LAST=353e, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[SWAP], HERE=08c6, LAST=353e, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[1+], HERE=08c7, LAST=353e, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[1], HERE=08c8, LAST=353e, STATE=1
 looking for word [1]
IsNumber: 1 (0001), STATE=1
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=08ca, LAST=353e, STATE=1
Parse(): line=[	WHILE]
Parse(): word=[WHILE], HERE=08ca, LAST=353e, STATE=1
Parse(): line=[	NIP]
Parse(): word=[NIP], HERE=08cf, LAST=353e, STATE=1
 looking for word [NIP]
FORTH word [NIP]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=08d1, LAST=353e, STATE=1
Parse(): line=[]
Parse(): line=[: cstr, \ ( start -- )]
Parse(): word=[:], HERE=08d2, LAST=353e, STATE=0

Defining word [cstr,]...
Parse(): line=[	DUP C@ ]
Parse(): word=[DUP], HERE=08d7, LAST=352e, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=08d8, LAST=352e, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[	OVER + 1+ 1+]
Parse(): word=[OVER], HERE=08d9, LAST=352e, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[+], HERE=08da, LAST=352e, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[1+], HERE=08db, LAST=352e, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[1+], HERE=08dc, LAST=352e, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): line=[	(inline)]
Parse(): word=[(inline)], HERE=08dd, LAST=352e, STATE=1
 looking for word [(inline)]
FORTH word [(inline)]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=08e2, LAST=352e, STATE=1
Parse(): line=[]
Parse(): line=[: [COMPILE] \ ( XT flags -- )]
Parse(): word=[:], HERE=08e2, LAST=352e, STATE=0

Defining word [[COMPILE]]...
Parse(): line=[	DUP FLAGS.ISIMMEDIATE? \ Immediate?]
Parse(): word=[DUP], HERE=08e7, LAST=351a, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[FLAGS.ISIMMEDIATE?], HERE=08e8, LAST=351a, STATE=1
 looking for word [FLAGS.ISIMMEDIATE?]
FORTH word [FLAGS.ISIMMEDIATE?]. STATE=1 ... compiling into current word
Parse(): line=[	IF]
Parse(): word=[IF], HERE=08ed, LAST=351a, STATE=1
Parse(): line=[		DROP EXECUTE]
Parse(): word=[DROP], HERE=08f2, LAST=351a, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[EXECUTE], HERE=08f3, LAST=351a, STATE=1
 looking for word [EXECUTE]
FORTH word [EXECUTE]. STATE=1 ... compiling into current word
Parse(): line=[	ELSE]
Parse(): word=[ELSE], HERE=08f8, LAST=351a, STATE=1
Parse(): line=[		FLAGS.ISINLINE? ]
Parse(): word=[FLAGS.ISINLINE?], HERE=08fd, LAST=351a, STATE=1
 looking for word [FLAGS.ISINLINE?]
FORTH word [FLAGS.ISINLINE?]. STATE=1 ... compiling into current word
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0902, LAST=351a, STATE=1
Parse(): line=[			Copy.INLINE]
Parse(): word=[Copy.INLINE], HERE=0907, LAST=351a, STATE=1
 looking for word [Copy.INLINE]
FORTH word [Copy.INLINE]. STATE=1 ... compiling into current word
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=090c, LAST=351a, STATE=1
Parse(): line=[			<asm> CPUSH CALL </asm> C, ,]
Parse(): word=[<asm>], HERE=0911, LAST=351a, STATE=1
Parse(): word=[CPUSH], HERE=0911, LAST=351a, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[CALL], HERE=0912, LAST=351a, STATE=2
[CALL] Is an ASM keyword: opcode=11
Parse(): word=[</asm>], HERE=0913, LAST=351a, STATE=2
Parse(): word=[C,], HERE=0913, LAST=351a, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0918, LAST=351a, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=091d, LAST=351a, STATE=1
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=091d, LAST=351a, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=091d, LAST=351a, STATE=1
Parse(): line=[]
Parse(): line=[: isPostpone <asm> .HERE 2 + .CELL + .LITERAL </asm> ; 0 .COMMA]
Parse(): word=[:], HERE=091e, LAST=351a, STATE=0

Defining word [isPostpone]...
Parse(): word=[<asm>], HERE=0923, LAST=3505, STATE=1
Parse(): word=[.HERE], HERE=0923, LAST=3505, STATE=2
Parse(): word=[2], HERE=0923, LAST=3505, STATE=2
 looking for word [2]
IsNumber: 2 (0002), STATE=2
Parse(): word=[+], HERE=0923, LAST=3505, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=092d, IR=17 - ADD 2339 + 2 = 2341
Parse(): word=[.CELL], HERE=0923, LAST=3505, STATE=2
Parse(): word=[+], HERE=0923, LAST=3505, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=092d, IR=17 - ADD 2341 + 4 = 2345
Parse(): word=[.LITERAL], HERE=0923, LAST=3505, STATE=2
Parse(): word=[</asm>], HERE=0928, LAST=3505, STATE=2
Parse(): word=[;], HERE=0928, LAST=3505, STATE=1
Parse(): word=[0], HERE=0929, LAST=3505, STATE=0
 looking for word [0]
IsNumber: 0 (0000), STATE=0
Parse(): word=[.COMMA], HERE=0929, LAST=3505, STATE=0
Parse(): line=[]
Parse(): line=[: POSTPONE.rt]
Parse(): word=[:], HERE=092d, LAST=3505, STATE=0

Defining word [POSTPONE.rt]...
Parse(): line=[	R@ @ DICT.GetXT]
Parse(): word=[R@], HERE=0932, LAST=34ef, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[@], HERE=0933, LAST=34ef, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[DICT.GetXT], HERE=0934, LAST=34ef, STATE=1
 looking for word [DICT.GetXT]
FORTH word [DICT.GetXT]. STATE=1 ... compiling into current word
Parse(): line=[	R@ @ DICT.GetFLAGS]
Parse(): word=[R@], HERE=0939, LAST=34ef, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[@], HERE=093a, LAST=34ef, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[DICT.GetFLAGS], HERE=093b, LAST=34ef, STATE=1
 looking for word [DICT.GetFLAGS]
FORTH word [DICT.GetFLAGS]. STATE=1 ... compiling into current word
Parse(): line=[	R> CELL + >R]
Parse(): word=[R>], HERE=0940, LAST=34ef, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[CELL], HERE=0941, LAST=34ef, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=0944, LAST=34ef, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[>R], HERE=0945, LAST=34ef, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	[COMPILE]]
Parse(): word=[[COMPILE]], HERE=0946, LAST=34ef, STATE=1
 looking for word [[COMPILE]]
FORTH word [[COMPILE]]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=094b, LAST=34ef, STATE=1
Parse(): line=[]
Parse(): line=[LAST DICT.GetXT]
Parse(): word=[LAST], HERE=094b, LAST=34ef, STATE=0
 looking for word [LAST]
FORTH word [LAST]. STATE=0 ... executing it ...
PC=0058, IR=24 - DICTP 3d91 ; LAST
PC=005d, IR=14 - CPUSH(14) - 20
PC=005f, IR=2 - FETCH(0014)=34ef (13551)
PC=0060, IR=12 - RET
Parse(): word=[DICT.GetXT], HERE=094b, LAST=34ef, STATE=0
 looking for word [DICT.GetXT]
FORTH word [DICT.GetXT]. STATE=0 ... executing it ...
PC=04fe, IR=24 - DICTP 379d ; DICT.GetXT
PC=0503, IR=11 - CALL 04ab
PC=04ab, IR=24 - DICTP 382a ; DICT>XT
PC=04b0, IR=14 - CPUSH(07) - 7
PC=04b2, IR=15 - CFETCH(0007) = 04 (4)
PC=04b3, IR=17 - ADD 13551 + 4 = 13555
PC=04b4, IR=12 - RET
PC=0508, IR=2 - FETCH(34f3)=092d (2349)
PC=0509, IR=12 - RET
Parse(): line=[: POSTPONE  \ compile call to POSTPONE.rt]
Parse(): word=[:], HERE=094b, LAST=34ef, STATE=0

Defining word [POSTPONE]...
Parse(): line=[	<asm> CPUSH CALL </asm> C,]
Parse(): word=[<asm>], HERE=0950, LAST=34dc, STATE=1
Parse(): word=[CPUSH], HERE=0950, LAST=34dc, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[CALL], HERE=0951, LAST=34dc, STATE=2
[CALL] Is an ASM keyword: opcode=11
Parse(): word=[</asm>], HERE=0952, LAST=34dc, STATE=2
Parse(): word=[C,], HERE=0952, LAST=34dc, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): line=[	<asm> PUSH , </asm> ,]
Parse(): word=[<asm>], HERE=0957, LAST=34dc, STATE=1
Parse(): word=[PUSH], HERE=0957, LAST=34dc, STATE=2
[PUSH] Is an ASM keyword: opcode=1
Parse(): word=[,], HERE=0958, LAST=34dc, STATE=2
 looking for word [,]
FORTH word [,]. STATE=2 ... executing it ...
PC=0231, IR=24 - DICTP 3a64 ; ,
PC=0236, IR=14 - CPUSH(10) - 16
PC=0238, IR=2 - FETCH(0010)=0958 (2392)
PC=0239, IR=3 - STORE(0958, 092d)
PC=023a, IR=14 - CPUSH(07) - 7
PC=023c, IR=15 - CFETCH(0007) = 04 (4)
PC=023d, IR=14 - CPUSH(10) - 16
PC=023f, IR=8 - JMP
PC=0219, IR=24 - DICTP 3a7e ; +!
PC=021e, IR=4 - SWAP (0004 and 0010)
PC=021f, IR=26 - OVER (0010)
PC=0220, IR=2 - FETCH(0010)=0958 (2392)
PC=0221, IR=17 - ADD 4 + 2392 = 2396
PC=0222, IR=4 - SWAP (0010 and 095c)
PC=0223, IR=3 - STORE(0010, 095c)
PC=0224, IR=12 - RET
Parse(): word=[</asm>], HERE=095c, LAST=34dc, STATE=2
Parse(): word=[,], HERE=095c, LAST=34dc, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): line=[	isPostpone ON]
Parse(): word=[isPostpone], HERE=0961, LAST=34dc, STATE=1
 looking for word [isPostpone]
FORTH word [isPostpone]. STATE=1 ... compiling into current word
Parse(): word=[ON], HERE=0966, LAST=34dc, STATE=1
 looking for word [ON]
FORTH word [ON]. STATE=1 ... compiling into current word
Parse(): line=[; IMMEDIATE]
Parse(): word=[;], HERE=096b, LAST=34dc, STATE=1
Parse(): word=[IMMEDIATE], HERE=096b, LAST=34dc, STATE=0
Parse(): line=[]
Parse(): line=[: executeWord  \ ( addr -- )]
Parse(): word=[:], HERE=096b, LAST=34dc, STATE=0

Defining word [executeWord]...
Parse(): line=[	>R R@ findInDict \ ( addr -- XT FLAGS found )]
Parse(): word=[>R], HERE=0970, LAST=34c6, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[R@], HERE=0971, LAST=34c6, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[findInDict], HERE=0972, LAST=34c6, STATE=1
 looking for word [findInDict]
FORTH word [findInDict]. STATE=1 ... compiling into current word
Parse(): line=[	IF]
Parse(): word=[IF], HERE=0977, LAST=34c6, STATE=1
Parse(): line=[		RDROP]
Parse(): word=[RDROP], HERE=097c, LAST=34c6, STATE=1
 looking for word [RDROP]
FORTH word [RDROP]. STATE=1 ... compiling into current word
Parse(): line=[		?COMPILING]
Parse(): word=[?COMPILING], HERE=097e, LAST=34c6, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0983, LAST=34c6, STATE=1
Parse(): line=[			isPostpone @ ]
Parse(): word=[isPostpone], HERE=0988, LAST=34c6, STATE=1
 looking for word [isPostpone]
FORTH word [isPostpone]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=098d, LAST=34c6, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): line=[			IF]
Parse(): word=[IF], HERE=098e, LAST=34c6, STATE=1
Parse(): line=[				DROP XT.GetDICTP ,]
Parse(): word=[DROP], HERE=0993, LAST=34c6, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[XT.GetDICTP], HERE=0994, LAST=34c6, STATE=1
 looking for word [XT.GetDICTP]
FORTH word [XT.GetDICTP]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0999, LAST=34c6, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): line=[				isPostpone OFF]
Parse(): word=[isPostpone], HERE=099e, LAST=34c6, STATE=1
 looking for word [isPostpone]
FORTH word [isPostpone]. STATE=1 ... compiling into current word
Parse(): word=[OFF], HERE=09a3, LAST=34c6, STATE=1
 looking for word [OFF]
FORTH word [OFF]. STATE=1 ... compiling into current word
Parse(): line=[			ELSE]
Parse(): word=[ELSE], HERE=09a8, LAST=34c6, STATE=1
Parse(): line=[				DUP FLAGS.ISIMMEDIATE? \ Immediate?]
Parse(): word=[DUP], HERE=09ad, LAST=34c6, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[FLAGS.ISIMMEDIATE?], HERE=09ae, LAST=34c6, STATE=1
 looking for word [FLAGS.ISIMMEDIATE?]
FORTH word [FLAGS.ISIMMEDIATE?]. STATE=1 ... compiling into current word
Parse(): line=[				IF]
Parse(): word=[IF], HERE=09b3, LAST=34c6, STATE=1
Parse(): line=[					DROP EXECUTE]
Parse(): word=[DROP], HERE=09b8, LAST=34c6, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[EXECUTE], HERE=09b9, LAST=34c6, STATE=1
 looking for word [EXECUTE]
FORTH word [EXECUTE]. STATE=1 ... compiling into current word
Parse(): line=[				ELSE]
Parse(): word=[ELSE], HERE=09be, LAST=34c6, STATE=1
Parse(): line=[					[COMPILE]]
Parse(): word=[[COMPILE]], HERE=09c3, LAST=34c6, STATE=1
 looking for word [[COMPILE]]
FORTH word [[COMPILE]]. STATE=1 ... compiling into current word
Parse(): line=[				THEN]
Parse(): word=[THEN], HERE=09c8, LAST=34c6, STATE=1
Parse(): line=[			THEN]
Parse(): word=[THEN], HERE=09c8, LAST=34c6, STATE=1
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=09c8, LAST=34c6, STATE=1
Parse(): line=[			DROP EXECUTE]
Parse(): word=[DROP], HERE=09cd, LAST=34c6, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[EXECUTE], HERE=09ce, LAST=34c6, STATE=1
 looking for word [EXECUTE]
FORTH word [EXECUTE]. STATE=1 ... compiling into current word
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=09d3, LAST=34c6, STATE=1
Parse(): line=[	ELSE \ word not found]
Parse(): word=[ELSE], HERE=09d3, LAST=34c6, STATE=1
Parse(): line=[		2DROP \ discard IMM and XT place holders]
Parse(): word=[2DROP], HERE=09d8, LAST=34c6, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): line=[		R@ isNumber? \ ( addr -- num bool )]
Parse(): word=[R@], HERE=09da, LAST=34c6, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[isNumber?], HERE=09db, LAST=34c6, STATE=1
 looking for word [isNumber?]
FORTH word [isNumber?]. STATE=1 ... compiling into current word
Parse(): line=[		IF]
Parse(): word=[IF], HERE=09e0, LAST=34c6, STATE=1
Parse(): line=[			?COMPILING]
Parse(): word=[?COMPILING], HERE=09e5, LAST=34c6, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): line=[			IF]
Parse(): word=[IF], HERE=09ea, LAST=34c6, STATE=1
Parse(): line=[				isPostpone @ ]
Parse(): word=[isPostpone], HERE=09ef, LAST=34c6, STATE=1
 looking for word [isPostpone]
FORTH word [isPostpone]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=09f4, LAST=34c6, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): line=[				IF]
Parse(): word=[IF], HERE=09f5, LAST=34c6, STATE=1
Parse(): line=[					RESET	\ POSTPONE for literals not implemented yet]
Parse(): word=[RESET], HERE=09fa, LAST=34c6, STATE=1
[RESET] Is an ASM keyword: opcode=254
Parse(): line=[					isPostpone OFF]
Parse(): word=[isPostpone], HERE=09fb, LAST=34c6, STATE=1
 looking for word [isPostpone]
FORTH word [isPostpone]. STATE=1 ... compiling into current word
Parse(): word=[OFF], HERE=0a00, LAST=34c6, STATE=1
 looking for word [OFF]
FORTH word [OFF]. STATE=1 ... compiling into current word
Parse(): line=[				ELSE]
Parse(): word=[ELSE], HERE=0a05, LAST=34c6, STATE=1
Parse(): line=[					DUP 0 255 BETWEEN]
Parse(): word=[DUP], HERE=0a0a, LAST=34c6, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[0], HERE=0a0b, LAST=34c6, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[255], HERE=0a0d, LAST=34c6, STATE=1
 looking for word [255]
IsNumber: 255 (00ff), STATE=1
Parse(): word=[BETWEEN], HERE=0a0f, LAST=34c6, STATE=1
 looking for word [BETWEEN]
FORTH word [BETWEEN]. STATE=1 ... compiling into current word
Parse(): line=[					IF]
Parse(): word=[IF], HERE=0a14, LAST=34c6, STATE=1
Parse(): line=[						<asm> CPUSH CPUSH </asm> C, C,]
Parse(): word=[<asm>], HERE=0a19, LAST=34c6, STATE=1
Parse(): word=[CPUSH], HERE=0a19, LAST=34c6, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[CPUSH], HERE=0a1a, LAST=34c6, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[</asm>], HERE=0a1b, LAST=34c6, STATE=2
Parse(): word=[C,], HERE=0a1b, LAST=34c6, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[C,], HERE=0a20, LAST=34c6, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): line=[					ELSE]
Parse(): word=[ELSE], HERE=0a25, LAST=34c6, STATE=1
Parse(): line=[						<asm> CPUSH PUSH </asm> C, ,]
Parse(): word=[<asm>], HERE=0a2a, LAST=34c6, STATE=1
Parse(): word=[CPUSH], HERE=0a2a, LAST=34c6, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[PUSH], HERE=0a2b, LAST=34c6, STATE=2
[PUSH] Is an ASM keyword: opcode=1
Parse(): word=[</asm>], HERE=0a2c, LAST=34c6, STATE=2
Parse(): word=[C,], HERE=0a2c, LAST=34c6, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0a31, LAST=34c6, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): line=[					THEN]
Parse(): word=[THEN], HERE=0a36, LAST=34c6, STATE=1
Parse(): line=[				THEN]
Parse(): word=[THEN], HERE=0a36, LAST=34c6, STATE=1
Parse(): line=[			THEN]
Parse(): word=[THEN], HERE=0a36, LAST=34c6, STATE=1
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0a36, LAST=34c6, STATE=1
Parse(): line=[			DROP]
Parse(): word=[DROP], HERE=0a3b, LAST=34c6, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): line=[			R@ ZTYPE S" ??" COUNT TYPE RESET \ TODO: error]
Parse(): word=[R@], HERE=0a3c, LAST=34c6, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[ZTYPE], HERE=0a3d, LAST=34c6, STATE=1
[ZTYPE] Is an ASM keyword: opcode=13
Parse(): word=[S"], HERE=0a3e, LAST=34c6, STATE=1
SLITERAL(1-0a3f) (63, 0a40, 0, 0a3f)(2-0a3f)(1-0a3f) (63, 0a41, 1, 0a3f)(2-0a3f)(1-0a3f) (34, 0a42(3-0a3f)) done. HERE=0a42, cur_here=0a3f
) done. HERE=0a43, cur_here=0a3f
Parse(): word=[COUNT], HERE=0a43, LAST=34c6, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=0a48, LAST=34c6, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[RESET], HERE=0a4d, LAST=34c6, STATE=1
[RESET] Is an ASM keyword: opcode=254
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0a4e, LAST=34c6, STATE=1
Parse(): line=[		RDROP]
Parse(): word=[RDROP], HERE=0a4e, LAST=34c6, STATE=1
 looking for word [RDROP]
FORTH word [RDROP]. STATE=1 ... compiling into current word
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=0a50, LAST=34c6, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0a50, LAST=34c6, STATE=1
Parse(): line=[]
Parse(): line=[: executeInput ]
Parse(): word=[:], HERE=0a51, LAST=34c6, STATE=0

Defining word [executeInput]...
Parse(): line=[	\ HEX \ DEBUG]
Parse(): line=[	BEGIN ]
Parse(): word=[BEGIN], HERE=0a56, LAST=34af, STATE=1
Parse(): line=[		\ 65 EMIT >IN @ ZTYPE 65 EMIT CRLF \ DEBUG]
Parse(): line=[		>IN @ skipWS]
Parse(): word=[>IN], HERE=0a56, LAST=34af, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0a5b, LAST=34af, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[skipWS], HERE=0a5c, LAST=34af, STATE=1
 looking for word [skipWS]
FORTH word [skipWS]. STATE=1 ... compiling into current word
Parse(): line=[		\ 66 EMIT CRLF >IN @ ZTYPE CRLF \ DEBUG]
Parse(): line=[		>IN ! >IN @ C@ ]
Parse(): word=[>IN], HERE=0a61, LAST=34af, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0a66, LAST=34af, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[>IN], HERE=0a67, LAST=34af, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0a6c, LAST=34af, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[C@], HERE=0a6d, LAST=34af, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0a6e, LAST=34af, STATE=1
Parse(): line=[			\ 67 EMIT >IN @ ZTYPE CRLF \ DEBUG]
Parse(): line=[			>IN @ getOneWord >IN ! executeWord]
Parse(): word=[>IN], HERE=0a73, LAST=34af, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0a78, LAST=34af, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[getOneWord], HERE=0a79, LAST=34af, STATE=1
 looking for word [getOneWord]
FORTH word [getOneWord]. STATE=1 ... compiling into current word
Parse(): word=[>IN], HERE=0a7e, LAST=34af, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0a83, LAST=34af, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[executeWord], HERE=0a84, LAST=34af, STATE=1
 looking for word [executeWord]
FORTH word [executeWord]. STATE=1 ... compiling into current word
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0a89, LAST=34af, STATE=1
Parse(): line=[			LEAVE]
Parse(): word=[LEAVE], HERE=0a8e, LAST=34af, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0a8f, LAST=34af, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0a8f, LAST=34af, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0a94, LAST=34af, STATE=1
Parse(): line=[]
Parse(): line=[: Pad LAST 200 - ;]
Parse(): word=[:], HERE=0a95, LAST=34af, STATE=0

Defining word [Pad]...
Parse(): word=[LAST], HERE=0a9a, LAST=34a1, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[200], HERE=0a9d, LAST=34a1, STATE=1
 looking for word [200]
IsNumber: 200 (00c8), STATE=1
Parse(): word=[-], HERE=0a9f, LAST=34a1, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=0aa0, LAST=34a1, STATE=1
Parse(): line=[: >In <asm> .HERE 2 + .CELL + .LITERAL </asm> ; 0 .COMMA]
Parse(): word=[:], HERE=0aa1, LAST=34a1, STATE=0

Defining word [>In]...
Parse(): word=[<asm>], HERE=0aa6, LAST=3493, STATE=1
Parse(): word=[.HERE], HERE=0aa6, LAST=3493, STATE=2
Parse(): word=[2], HERE=0aa6, LAST=3493, STATE=2
 looking for word [2]
IsNumber: 2 (0002), STATE=2
Parse(): word=[+], HERE=0aa6, LAST=3493, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=0ab0, IR=17 - ADD 2726 + 2 = 2728
Parse(): word=[.CELL], HERE=0aa6, LAST=3493, STATE=2
Parse(): word=[+], HERE=0aa6, LAST=3493, STATE=2
[+] Is a FORTH primitive: opcode=17
PC=0ab0, IR=17 - ADD 2728 + 4 = 2732
Parse(): word=[.LITERAL], HERE=0aa6, LAST=3493, STATE=2
Parse(): word=[</asm>], HERE=0aab, LAST=3493, STATE=2
Parse(): word=[;], HERE=0aab, LAST=3493, STATE=1
Parse(): word=[0], HERE=0aac, LAST=3493, STATE=0
 looking for word [0]
IsNumber: 0 (0000), STATE=0
Parse(): word=[.COMMA], HERE=0aac, LAST=3493, STATE=0
Parse(): line=[]
Parse(): line=[: getLine \ ( -- addr )]
Parse(): word=[:], HERE=0ab0, LAST=3493, STATE=0

Defining word [getLine]...
Parse(): line=[	0 Pad DUP 1+ >In ! C!]
Parse(): word=[0], HERE=0ab5, LAST=3481, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[Pad], HERE=0ab7, LAST=3481, STATE=1
 looking for word [Pad]
FORTH word [Pad]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0abc, LAST=3481, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[1+], HERE=0abd, LAST=3481, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[>In], HERE=0abe, LAST=3481, STATE=1
 looking for word [>In]
FORTH word [>In]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0ac3, LAST=3481, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[C!], HERE=0ac4, LAST=3481, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=0ac5, LAST=3481, STATE=1
Parse(): line=[		0 >In @ C!]
Parse(): word=[0], HERE=0ac5, LAST=3481, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[>In], HERE=0ac7, LAST=3481, STATE=1
 looking for word [>In]
FORTH word [>In]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0acc, LAST=3481, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[C!], HERE=0acd, LAST=3481, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): line=[		GETCH ]
Parse(): word=[GETCH], HERE=0ace, LAST=3481, STATE=1
[GETCH] Is an ASM keyword: opcode=39
Parse(): line=[]
Parse(): line=[		DUP 13 =]
Parse(): word=[DUP], HERE=0acf, LAST=3481, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[13], HERE=0ad0, LAST=3481, STATE=1
 looking for word [13]
IsNumber: 13 (000d), STATE=1
Parse(): word=[=], HERE=0ad2, LAST=3481, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[		IF DROP Pad BL LEAVE THEN]
Parse(): word=[IF], HERE=0ad3, LAST=3481, STATE=1
Parse(): word=[DROP], HERE=0ad8, LAST=3481, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[Pad], HERE=0ad9, LAST=3481, STATE=1
 looking for word [Pad]
FORTH word [Pad]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0ade, LAST=3481, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[LEAVE], HERE=0ae1, LAST=3481, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): word=[THEN], HERE=0ae2, LAST=3481, STATE=1
Parse(): line=[]
Parse(): line=[		DUP 8 = ]
Parse(): word=[DUP], HERE=0ae2, LAST=3481, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[8], HERE=0ae3, LAST=3481, STATE=1
 looking for word [8]
IsNumber: 8 (0008), STATE=1
Parse(): word=[=], HERE=0ae5, LAST=3481, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0ae6, LAST=3481, STATE=1
Parse(): line=[			\ .S]
Parse(): line=[			Pad C@ 0 >]
Parse(): word=[Pad], HERE=0aeb, LAST=3481, STATE=1
 looking for word [Pad]
FORTH word [Pad]. STATE=1 ... compiling into current word
Parse(): word=[C@], HERE=0af0, LAST=3481, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[0], HERE=0af1, LAST=3481, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[>], HERE=0af3, LAST=3481, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): line=[			IF ]
Parse(): word=[IF], HERE=0af4, LAST=3481, STATE=1
Parse(): line=[				Pad C--]
Parse(): word=[Pad], HERE=0af9, LAST=3481, STATE=1
 looking for word [Pad]
FORTH word [Pad]. STATE=1 ... compiling into current word
Parse(): word=[C--], HERE=0afe, LAST=3481, STATE=1
 looking for word [C--]
FORTH word [C--]. STATE=1 ... compiling into current word
Parse(): line=[				>In --]
Parse(): word=[>In], HERE=0b03, LAST=3481, STATE=1
 looking for word [>In]
FORTH word [>In]. STATE=1 ... compiling into current word
Parse(): word=[--], HERE=0b08, LAST=3481, STATE=1
 looking for word [--]
FORTH word [--]. STATE=1 ... compiling into current word
Parse(): line=[				DUP EMIT BL EMIT]
Parse(): word=[DUP], HERE=0b0d, LAST=3481, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[EMIT], HERE=0b0e, LAST=3481, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[BL], HERE=0b0f, LAST=3481, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[EMIT], HERE=0b12, LAST=3481, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): line=[			ELSE]
Parse(): word=[ELSE], HERE=0b13, LAST=3481, STATE=1
Parse(): line=[				DROP]
Parse(): word=[DROP], HERE=0b18, LAST=3481, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): line=[			THEN]
Parse(): word=[THEN], HERE=0b19, LAST=3481, STATE=1
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0b19, LAST=3481, STATE=1
Parse(): line=[			DUP 32 127 BETWEEN]
Parse(): word=[DUP], HERE=0b1e, LAST=3481, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[32], HERE=0b1f, LAST=3481, STATE=1
 looking for word [32]
IsNumber: 32 (0020), STATE=1
Parse(): word=[127], HERE=0b21, LAST=3481, STATE=1
 looking for word [127]
IsNumber: 127 (007f), STATE=1
Parse(): word=[BETWEEN], HERE=0b23, LAST=3481, STATE=1
 looking for word [BETWEEN]
FORTH word [BETWEEN]. STATE=1 ... compiling into current word
Parse(): line=[			IF]
Parse(): word=[IF], HERE=0b28, LAST=3481, STATE=1
Parse(): line=[				DUP EMIT]
Parse(): word=[DUP], HERE=0b2d, LAST=3481, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[EMIT], HERE=0b2e, LAST=3481, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): line=[				>In @ C! ]
Parse(): word=[>In], HERE=0b2f, LAST=3481, STATE=1
 looking for word [>In]
FORTH word [>In]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0b34, LAST=3481, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[C!], HERE=0b35, LAST=3481, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): line=[				>In ++]
Parse(): word=[>In], HERE=0b36, LAST=3481, STATE=1
 looking for word [>In]
FORTH word [>In]. STATE=1 ... compiling into current word
Parse(): word=[++], HERE=0b3b, LAST=3481, STATE=1
 looking for word [++]
FORTH word [++]. STATE=1 ... compiling into current word
Parse(): line=[				Pad C++]
Parse(): word=[Pad], HERE=0b40, LAST=3481, STATE=1
 looking for word [Pad]
FORTH word [Pad]. STATE=1 ... compiling into current word
Parse(): word=[C++], HERE=0b45, LAST=3481, STATE=1
 looking for word [C++]
FORTH word [C++]. STATE=1 ... compiling into current word
Parse(): line=[			ELSE]
Parse(): word=[ELSE], HERE=0b4a, LAST=3481, STATE=1
Parse(): line=[				DROP]
Parse(): word=[DROP], HERE=0b4f, LAST=3481, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): line=[			THEN]
Parse(): word=[THEN], HERE=0b50, LAST=3481, STATE=1
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0b50, LAST=3481, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0b50, LAST=3481, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0b55, LAST=3481, STATE=1
Parse(): line=[]
Parse(): line=[: bye BYE ;]
Parse(): word=[:], HERE=0b56, LAST=3481, STATE=0

Defining word [bye]...
Parse(): word=[BYE], HERE=0b5b, LAST=3473, STATE=1
[BYE] Is an ASM keyword: opcode=255
Parse(): word=[;], HERE=0b5c, LAST=3473, STATE=1
Parse(): line=[]
Parse(): line=[: strcpy2c \ ( from to -- ) from is NOT counted, to is to get count byte]
Parse(): word=[:], HERE=0b5d, LAST=3473, STATE=0

Defining word [strcpy2c]...
Parse(): line=[	\ 65 EMIT OVER . DUP . \ DEBUG]
Parse(): line=[	DUP >R					\ from to]
Parse(): word=[DUP], HERE=0b62, LAST=3460, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[>R], HERE=0b63, LAST=3460, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	0 OVER C!				\ from to (init count)]
Parse(): word=[0], HERE=0b64, LAST=3460, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[OVER], HERE=0b66, LAST=3460, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[C!], HERE=0b67, LAST=3460, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): line=[	1+ SWAP					\ to+1 from]
Parse(): word=[1+], HERE=0b68, LAST=3460, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[SWAP], HERE=0b69, LAST=3460, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): line=[	BEGIN]
Parse(): word=[BEGIN], HERE=0b6a, LAST=3460, STATE=1
Parse(): line=[		DUP C@ DUP			\ to from ch ch]
Parse(): word=[DUP], HERE=0b6a, LAST=3460, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0b6b, LAST=3460, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[DUP], HERE=0b6c, LAST=3460, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): line=[		IF					\ to from ch]
Parse(): word=[IF], HERE=0b6d, LAST=3460, STATE=1
Parse(): line=[			2 PICK C!		\ to from]
Parse(): word=[2], HERE=0b72, LAST=3460, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[PICK], HERE=0b74, LAST=3460, STATE=1
[PICK] Is an ASM keyword: opcode=37
Parse(): word=[C!], HERE=0b75, LAST=3460, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): line=[			SWAP 1+ SWAP 1+]
Parse(): word=[SWAP], HERE=0b76, LAST=3460, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[1+], HERE=0b77, LAST=3460, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[SWAP], HERE=0b78, LAST=3460, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[1+], HERE=0b79, LAST=3460, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): line=[			R@ C++]
Parse(): word=[R@], HERE=0b7a, LAST=3460, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[C++], HERE=0b7b, LAST=3460, STATE=1
 looking for word [C++]
FORTH word [C++]. STATE=1 ... compiling into current word
Parse(): line=[		ELSE				\ to from ch]
Parse(): word=[ELSE], HERE=0b80, LAST=3460, STATE=1
Parse(): line=[			ROT C! DROP]
Parse(): word=[ROT], HERE=0b85, LAST=3460, STATE=1
 looking for word [ROT]
FORTH word [ROT]. STATE=1 ... compiling into current word
Parse(): word=[C!], HERE=0b8a, LAST=3460, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[DROP], HERE=0b8b, LAST=3460, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): line=[			RDROP]
Parse(): word=[RDROP], HERE=0b8c, LAST=3460, STATE=1
 looking for word [RDROP]
FORTH word [RDROP]. STATE=1 ... compiling into current word
Parse(): line=[			LEAVE]
Parse(): word=[LEAVE], HERE=0b8e, LAST=3460, STATE=1
[LEAVE] Is a FORTH primitive: opcode=12
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0b8f, LAST=3460, STATE=1
Parse(): line=[	AGAIN]
Parse(): word=[AGAIN], HERE=0b8f, LAST=3460, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0b94, LAST=3460, STATE=1
Parse(): line=[]
Parse(): line=[: Define-Word \ ( addr -- )]
Parse(): word=[:], HERE=0b95, LAST=3460, STATE=0

Defining word [Define-Word]...
Parse(): line=[	LAST OVER strlen 2 CELLS 3 + + - ]
Parse(): word=[LAST], HERE=0b9a, LAST=344a, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[OVER], HERE=0b9d, LAST=344a, STATE=1
[OVER] Is an ASM keyword: opcode=26
Parse(): word=[strlen], HERE=0b9e, LAST=344a, STATE=1
 looking for word [strlen]
FORTH word [strlen]. STATE=1 ... compiling into current word
Parse(): word=[2], HERE=0ba3, LAST=344a, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[CELLS], HERE=0ba5, LAST=344a, STATE=1
 looking for word [CELLS]
FORTH word [CELLS]. STATE=1 ... compiling into current word
Parse(): word=[3], HERE=0baa, LAST=344a, STATE=1
 looking for word [3]
IsNumber: 3 (0003), STATE=1
Parse(): word=[+], HERE=0bac, LAST=344a, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[+], HERE=0bad, LAST=344a, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[-], HERE=0bae, LAST=344a, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): line=[	DUP >R >R					\ Save new LAST]
Parse(): word=[DUP], HERE=0baf, LAST=344a, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[>R], HERE=0bb0, LAST=344a, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): word=[>R], HERE=0bb1, LAST=344a, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	LAST R@  !  R> CELL + >R	\ NEXT]
Parse(): word=[LAST], HERE=0bb2, LAST=344a, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[R@], HERE=0bb5, LAST=344a, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[!], HERE=0bb6, LAST=344a, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[R>], HERE=0bb7, LAST=344a, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[CELL], HERE=0bb8, LAST=344a, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=0bbb, LAST=344a, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[>R], HERE=0bbc, LAST=344a, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	HERE R@  !  R> CELL + >R	\ XT]
Parse(): word=[HERE], HERE=0bbd, LAST=344a, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[R@], HERE=0bc0, LAST=344a, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[!], HERE=0bc1, LAST=344a, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[R>], HERE=0bc2, LAST=344a, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[CELL], HERE=0bc3, LAST=344a, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=0bc6, LAST=344a, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[>R], HERE=0bc7, LAST=344a, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	0    R@ C!  R> 1+ >R		\ IMM]
Parse(): word=[0], HERE=0bc8, LAST=344a, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[R@], HERE=0bca, LAST=344a, STATE=1
[R@] Is a FORTH primitive: opcode=34
Parse(): word=[C!], HERE=0bcb, LAST=344a, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[R>], HERE=0bcc, LAST=344a, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[1+], HERE=0bcd, LAST=344a, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[>R], HERE=0bce, LAST=344a, STATE=1
[>R] Is a FORTH primitive: opcode=33
Parse(): line=[	R> strcpy2c					\ LEN + NAME]
Parse(): word=[R>], HERE=0bcf, LAST=344a, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[strcpy2c], HERE=0bd0, LAST=344a, STATE=1
 looking for word [strcpy2c]
FORTH word [strcpy2c]. STATE=1 ... compiling into current word
Parse(): line=[	R> (LAST) !]
Parse(): word=[R>], HERE=0bd5, LAST=344a, STATE=1
[R>] Is a FORTH primitive: opcode=35
Parse(): word=[(LAST)], HERE=0bd6, LAST=344a, STATE=1
 looking for word [(LAST)]
FORTH word [(LAST)]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0bd8, LAST=344a, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): line=[;]
Parse(): word=[;], HERE=0bd9, LAST=344a, STATE=1
Parse(): line=[]
Parse(): line=[: IMMEDIATE LAST DICT>FLAGS DUP C@ FLAG_IMMEDIATE OR SWAP C! ;]
Parse(): word=[:], HERE=0bda, LAST=344a, STATE=0

Defining word [IMMEDIATE]...
Parse(): word=[LAST], HERE=0bdf, LAST=3436, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[DICT>FLAGS], HERE=0be2, LAST=3436, STATE=1
 looking for word [DICT>FLAGS]
FORTH word [DICT>FLAGS]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0be7, LAST=3436, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0be8, LAST=3436, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[FLAG_IMMEDIATE], HERE=0be9, LAST=3436, STATE=1
 looking for word [FLAG_IMMEDIATE]
FORTH word [FLAG_IMMEDIATE]. STATE=1 ... compiling into current word
Parse(): word=[OR], HERE=0bee, LAST=3436, STATE=1
[OR] Is an ASM keyword: opcode=43
Parse(): word=[SWAP], HERE=0bef, LAST=3436, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C!], HERE=0bf0, LAST=3436, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=0bf1, LAST=3436, STATE=1
Parse(): line=[: INLINE    LAST DICT>FLAGS DUP C@ FLAG_INLINE    OR SWAP C! ;]
Parse(): word=[:], HERE=0bf2, LAST=3436, STATE=0

Defining word [INLINE]...
Parse(): word=[LAST], HERE=0bf7, LAST=3425, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[DICT>FLAGS], HERE=0bfa, LAST=3425, STATE=1
 looking for word [DICT>FLAGS]
FORTH word [DICT>FLAGS]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0bff, LAST=3425, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0c00, LAST=3425, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[FLAG_INLINE], HERE=0c01, LAST=3425, STATE=1
 looking for word [FLAG_INLINE]
FORTH word [FLAG_INLINE]. STATE=1 ... compiling into current word
Parse(): word=[OR], HERE=0c06, LAST=3425, STATE=1
[OR] Is an ASM keyword: opcode=43
Parse(): word=[SWAP], HERE=0c07, LAST=3425, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C!], HERE=0c08, LAST=3425, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=0c09, LAST=3425, STATE=1
Parse(): line=[]
Parse(): line=[: CREATE-NAME \ ( -- )]
Parse(): word=[:], HERE=0c0a, LAST=3425, STATE=0

Defining word [CREATE-NAME]...
Parse(): line=[	>IN @ skipWS >IN ! ]
Parse(): word=[>IN], HERE=0c0f, LAST=340f, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0c14, LAST=340f, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[skipWS], HERE=0c15, LAST=340f, STATE=1
 looking for word [skipWS]
FORTH word [skipWS]. STATE=1 ... compiling into current word
Parse(): word=[>IN], HERE=0c1a, LAST=340f, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0c1f, LAST=340f, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): line=[	>IN @ C@ ]
Parse(): word=[>IN], HERE=0c20, LAST=340f, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0c25, LAST=340f, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[C@], HERE=0c26, LAST=340f, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[	IF]
Parse(): word=[IF], HERE=0c27, LAST=340f, STATE=1
Parse(): line=[		>IN @ getOneWord >IN ! ]
Parse(): word=[>IN], HERE=0c2c, LAST=340f, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0c31, LAST=340f, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[getOneWord], HERE=0c32, LAST=340f, STATE=1
 looking for word [getOneWord]
FORTH word [getOneWord]. STATE=1 ... compiling into current word
Parse(): word=[>IN], HERE=0c37, LAST=340f, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0c3c, LAST=340f, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): line=[		DUP C@]
Parse(): word=[DUP], HERE=0c3d, LAST=340f, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0c3e, LAST=340f, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): line=[		IF]
Parse(): word=[IF], HERE=0c3f, LAST=340f, STATE=1
Parse(): line=[			Define-Word]
Parse(): word=[Define-Word], HERE=0c44, LAST=340f, STATE=1
 looking for word [Define-Word]
FORTH word [Define-Word]. STATE=1 ... compiling into current word
Parse(): line=[			<asm> CPUSH DICTP </asm> C,]
Parse(): word=[<asm>], HERE=0c49, LAST=340f, STATE=1
Parse(): word=[CPUSH], HERE=0c49, LAST=340f, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[DICTP], HERE=0c4a, LAST=340f, STATE=2
[DICTP] Is an ASM keyword: opcode=24
Parse(): word=[</asm>], HERE=0c4b, LAST=340f, STATE=2
Parse(): word=[C,], HERE=0c4b, LAST=340f, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): line=[			LAST ,]
Parse(): word=[LAST], HERE=0c50, LAST=340f, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0c53, LAST=340f, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): line=[		ELSE]
Parse(): word=[ELSE], HERE=0c58, LAST=340f, STATE=1
Parse(): line=[			DROP RESET]
Parse(): word=[DROP], HERE=0c5d, LAST=340f, STATE=1
[DROP] Is an ASM keyword: opcode=5
Parse(): word=[RESET], HERE=0c5e, LAST=340f, STATE=1
[RESET] Is an ASM keyword: opcode=254
Parse(): line=[		THEN]
Parse(): word=[THEN], HERE=0c5f, LAST=340f, STATE=1
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=0c5f, LAST=340f, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0c5f, LAST=340f, STATE=1
Parse(): line=[]
Parse(): line=[: : CREATE-NAME STATE ON ;]
Parse(): word=[:], HERE=0c60, LAST=340f, STATE=0

Defining word [:]...
Parse(): word=[CREATE-NAME], HERE=0c65, LAST=3403, STATE=1
 looking for word [CREATE-NAME]
FORTH word [CREATE-NAME]. STATE=1 ... compiling into current word
Parse(): word=[STATE], HERE=0c6a, LAST=3403, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[ON], HERE=0c6f, LAST=3403, STATE=1
 looking for word [ON]
FORTH word [ON]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0c74, LAST=3403, STATE=1
Parse(): line=[: :NONAME HERE STATE ON ;]
Parse(): word=[:], HERE=0c74, LAST=3403, STATE=0

Defining word [:NONAME]...
Parse(): word=[HERE], HERE=0c79, LAST=33f1, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[STATE], HERE=0c7c, LAST=33f1, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[ON], HERE=0c81, LAST=33f1, STATE=1
 looking for word [ON]
FORTH word [ON]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0c86, LAST=33f1, STATE=1
Parse(): line=[]
Parse(): line=[: ; \ ( -- )]
Parse(): word=[:], HERE=0c86, LAST=33f1, STATE=0

Defining word [;]...
Parse(): line=[	?COMPILING ]
Parse(): word=[?COMPILING], HERE=0c8b, LAST=33e5, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): line=[	IF]
Parse(): word=[IF], HERE=0c90, LAST=33e5, STATE=1
Parse(): line=[		<asm> CPUSH RET </asm> C,]
Parse(): word=[<asm>], HERE=0c95, LAST=33e5, STATE=1
Parse(): word=[CPUSH], HERE=0c95, LAST=33e5, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[RET], HERE=0c96, LAST=33e5, STATE=2
[RET] Is an ASM keyword: opcode=12
Parse(): word=[</asm>], HERE=0c97, LAST=33e5, STATE=2
Parse(): word=[C,], HERE=0c97, LAST=33e5, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): line=[		STATE OFF]
Parse(): word=[STATE], HERE=0c9c, LAST=33e5, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[OFF], HERE=0ca1, LAST=33e5, STATE=1
 looking for word [OFF]
FORTH word [OFF]. STATE=1 ... compiling into current word
Parse(): line=[	ELSE]
Parse(): word=[ELSE], HERE=0ca6, LAST=33e5, STATE=1
Parse(): line=[		RESET]
Parse(): word=[RESET], HERE=0cab, LAST=33e5, STATE=1
[RESET] Is an ASM keyword: opcode=254
Parse(): line=[	THEN]
Parse(): word=[THEN], HERE=0cac, LAST=33e5, STATE=1
Parse(): line=[; IMMEDIATE]
Parse(): word=[;], HERE=0cac, LAST=33e5, STATE=1
Parse(): word=[IMMEDIATE], HERE=0cad, LAST=33e5, STATE=0
Parse(): line=[]
Parse(): line=[: LAST? LAST DICT>NAME COUNT TYPE ;]
Parse(): word=[:], HERE=0cad, LAST=33e5, STATE=0

Defining word [LAST?]...
Parse(): word=[LAST], HERE=0cb2, LAST=33d5, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[DICT>NAME], HERE=0cb5, LAST=33d5, STATE=1
 looking for word [DICT>NAME]
FORTH word [DICT>NAME]. STATE=1 ... compiling into current word
Parse(): word=[COUNT], HERE=0cba, LAST=33d5, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=0cbf, LAST=33d5, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0cc4, LAST=33d5, STATE=1
Parse(): line=[]
Parse(): line=[: (FL) \ Forgets the last word]
Parse(): word=[:], HERE=0cc4, LAST=33d5, STATE=0

Defining word [(FL)]...
Parse(): line=[	LAST CELL + @ DP ! ]
Parse(): word=[LAST], HERE=0cc9, LAST=33c6, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[CELL], HERE=0ccc, LAST=33c6, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=0ccf, LAST=33c6, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[@], HERE=0cd0, LAST=33c6, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[DP], HERE=0cd1, LAST=33c6, STATE=1
 looking for word [DP]
FORTH word [DP]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0cd3, LAST=33c6, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): line=[	LAST @ (LAST) ! ]
Parse(): word=[LAST], HERE=0cd4, LAST=33c6, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0cd7, LAST=33c6, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[(LAST)], HERE=0cd8, LAST=33c6, STATE=1
 looking for word [(LAST)]
FORTH word [(LAST)]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0cda, LAST=33c6, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): line=[;]
Parse(): word=[;], HERE=0cdb, LAST=33c6, STATE=1
Parse(): line=[]
Parse(): line=[: .fl (FL) LAST? ;]
Parse(): word=[:], HERE=0cdc, LAST=33c6, STATE=0

Defining word [.fl]...
Parse(): word=[(FL)], HERE=0ce1, LAST=33b8, STATE=1
 looking for word [(FL)]
FORTH word [(FL)]. STATE=1 ... compiling into current word
Parse(): word=[LAST?], HERE=0ce6, LAST=33b8, STATE=1
 looking for word [LAST?]
FORTH word [LAST?]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0ceb, LAST=33b8, STATE=1
Parse(): line=[]
Parse(): line=[: resetState ?COMPILING ]
Parse(): word=[:], HERE=0ceb, LAST=33b8, STATE=0

Defining word [resetState]...
Parse(): word=[?COMPILING], HERE=0cf0, LAST=33a3, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): line=[	IF (FL) THEN ]
Parse(): word=[IF], HERE=0cf5, LAST=33a3, STATE=1
Parse(): word=[(FL)], HERE=0cfa, LAST=33a3, STATE=1
 looking for word [(FL)]
FORTH word [(FL)]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=0cff, LAST=33a3, STATE=1
Parse(): line=[	STATE OFF]
Parse(): word=[STATE], HERE=0cff, LAST=33a3, STATE=1
 looking for word [STATE]
FORTH word [STATE]. STATE=1 ... compiling into current word
Parse(): word=[OFF], HERE=0d04, LAST=33a3, STATE=1
 looking for word [OFF]
FORTH word [OFF]. STATE=1 ... compiling into current word
Parse(): line=[	isPostpone OFF]
Parse(): word=[isPostpone], HERE=0d09, LAST=33a3, STATE=1
 looking for word [isPostpone]
FORTH word [isPostpone]. STATE=1 ... compiling into current word
Parse(): word=[OFF], HERE=0d0e, LAST=33a3, STATE=1
 looking for word [OFF]
FORTH word [OFF]. STATE=1 ... compiling into current word
Parse(): line=[	DECIMAL]
Parse(): word=[DECIMAL], HERE=0d13, LAST=33a3, STATE=1
 looking for word [DECIMAL]
FORTH word [DECIMAL]. STATE=1 ... compiling into current word
Parse(): line=[;]
Parse(): word=[;], HERE=0d18, LAST=33a3, STATE=1
Parse(): line=[]
Parse(): line=[: OK ?COMPILING 0 = IF S" OK" COUNT TYPE .S THEN CRLF ;]
Parse(): word=[:], HERE=0d18, LAST=33a3, STATE=0

Defining word [OK]...
Parse(): word=[?COMPILING], HERE=0d1d, LAST=3396, STATE=1
 looking for word [?COMPILING]
FORTH word [?COMPILING]. STATE=1 ... compiling into current word
Parse(): word=[0], HERE=0d22, LAST=3396, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[=], HERE=0d24, LAST=3396, STATE=1
[=] Is a FORTH primitive: opcode=22
Parse(): word=[IF], HERE=0d25, LAST=3396, STATE=1
Parse(): word=[S"], HERE=0d2a, LAST=3396, STATE=1
SLITERAL(1-0d2b) (79, 0d2c, 0, 0d2b)(2-0d2b)(1-0d2b) (75, 0d2d, 1, 0d2b)(2-0d2b)(1-0d2b) (34, 0d2e(3-0d2b)) done. HERE=0d2e, cur_here=0d2b
) done. HERE=0d2f, cur_here=0d2b
Parse(): word=[COUNT], HERE=0d2f, LAST=3396, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=0d34, LAST=3396, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[.S], HERE=0d39, LAST=3396, STATE=1
 looking for word [.S]
FORTH word [.S]. STATE=1 ... compiling into current word
Parse(): word=[THEN], HERE=0d3e, LAST=3396, STATE=1
Parse(): word=[CRLF], HERE=0d3e, LAST=3396, STATE=1
 looking for word [CRLF]
FORTH word [CRLF]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0d43, LAST=3396, STATE=1
Parse(): line=[]
Parse(): line=[: z DUP BL DECIMAL. DUP BL HEX. DUP C@ BL HEX. 1+ ;]
Parse(): word=[:], HERE=0d43, LAST=3396, STATE=0

Defining word [z]...
Parse(): word=[DUP], HERE=0d48, LAST=338a, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[BL], HERE=0d49, LAST=338a, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[DECIMAL.], HERE=0d4c, LAST=338a, STATE=1
 looking for word [DECIMAL.]
FORTH word [DECIMAL.]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0d51, LAST=338a, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[BL], HERE=0d52, LAST=338a, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[HEX.], HERE=0d55, LAST=338a, STATE=1
 looking for word [HEX.]
FORTH word [HEX.]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0d5a, LAST=338a, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0d5b, LAST=338a, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[BL], HERE=0d5c, LAST=338a, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[HEX.], HERE=0d5f, LAST=338a, STATE=1
 looking for word [HEX.]
FORTH word [HEX.]. STATE=1 ... compiling into current word
Parse(): word=[1+], HERE=0d64, LAST=338a, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[;], HERE=0d65, LAST=338a, STATE=1
Parse(): line=[]
Parse(): line=[: HELLO >IN @]
Parse(): word=[:], HERE=0d66, LAST=338a, STATE=0

Defining word [HELLO]...
Parse(): word=[>IN], HERE=0d6b, LAST=337a, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[@], HERE=0d70, LAST=337a, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): line=[	IF ]
Parse(): word=[IF], HERE=0d71, LAST=337a, STATE=1
Parse(): line=[		S"  Reset. " COUNT TYPE]
Parse(): word=[S"], HERE=0d76, LAST=337a, STATE=1
SLITERAL(1-0d77) (32, 0d78, 0, 0d77)(2-0d77)(1-0d77) (82, 0d79, 1, 0d77)(2-0d77)(1-0d77) (101, 0d7a, 2, 0d77)(2-0d77)(1-0d77) (115, 0d7b, 3, 0d77)(2-0d77)(1-0d77) (101, 0d7c, 4, 0d77)(2-0d77)(1-0d77) (116, 0d7d, 5, 0d77)(2-0d77)(1-0d77) (46, 0d7e, 6, 0d77)(2-0d77)(1-0d77) (32, 0d7f, 7, 0d77)(2-0d77)(1-0d77) (34, 0d80(3-0d77)) done. HERE=0d80, cur_here=0d77
) done. HERE=0d81, cur_here=0d77
Parse(): word=[COUNT], HERE=0d81, LAST=337a, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=0d86, LAST=337a, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): line=[	ELSE]
Parse(): word=[ELSE], HERE=0d8b, LAST=337a, STATE=1
Parse(): line=[		S" Hello." COUNT TYPE CRLF]
Parse(): word=[S"], HERE=0d90, LAST=337a, STATE=1
SLITERAL(1-0d91) (72, 0d92, 0, 0d91)(2-0d91)(1-0d91) (101, 0d93, 1, 0d91)(2-0d91)(1-0d91) (108, 0d94, 2, 0d91)(2-0d91)(1-0d91) (108, 0d95, 3, 0d91)(2-0d91)(1-0d91) (111, 0d96, 4, 0d91)(2-0d91)(1-0d91) (46, 0d97, 5, 0d91)(2-0d91)(1-0d91) (34, 0d98(3-0d91)) done. HERE=0d98, cur_here=0d91
) done. HERE=0d99, cur_here=0d91
Parse(): word=[COUNT], HERE=0d99, LAST=337a, STATE=1
 looking for word [COUNT]
FORTH word [COUNT]. STATE=1 ... compiling into current word
Parse(): word=[TYPE], HERE=0d9e, LAST=337a, STATE=1
 looking for word [TYPE]
FORTH word [TYPE]. STATE=1 ... compiling into current word
Parse(): word=[CRLF], HERE=0da3, LAST=337a, STATE=1
 looking for word [CRLF]
FORTH word [CRLF]. STATE=1 ... compiling into current word
Parse(): line=[	THEN ]
Parse(): word=[THEN], HERE=0da8, LAST=337a, STATE=1
Parse(): line=[;]
Parse(): word=[;], HERE=0da8, LAST=337a, STATE=1
Parse(): line=[]
Parse(): line=[: ALLOT HERE + DP ! ;]
Parse(): word=[:], HERE=0da9, LAST=337a, STATE=0

Defining word [ALLOT]...
Parse(): word=[HERE], HERE=0dae, LAST=336a, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=0db1, LAST=336a, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[DP], HERE=0db2, LAST=336a, STATE=1
 looking for word [DP]
FORTH word [DP]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0db4, LAST=336a, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[;], HERE=0db5, LAST=336a, STATE=1
Parse(): line=[]
Parse(): line=[: (const) <asm> CPUSH PUSH </asm> C, , <asm> CPUSH RET </asm> C, ;]
Parse(): word=[:], HERE=0db6, LAST=336a, STATE=0

Defining word [(const)]...
Parse(): word=[<asm>], HERE=0dbb, LAST=3358, STATE=1
Parse(): word=[CPUSH], HERE=0dbb, LAST=3358, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[PUSH], HERE=0dbc, LAST=3358, STATE=2
[PUSH] Is an ASM keyword: opcode=1
Parse(): word=[</asm>], HERE=0dbd, LAST=3358, STATE=2
Parse(): word=[C,], HERE=0dbd, LAST=3358, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[,], HERE=0dc2, LAST=3358, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[<asm>], HERE=0dc7, LAST=3358, STATE=1
Parse(): word=[CPUSH], HERE=0dc7, LAST=3358, STATE=2
[CPUSH] Is an ASM keyword: opcode=14
Parse(): word=[RET], HERE=0dc8, LAST=3358, STATE=2
[RET] Is an ASM keyword: opcode=12
Parse(): word=[</asm>], HERE=0dc9, LAST=3358, STATE=2
Parse(): word=[C,], HERE=0dc9, LAST=3358, STATE=1
 looking for word [C,]
FORTH word [C,]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0dce, LAST=3358, STATE=1
Parse(): line=[: CONSTANT CREATE-NAME (const) ; INLINE]
Parse(): word=[:], HERE=0dce, LAST=3358, STATE=0

Defining word [CONSTANT]...
Parse(): word=[CREATE-NAME], HERE=0dd3, LAST=3345, STATE=1
 looking for word [CREATE-NAME]
FORTH word [CREATE-NAME]. STATE=1 ... compiling into current word
Parse(): word=[(const)], HERE=0dd8, LAST=3345, STATE=1
 looking for word [(const)]
FORTH word [(const)]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0ddd, LAST=3345, STATE=1
Parse(): word=[INLINE], HERE=0ddd, LAST=3345, STATE=0
Parse(): line=[: VARIABLE CREATE-NAME HERE 2 + CELL + (const) 0 , ; INLINE]
Parse(): word=[:], HERE=0dde, LAST=3345, STATE=0

Defining word [VARIABLE]...
Parse(): word=[CREATE-NAME], HERE=0de3, LAST=3332, STATE=1
 looking for word [CREATE-NAME]
FORTH word [CREATE-NAME]. STATE=1 ... compiling into current word
Parse(): word=[HERE], HERE=0de8, LAST=3332, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[2], HERE=0deb, LAST=3332, STATE=1
 looking for word [2]
IsNumber: 2 (0002), STATE=1
Parse(): word=[+], HERE=0ded, LAST=3332, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[CELL], HERE=0dee, LAST=3332, STATE=1
 looking for word [CELL]
FORTH word [CELL]. STATE=1 ... compiling into current word
Parse(): word=[+], HERE=0df1, LAST=3332, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[(const)], HERE=0df2, LAST=3332, STATE=1
 looking for word [(const)]
FORTH word [(const)]. STATE=1 ... compiling into current word
Parse(): word=[0], HERE=0df7, LAST=3332, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[,], HERE=0df9, LAST=3332, STATE=1
 looking for word [,]
FORTH word [,]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0dfe, LAST=3332, STATE=1
Parse(): word=[INLINE], HERE=0dfe, LAST=3332, STATE=0
Parse(): line=[]
Parse(): line=[: ? @ . ; \ ( addr -- )]
Parse(): word=[:], HERE=0dff, LAST=3332, STATE=0

Defining word [?]...
Parse(): word=[@], HERE=0e04, LAST=3326, STATE=1
[@] Is a FORTH primitive: opcode=2
Parse(): word=[.], HERE=0e05, LAST=3326, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0e0a, LAST=3326, STATE=1
Parse(): line=[: C? C@ . ; \ ( addr -- )]
Parse(): word=[:], HERE=0e0a, LAST=3326, STATE=0

Defining word [C?]...
Parse(): word=[C@], HERE=0e0f, LAST=3319, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[.], HERE=0e10, LAST=3319, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0e15, LAST=3319, STATE=1
Parse(): line=[]
Parse(): line=[\ HEX AAbb . DECIMAL]
Parse(): line=[]
Parse(): line=[: FREE LAST HERE - ;]
Parse(): word=[:], HERE=0e15, LAST=3319, STATE=0

Defining word [FREE]...
Parse(): word=[LAST], HERE=0e1a, LAST=330a, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[HERE], HERE=0e1d, LAST=330a, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[-], HERE=0e20, LAST=330a, STATE=1
[-] Is a FORTH primitive: opcode=18
Parse(): word=[;], HERE=0e21, LAST=330a, STATE=1
Parse(): line=[: FREE? FREE . S"  bytes free." CT ;]
Parse(): word=[:], HERE=0e22, LAST=330a, STATE=0

Defining word [FREE?]...
Parse(): word=[FREE], HERE=0e27, LAST=32fa, STATE=1
 looking for word [FREE]
FORTH word [FREE]. STATE=1 ... compiling into current word
Parse(): word=[.], HERE=0e2c, LAST=32fa, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[S"], HERE=0e31, LAST=32fa, STATE=1
SLITERAL(1-0e32) (32, 0e33, 0, 0e32)(2-0e32)(1-0e32) (98, 0e34, 1, 0e32)(2-0e32)(1-0e32) (121, 0e35, 2, 0e32)(2-0e32)(1-0e32) (116, 0e36, 3, 0e32)(2-0e32)(1-0e32) (101, 0e37, 4, 0e32)(2-0e32)(1-0e32) (115, 0e38, 5, 0e32)(2-0e32)(1-0e32) (32, 0e39, 6, 0e32)(2-0e32)(1-0e32) (102, 0e3a, 7, 0e32)(2-0e32)(1-0e32) (114, 0e3b, 8, 0e32)(2-0e32)(1-0e32) (101, 0e3c, 9, 0e32)(2-0e32)(1-0e32) (101, 0e3d, 10, 0e32)(2-0e32)(1-0e32) (46, 0e3e, 11, 0e32)(2-0e32)(1-0e32) (34, 0e3f(3-0e32)) done. HERE=0e3f, cur_here=0e32
) done. HERE=0e40, cur_here=0e32
Parse(): word=[CT], HERE=0e40, LAST=32fa, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0e45, LAST=32fa, STATE=1
Parse(): line=[]
Parse(): line=[: bufAppend DUP C++ DUP C@ + C! ; \ ( ch addr -- )]
Parse(): word=[:], HERE=0e45, LAST=32fa, STATE=0

Defining word [bufAppend]...
Parse(): word=[DUP], HERE=0e4a, LAST=32e6, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C++], HERE=0e4b, LAST=32e6, STATE=1
 looking for word [C++]
FORTH word [C++]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0e50, LAST=32e6, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0e51, LAST=32e6, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[+], HERE=0e52, LAST=32e6, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[C!], HERE=0e53, LAST=32e6, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=0e54, LAST=32e6, STATE=1
Parse(): line=[: nullTerm DUP C@ + 1+ 0 SWAP C! ; \ ( addr -- )]
Parse(): word=[:], HERE=0e55, LAST=32e6, STATE=0

Defining word [nullTerm]...
Parse(): word=[DUP], HERE=0e5a, LAST=32d3, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[C@], HERE=0e5b, LAST=32d3, STATE=1
[C@] Is a FORTH primitive: opcode=15
Parse(): word=[+], HERE=0e5c, LAST=32d3, STATE=1
[+] Is a FORTH primitive: opcode=17
Parse(): word=[1+], HERE=0e5d, LAST=32d3, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[0], HERE=0e5e, LAST=32d3, STATE=1
 looking for word [0]
IsNumber: 0 (0000), STATE=1
Parse(): word=[SWAP], HERE=0e60, LAST=32d3, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[C!], HERE=0e61, LAST=32d3, STATE=1
[C!] Is a FORTH primitive: opcode=16
Parse(): word=[;], HERE=0e62, LAST=32d3, STATE=1
Parse(): line=[]
Parse(): line=[: mainLoop resetState BEGIN OK getLine 1+ >IN ! executeInput BL AGAIN ;]
Parse(): word=[:], HERE=0e63, LAST=32d3, STATE=0

Defining word [mainLoop]...
Parse(): word=[resetState], HERE=0e68, LAST=32c0, STATE=1
 looking for word [resetState]
FORTH word [resetState]. STATE=1 ... compiling into current word
Parse(): word=[BEGIN], HERE=0e6d, LAST=32c0, STATE=1
Parse(): word=[OK], HERE=0e6d, LAST=32c0, STATE=1
 looking for word [OK]
FORTH word [OK]. STATE=1 ... compiling into current word
Parse(): word=[getLine], HERE=0e72, LAST=32c0, STATE=1
 looking for word [getLine]
FORTH word [getLine]. STATE=1 ... compiling into current word
Parse(): word=[1+], HERE=0e77, LAST=32c0, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[>IN], HERE=0e78, LAST=32c0, STATE=1
 looking for word [>IN]
FORTH word [>IN]. STATE=1 ... compiling into current word
Parse(): word=[!], HERE=0e7d, LAST=32c0, STATE=1
[!] Is a FORTH primitive: opcode=3
Parse(): word=[executeInput], HERE=0e7e, LAST=32c0, STATE=1
 looking for word [executeInput]
FORTH word [executeInput]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0e83, LAST=32c0, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[AGAIN], HERE=0e86, LAST=32c0, STATE=1
Parse(): word=[;], HERE=0e8b, LAST=32c0, STATE=1
Parse(): line=[: main HELLO mainLoop ;]
Parse(): word=[:], HERE=0e8c, LAST=32c0, STATE=0

Defining word [main]...
Parse(): word=[HELLO], HERE=0e91, LAST=32b1, STATE=1
 looking for word [HELLO]
FORTH word [HELLO]. STATE=1 ... compiling into current word
Parse(): word=[mainLoop], HERE=0e96, LAST=32b1, STATE=1
 looking for word [mainLoop]
FORTH word [mainLoop]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0e9b, LAST=32b1, STATE=1
Parse(): line=[]
Parse(): line=[: ascii. DUP HEX. BL DUP DECIMAL. BL EMIT ;]
Parse(): word=[:], HERE=0e9b, LAST=32b1, STATE=0

Defining word [ascii.]...
Parse(): word=[DUP], HERE=0ea0, LAST=32a0, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[HEX.], HERE=0ea1, LAST=32a0, STATE=1
 looking for word [HEX.]
FORTH word [HEX.]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0ea6, LAST=32a0, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0ea9, LAST=32a0, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[DECIMAL.], HERE=0eaa, LAST=32a0, STATE=1
 looking for word [DECIMAL.]
FORTH word [DECIMAL.]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0eaf, LAST=32a0, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[EMIT], HERE=0eb2, LAST=32a0, STATE=1
[EMIT] Is an ASM keyword: opcode=25
Parse(): word=[;], HERE=0eb3, LAST=32a0, STATE=1
Parse(): line=[: ascii 2DUP < IF SWAP THEN BEGIN CRLF DUP ascii. 1+ 2DUP > WHILE 2DROP ;]
Parse(): word=[:], HERE=0eb4, LAST=32a0, STATE=0

Defining word [ascii]...
Parse(): word=[2DUP], HERE=0eb9, LAST=3290, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[<], HERE=0ebb, LAST=3290, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=0ebc, LAST=3290, STATE=1
Parse(): word=[SWAP], HERE=0ec1, LAST=3290, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[THEN], HERE=0ec2, LAST=3290, STATE=1
Parse(): word=[BEGIN], HERE=0ec2, LAST=3290, STATE=1
Parse(): word=[CRLF], HERE=0ec2, LAST=3290, STATE=1
 looking for word [CRLF]
FORTH word [CRLF]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0ec7, LAST=3290, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[ascii.], HERE=0ec8, LAST=3290, STATE=1
 looking for word [ascii.]
FORTH word [ascii.]. STATE=1 ... compiling into current word
Parse(): word=[1+], HERE=0ecd, LAST=3290, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[2DUP], HERE=0ece, LAST=3290, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[>], HERE=0ed0, LAST=3290, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[WHILE], HERE=0ed1, LAST=3290, STATE=1
Parse(): word=[2DROP], HERE=0ed6, LAST=3290, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0ed8, LAST=3290, STATE=1
Parse(): line=[]
Parse(): line=[: t0 2DUP < IF SWAP THEN BEGIN DUP . 1+ 2DUP > WHILE 2DROP ;]
Parse(): word=[:], HERE=0ed9, LAST=3290, STATE=0

Defining word [t0]...
Parse(): word=[2DUP], HERE=0ede, LAST=3283, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[<], HERE=0ee0, LAST=3283, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=0ee1, LAST=3283, STATE=1
Parse(): word=[SWAP], HERE=0ee6, LAST=3283, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[THEN], HERE=0ee7, LAST=3283, STATE=1
Parse(): word=[BEGIN], HERE=0ee7, LAST=3283, STATE=1
Parse(): word=[DUP], HERE=0ee7, LAST=3283, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[.], HERE=0ee8, LAST=3283, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[1+], HERE=0eed, LAST=3283, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[2DUP], HERE=0eee, LAST=3283, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[>], HERE=0ef0, LAST=3283, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[WHILE], HERE=0ef1, LAST=3283, STATE=1
Parse(): word=[2DROP], HERE=0ef6, LAST=3283, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0ef8, LAST=3283, STATE=1
Parse(): line=[: t1 2DUP < IF SWAP THEN BEGIN 1+ DUP . 2DUP > WHILE 2DROP ;]
Parse(): word=[:], HERE=0ef9, LAST=3283, STATE=0

Defining word [t1]...
Parse(): word=[2DUP], HERE=0efe, LAST=3276, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[<], HERE=0f00, LAST=3276, STATE=1
[<] Is a FORTH primitive: opcode=21
Parse(): word=[IF], HERE=0f01, LAST=3276, STATE=1
Parse(): word=[SWAP], HERE=0f06, LAST=3276, STATE=1
[SWAP] Is an ASM keyword: opcode=4
Parse(): word=[THEN], HERE=0f07, LAST=3276, STATE=1
Parse(): word=[BEGIN], HERE=0f07, LAST=3276, STATE=1
Parse(): word=[1+], HERE=0f07, LAST=3276, STATE=1
[1+] Is a FORTH primitive: opcode=36
Parse(): word=[DUP], HERE=0f08, LAST=3276, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[.], HERE=0f09, LAST=3276, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[2DUP], HERE=0f0e, LAST=3276, STATE=1
 looking for word [2DUP]
FORTH word [2DUP]. STATE=1 ... compiling into current word
Parse(): word=[>], HERE=0f10, LAST=3276, STATE=1
[>] Is a FORTH primitive: opcode=23
Parse(): word=[WHILE], HERE=0f11, LAST=3276, STATE=1
Parse(): word=[2DROP], HERE=0f16, LAST=3276, STATE=1
 looking for word [2DROP]
FORTH word [2DROP]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0f18, LAST=3276, STATE=1
Parse(): line=[: fn S" img-4th.bin" ;]
Parse(): word=[:], HERE=0f19, LAST=3276, STATE=0

Defining word [fn]...
Parse(): word=[S"], HERE=0f1e, LAST=3269, STATE=1
SLITERAL(1-0f1f) (105, 0f20, 0, 0f1f)(2-0f1f)(1-0f1f) (109, 0f21, 1, 0f1f)(2-0f1f)(1-0f1f) (103, 0f22, 2, 0f1f)(2-0f1f)(1-0f1f) (45, 0f23, 3, 0f1f)(2-0f1f)(1-0f1f) (52, 0f24, 4, 0f1f)(2-0f1f)(1-0f1f) (116, 0f25, 5, 0f1f)(2-0f1f)(1-0f1f) (104, 0f26, 6, 0f1f)(2-0f1f)(1-0f1f) (46, 0f27, 7, 0f1f)(2-0f1f)(1-0f1f) (98, 0f28, 8, 0f1f)(2-0f1f)(1-0f1f) (105, 0f29, 9, 0f1f)(2-0f1f)(1-0f1f) (110, 0f2a, 10, 0f1f)(2-0f1f)(1-0f1f) (34, 0f2b(3-0f1f)) done. HERE=0f2b, cur_here=0f1f
) done. HERE=0f2c, cur_here=0f1f
Parse(): word=[;], HERE=0f2c, LAST=3269, STATE=1
Parse(): line=[: .(HERE) S" HERE: " CT HERE DUP HEX. BL S" (" CT . BL S" )" CT ;]
Parse(): word=[:], HERE=0f2d, LAST=3269, STATE=0

Defining word [.(HERE)]...
Parse(): word=[S"], HERE=0f32, LAST=3257, STATE=1
SLITERAL(1-0f33) (72, 0f34, 0, 0f33)(2-0f33)(1-0f33) (69, 0f35, 1, 0f33)(2-0f33)(1-0f33) (82, 0f36, 2, 0f33)(2-0f33)(1-0f33) (69, 0f37, 3, 0f33)(2-0f33)(1-0f33) (58, 0f38, 4, 0f33)(2-0f33)(1-0f33) (32, 0f39, 5, 0f33)(2-0f33)(1-0f33) (34, 0f3a(3-0f33)) done. HERE=0f3a, cur_here=0f33
) done. HERE=0f3b, cur_here=0f33
Parse(): word=[CT], HERE=0f3b, LAST=3257, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[HERE], HERE=0f40, LAST=3257, STATE=1
 looking for word [HERE]
FORTH word [HERE]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0f43, LAST=3257, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[HEX.], HERE=0f44, LAST=3257, STATE=1
 looking for word [HEX.]
FORTH word [HEX.]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0f49, LAST=3257, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[S"], HERE=0f4c, LAST=3257, STATE=1
SLITERAL(1-0f4d) (40, 0f4e, 0, 0f4d)(2-0f4d)(1-0f4d) (34, 0f4f(3-0f4d)) done. HERE=0f4f, cur_here=0f4d
) done. HERE=0f50, cur_here=0f4d
Parse(): word=[CT], HERE=0f50, LAST=3257, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[.], HERE=0f55, LAST=3257, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0f5a, LAST=3257, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[S"], HERE=0f5d, LAST=3257, STATE=1
SLITERAL(1-0f5e) (41, 0f5f, 0, 0f5e)(2-0f5e)(1-0f5e) (34, 0f60(3-0f5e)) done. HERE=0f60, cur_here=0f5e
) done. HERE=0f61, cur_here=0f5e
Parse(): word=[CT], HERE=0f61, LAST=3257, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0f66, LAST=3257, STATE=1
Parse(): line=[: .(LAST) LAST DUP S" LAST: " CT HEX. BL S" (" CT . BL S" )" CT ;]
Parse(): word=[:], HERE=0f66, LAST=3257, STATE=0

Defining word [.(LAST)]...
Parse(): word=[LAST], HERE=0f6b, LAST=3245, STATE=1
 looking for word [LAST]
FORTH word [LAST]. STATE=1 ... compiling into current word
Parse(): word=[DUP], HERE=0f6e, LAST=3245, STATE=1
[DUP] Is an ASM keyword: opcode=6
Parse(): word=[S"], HERE=0f6f, LAST=3245, STATE=1
SLITERAL(1-0f70) (76, 0f71, 0, 0f70)(2-0f70)(1-0f70) (65, 0f72, 1, 0f70)(2-0f70)(1-0f70) (83, 0f73, 2, 0f70)(2-0f70)(1-0f70) (84, 0f74, 3, 0f70)(2-0f70)(1-0f70) (58, 0f75, 4, 0f70)(2-0f70)(1-0f70) (32, 0f76, 5, 0f70)(2-0f70)(1-0f70) (34, 0f77(3-0f70)) done. HERE=0f77, cur_here=0f70
) done. HERE=0f78, cur_here=0f70
Parse(): word=[CT], HERE=0f78, LAST=3245, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[HEX.], HERE=0f7d, LAST=3245, STATE=1
 looking for word [HEX.]
FORTH word [HEX.]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0f82, LAST=3245, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[S"], HERE=0f85, LAST=3245, STATE=1
SLITERAL(1-0f86) (40, 0f87, 0, 0f86)(2-0f86)(1-0f86) (34, 0f88(3-0f86)) done. HERE=0f88, cur_here=0f86
) done. HERE=0f89, cur_here=0f86
Parse(): word=[CT], HERE=0f89, LAST=3245, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[.], HERE=0f8e, LAST=3245, STATE=1
 looking for word [.]
FORTH word [.]. STATE=1 ... compiling into current word
Parse(): word=[BL], HERE=0f93, LAST=3245, STATE=1
 looking for word [BL]
FORTH word [BL]. STATE=1 ... compiling into current word
Parse(): word=[S"], HERE=0f96, LAST=3245, STATE=1
SLITERAL(1-0f97) (41, 0f98, 0, 0f97)(2-0f97)(1-0f97) (34, 0f99(3-0f97)) done. HERE=0f99, cur_here=0f97
) done. HERE=0f9a, cur_here=0f97
Parse(): word=[CT], HERE=0f9a, LAST=3245, STATE=1
 looking for word [CT]
FORTH word [CT]. STATE=1 ... compiling into current word
Parse(): word=[;], HERE=0f9f, LAST=3245, STATE=1
Parse(): line=[]
Parse(): line=[.(HERE) BL .(LAST) BL FREE? CRLF]
Parse(): word=[.(HERE)], HERE=0f9f, LAST=3245, STATE=0
 looking for word [.(HERE)]
FORTH word [.(HERE)]. STATE=0 ... executing it ...
PC=0f2d, IR=24 - DICTP 3257 ; .(HERE)
PC=0f32, IR=7 - SLITERAL
PC=0f3b, IR=11 - CALL 03e1
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0f33)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0f33 and 0f34)
PC=03d7, IR=15 - CFETCH(0f33) = 06 (6)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 0006)
PC=03df, IR=13 - HERE: ZTYPE
PC=03e0, IR=12 - RET
PC=0f40, IR=14 - CPUSH(10) - 16
PC=0f42, IR=2 - FETCH(0010)=0f9f (3999)
PC=0f43, IR=6 - DUP (0f9f)
PC=0f44, IR=11 - CALL 0737
PC=0737, IR=24 - DICTP 360b ; HEX.
PC=073c, IR=14 - CPUSH(18) - 24
PC=073e, IR=2 - FETCH(0018)=000a (10)
PC=073f, IR=4 - SWAP (0f9f and 000a)
PC=0740, IR=11 - CALL 041e
PC=041e, IR=24 - DICTP 38a9 ; HEX
PC=0423, IR=14 - CPUSH(10) - 16
PC=0425, IR=14 - CPUSH(18) - 24
PC=0427, IR=3 - STORE(0018, 0010)
PC=0428, IR=12 - RET
PC=0745, IR=11 - CALL 06b6
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0f9f)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0f9f)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0f9f and 0000)
PC=06e4, IR=6 - DUP (0f9f)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0f9f)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3999 + 3984 = 15
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (000f and 00f9)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (000f)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=06fd, IR=14 - CPUSH(07) - 7
PC=06ff, IR=17 - ADD 48 + 7 = 55
PC=0700, IR=17 - ADD 15 + 55 = 70
PC=0701, IR=4 - SWAP (00f9 and 0046)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (00f9)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (00f9)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 249 + 240 = 9
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0009 and 000f)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0009)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 9 + 48 = 57
PC=0701, IR=4 - SWAP (000f and 0039)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (000f)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (000f)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 15 + 0 = 15
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (000f and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (000f)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=06fd, IR=14 - CPUSH(07) - 7
PC=06ff, IR=17 - ADD 48 + 7 = 55
PC=0700, IR=17 - ADD 15 + 55 = 70
PC=0701, IR=4 - SWAP (0000 and 0046)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0046)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - FEMIT 46
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0039)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 9EMIT 39
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0046)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - FEMIT 46
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=074a, IR=14 - CPUSH(18) - 24
PC=074c, IR=3 - STORE(0018, 000a)
PC=074d, IR=12 - RET
PC=0f49, IR=14 - CPUSH(20) - 32
PC=0f4b, IR=25 -  EMIT 20
PC=0f4c, IR=7 - SLITERAL
PC=0f50, IR=11 - CALL 03e1
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0f4d)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0f4d and 0f4e)
PC=03d7, IR=15 - CFETCH(0f4d) = 01 (1)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 0001)
PC=03df, IR=13 - (ZTYPE
PC=03e0, IR=12 - RET
PC=0f55, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0f9f)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0f9f)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0f9f and 0000)
PC=06e4, IR=6 - DUP (0f9f)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0f9f)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3999 + 3990 = 9
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0009 and 018f)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0009)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 9 + 48 = 57
PC=0701, IR=4 - SWAP (018f and 0039)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (018f)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (018f)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 399 + 390 = 9
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0009 and 0027)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0009)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 9 + 48 = 57
PC=0701, IR=4 - SWAP (0027 and 0039)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0027)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0027)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 39 + 30 = 9
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0009 and 0003)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0009)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 9 + 48 = 57
PC=0701, IR=4 - SWAP (0003 and 0039)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0003)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0003)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3 + 0 = 3
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0003 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0003)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 3 + 48 = 51
PC=0701, IR=4 - SWAP (0000 and 0033)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0033)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 3EMIT 33
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0039)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 9EMIT 39
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0039)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 9EMIT 39
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0039)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 9EMIT 39
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=0f5a, IR=14 - CPUSH(20) - 32
PC=0f5c, IR=25 -  EMIT 20
PC=0f5d, IR=7 - SLITERAL
PC=0f61, IR=8 - JMP
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0f5e)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0f5e and 0f5f)
PC=03d7, IR=15 - CFETCH(0f5e) = 01 (1)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 0001)
PC=03df, IR=13 - )ZTYPE
PC=03e0, IR=12 - RET
Parse(): word=[BL], HERE=0f9f, LAST=3245, STATE=0
 looking for word [BL]
FORTH word [BL]. STATE=0 ... executing it ...
PC=039a, IR=24 - DICTP 3940 ; BL
PC=039f, IR=14 - CPUSH(20) - 32
PC=03a1, IR=25 -  EMIT 20
PC=03a2, IR=12 - RET
Parse(): word=[.(LAST)], HERE=0f9f, LAST=3245, STATE=0
 looking for word [.(LAST)]
FORTH word [.(LAST)]. STATE=0 ... executing it ...
PC=0f66, IR=24 - DICTP 3245 ; .(LAST)
PC=0f6b, IR=14 - CPUSH(14) - 20
PC=0f6d, IR=2 - FETCH(0014)=3245 (12869)
PC=0f6e, IR=6 - DUP (3245)
PC=0f6f, IR=7 - SLITERAL
PC=0f78, IR=11 - CALL 03e1
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0f70)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0f70 and 0f71)
PC=03d7, IR=15 - CFETCH(0f70) = 06 (6)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 0006)
PC=03df, IR=13 - LAST: ZTYPE
PC=03e0, IR=12 - RET
PC=0f7d, IR=11 - CALL 0737
PC=0737, IR=24 - DICTP 360b ; HEX.
PC=073c, IR=14 - CPUSH(18) - 24
PC=073e, IR=2 - FETCH(0018)=000a (10)
PC=073f, IR=4 - SWAP (3245 and 000a)
PC=0740, IR=11 - CALL 041e
PC=041e, IR=24 - DICTP 38a9 ; HEX
PC=0423, IR=14 - CPUSH(10) - 16
PC=0425, IR=14 - CPUSH(18) - 24
PC=0427, IR=3 - STORE(0018, 0010)
PC=0428, IR=12 - RET
PC=0745, IR=11 - CALL 06b6
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (3245)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (3245)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (3245 and 0000)
PC=06e4, IR=6 - DUP (3245)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (3245)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 12869 + 12864 = 5
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0005 and 0324)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0005)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 5 + 48 = 53
PC=0701, IR=4 - SWAP (0324 and 0035)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0324)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0324)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 804 + 800 = 4
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0004 and 0032)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0004)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 4 + 48 = 52
PC=0701, IR=4 - SWAP (0032 and 0034)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0032)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0032)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 50 + 48 = 2
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0002 and 0003)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0002)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 2 + 48 = 50
PC=0701, IR=4 - SWAP (0003 and 0032)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0003)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=0010 (16)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0003)
PC=06ad, IR=26 - OVER (0010)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3 + 0 = 3
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0003 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0003)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 3 + 48 = 51
PC=0701, IR=4 - SWAP (0000 and 0033)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0033)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 3EMIT 33
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0032)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 2EMIT 32
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0034)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 4EMIT 34
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0035)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 5EMIT 35
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=074a, IR=14 - CPUSH(18) - 24
PC=074c, IR=3 - STORE(0018, 000a)
PC=074d, IR=12 - RET
PC=0f82, IR=14 - CPUSH(20) - 32
PC=0f84, IR=25 -  EMIT 20
PC=0f85, IR=7 - SLITERAL
PC=0f89, IR=11 - CALL 03e1
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0f86)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0f86 and 0f87)
PC=03d7, IR=15 - CFETCH(0f86) = 01 (1)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 0001)
PC=03df, IR=13 - (ZTYPE
PC=03e0, IR=12 - RET
PC=0f8e, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (3245)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (3245)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (3245 and 0000)
PC=06e4, IR=6 - DUP (3245)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (3245)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 12869 + 12860 = 9
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0009 and 0506)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0009)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 9 + 48 = 57
PC=0701, IR=4 - SWAP (0506 and 0039)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0506)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0506)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 1286 + 1280 = 6
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0006 and 0080)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0006)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 6 + 48 = 54
PC=0701, IR=4 - SWAP (0080 and 0036)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0080)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0080)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 128 + 120 = 8
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0008 and 000c)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0008)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 8 + 48 = 56
PC=0701, IR=4 - SWAP (000c and 0038)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (000c)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (000c)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 12 + 10 = 2
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0002 and 0001)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0002)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 2 + 48 = 50
PC=0701, IR=4 - SWAP (0001 and 0032)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0001)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0001)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 1 + 0 = 1
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0001 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0001)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 1 + 48 = 49
PC=0701, IR=4 - SWAP (0000 and 0031)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0031)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 1EMIT 31
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0032)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 2EMIT 32
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0038)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 8EMIT 38
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0036)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 6EMIT 36
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0039)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 9EMIT 39
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=0f93, IR=14 - CPUSH(20) - 32
PC=0f95, IR=25 -  EMIT 20
PC=0f96, IR=7 - SLITERAL
PC=0f9a, IR=8 - JMP
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0f97)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0f97 and 0f98)
PC=03d7, IR=15 - CFETCH(0f97) = 01 (1)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 0001)
PC=03df, IR=13 - )ZTYPE
PC=03e0, IR=12 - RET
Parse(): word=[BL], HERE=0f9f, LAST=3245, STATE=0
 looking for word [BL]
FORTH word [BL]. STATE=0 ... executing it ...
PC=039a, IR=24 - DICTP 3940 ; BL
PC=039f, IR=14 - CPUSH(20) - 32
PC=03a1, IR=25 -  EMIT 20
PC=03a2, IR=12 - RET
Parse(): word=[FREE?], HERE=0f9f, LAST=3245, STATE=0
 looking for word [FREE?]
FORTH word [FREE?]. STATE=0 ... executing it ...
PC=0e22, IR=24 - DICTP 32fa ; FREE?
PC=0e27, IR=11 - CALL 0e15
PC=0e15, IR=24 - DICTP 330a ; FREE
PC=0e1a, IR=14 - CPUSH(14) - 20
PC=0e1c, IR=2 - FETCH(0014)=3245 (12869)
PC=0e1d, IR=14 - CPUSH(10) - 16
PC=0e1f, IR=2 - FETCH(0010)=0f9f (3999)
PC=0e20, IR=18 - SUB 12869 + 3999 = 8870
PC=0e21, IR=12 - RET
PC=0e2c, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (22a6)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (22a6)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (22a6 and 0000)
PC=06e4, IR=6 - DUP (22a6)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (22a6)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 8870 + 8870 = 0
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0000 and 0377)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0000)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 0 + 48 = 48
PC=0701, IR=4 - SWAP (0377 and 0030)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0377)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0377)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 887 + 880 = 7
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0007 and 0058)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0007)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 7 + 48 = 55
PC=0701, IR=4 - SWAP (0058 and 0037)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0058)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0058)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 88 + 80 = 8
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0008 and 0008)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0008)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 8 + 48 = 56
PC=0701, IR=4 - SWAP (0008 and 0038)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0008)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0008)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 8 + 0 = 8
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0008 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0008)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 8 + 48 = 56
PC=0701, IR=4 - SWAP (0000 and 0038)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0038)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 8EMIT 38
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0038)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 8EMIT 38
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0037)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 7EMIT 37
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0030)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 0EMIT 30
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=0e31, IR=7 - SLITERAL
PC=0e40, IR=8 - JMP
PC=03e1, IR=24 - DICTP 38e7 ; CT
PC=03e6, IR=11 - CALL 03cf
PC=03cf, IR=24 - DICTP 3903 ; COUNT
PC=03d4, IR=6 - DUP (0e32)
PC=03d5, IR=36 - ONEPLUS
PC=03d6, IR=4 - SWAP (0e32 and 0e33)
PC=03d7, IR=15 - CFETCH(0e32) = 0c (12)
PC=03d8, IR=12 - RET
PC=03eb, IR=8 - JMP
PC=03d9, IR=24 - DICTP 38f4 ; TYPE
PC=03de, IR=5 - DROP (TOS was 000c)
PC=03df, IR=13 -  bytes free.ZTYPE
PC=03e0, IR=12 - RET
Parse(): word=[CRLF], HERE=0f9f, LAST=3245, STATE=0
 looking for word [CRLF]
FORTH word [CRLF]. STATE=0 ... executing it ...
PC=038e, IR=24 - DICTP 394d ; CRLF
PC=0393, IR=14 - CPUSH(0d) - 13
PC=0395, IR=25 - EMIT 0d
PC=0396, IR=14 - CPUSH(0a) - 10
PC=0398, IR=25 - 
EMIT 0a
PC=0399, IR=12 - RET
Parse(): line=[]
Parse(): line=[1 2 3 .S + + . .S]
Parse(): word=[1], HERE=0f9f, LAST=3245, STATE=0
 looking for word [1]
IsNumber: 1 (0001), STATE=0
Parse(): word=[2], HERE=0f9f, LAST=3245, STATE=0
 looking for word [2]
IsNumber: 2 (0002), STATE=0
Parse(): word=[3], HERE=0f9f, LAST=3245, STATE=0
 looking for word [3]
IsNumber: 3 (0003), STATE=0
Parse(): word=[.S], HERE=0f9f, LAST=3245, STATE=0
 looking for word [.S]
FORTH word [.S]. STATE=0 ... executing it ...
PC=079c, IR=24 - DICTP 35bd ; .S
PC=07a1, IR=14 - CPUSH(20) - 32
PC=07a3, IR=25 -  EMIT 20
PC=07a4, IR=38 - DEPTH
PC=07a5, IR=14 - CPUSH(00) - 0
PC=07a7, IR=21 - LT
PC=07a8, IR=45 - BRANCHZ 0022
PC=07cb, IR=38 - DEPTH
PC=07cc, IR=14 - CPUSH(00) - 0
PC=07ce, IR=22 - EQ
PC=07cf, IR=45 - BRANCHZ 000e
PC=07de, IR=14 - CPUSH(28) - 40
PC=07e0, IR=25 - (EMIT 28
PC=07e1, IR=38 - DEPTH
PC=07e2, IR=14 - CPUSH(01) - 1
PC=07e4, IR=18 - SUB 4 + 1 = 3
PC=07e5, IR=33 - DTOR
PC=07e6, IR=34 - RFETCH
PC=07e7, IR=37 - PICK
PC=07e8, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0020)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0020)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0020 and 0000)
PC=06e4, IR=6 - DUP (0020)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0020)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 32 + 30 = 2
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0002 and 0003)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0002)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 2 + 48 = 50
PC=0701, IR=4 - SWAP (0003 and 0032)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0003)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0003)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3 + 0 = 3
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0003 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0003)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 3 + 48 = 51
PC=0701, IR=4 - SWAP (0000 and 0033)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0033)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 3EMIT 33
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0032)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 2EMIT 32
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=07ed, IR=34 - RFETCH
PC=07ee, IR=45 - BRANCHZ 000e
PC=07f3, IR=35 - RTOD
PC=07f4, IR=14 - CPUSH(01) - 1
PC=07f6, IR=18 - SUB 3 + 1 = 2
PC=07f7, IR=33 - DTOR
PC=07f8, IR=44 - BRANCH 000d
PC=0806, IR=44 - BRANCH ffffffdf
PC=07e6, IR=34 - RFETCH
PC=07e7, IR=37 - PICK
PC=07e8, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0001)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0001)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0001 and 0000)
PC=06e4, IR=6 - DUP (0001)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0001)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 1 + 0 = 1
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0001 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0001)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 1 + 48 = 49
PC=0701, IR=4 - SWAP (0000 and 0031)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0031)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 1EMIT 31
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=07ed, IR=34 - RFETCH
PC=07ee, IR=45 - BRANCHZ 000e
PC=07f3, IR=35 - RTOD
PC=07f4, IR=14 - CPUSH(01) - 1
PC=07f6, IR=18 - SUB 2 + 1 = 1
PC=07f7, IR=33 - DTOR
PC=07f8, IR=44 - BRANCH 000d
PC=0806, IR=44 - BRANCH ffffffdf
PC=07e6, IR=34 - RFETCH
PC=07e7, IR=37 - PICK
PC=07e8, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0002)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0002)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0002 and 0000)
PC=06e4, IR=6 - DUP (0002)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0002)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 2 + 0 = 2
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0002 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0002)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 2 + 48 = 50
PC=0701, IR=4 - SWAP (0000 and 0032)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0032)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 2EMIT 32
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=07ed, IR=34 - RFETCH
PC=07ee, IR=45 - BRANCHZ 000e
PC=07f3, IR=35 - RTOD
PC=07f4, IR=14 - CPUSH(01) - 1
PC=07f6, IR=18 - SUB 1 + 1 = 0
PC=07f7, IR=33 - DTOR
PC=07f8, IR=44 - BRANCH 000d
PC=0806, IR=44 - BRANCH ffffffdf
PC=07e6, IR=34 - RFETCH
PC=07e7, IR=37 - PICK
PC=07e8, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0003)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0003)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0003 and 0000)
PC=06e4, IR=6 - DUP (0003)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0003)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3 + 0 = 3
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0003 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0003)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 3 + 48 = 51
PC=0701, IR=4 - SWAP (0000 and 0033)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0033)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 3EMIT 33
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=07ed, IR=34 - RFETCH
PC=07ee, IR=45 - BRANCHZ 000e
PC=07fd, IR=35 - RTOD
PC=07fe, IR=5 - DROP (TOS was 0000)
PC=07ff, IR=14 - CPUSH(20) - 32
PC=0801, IR=25 -  EMIT 20
PC=0802, IR=14 - CPUSH(29) - 41
PC=0804, IR=25 - )EMIT 29
PC=0805, IR=12 - RET
Parse(): word=[+], HERE=0f9f, LAST=3245, STATE=0
[+] Is a FORTH primitive: opcode=17
PC=0fa9, IR=17 - ADD 2 + 3 = 5
Parse(): word=[+], HERE=0f9f, LAST=3245, STATE=0
[+] Is a FORTH primitive: opcode=17
PC=0fa9, IR=17 - ADD 1 + 5 = 6
Parse(): word=[.], HERE=0f9f, LAST=3245, STATE=0
 looking for word [.]
FORTH word [.]. STATE=0 ... executing it ...
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0006)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0006)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0006 and 0000)
PC=06e4, IR=6 - DUP (0006)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0006)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 6 + 0 = 6
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0006 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0006)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 6 + 48 = 54
PC=0701, IR=4 - SWAP (0000 and 0036)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0036)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 6EMIT 36
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
Parse(): word=[.S], HERE=0f9f, LAST=3245, STATE=0
 looking for word [.S]
FORTH word [.S]. STATE=0 ... executing it ...
PC=079c, IR=24 - DICTP 35bd ; .S
PC=07a1, IR=14 - CPUSH(20) - 32
PC=07a3, IR=25 -  EMIT 20
PC=07a4, IR=38 - DEPTH
PC=07a5, IR=14 - CPUSH(00) - 0
PC=07a7, IR=21 - LT
PC=07a8, IR=45 - BRANCHZ 0022
PC=07cb, IR=38 - DEPTH
PC=07cc, IR=14 - CPUSH(00) - 0
PC=07ce, IR=22 - EQ
PC=07cf, IR=45 - BRANCHZ 000e
PC=07de, IR=14 - CPUSH(28) - 40
PC=07e0, IR=25 - (EMIT 28
PC=07e1, IR=38 - DEPTH
PC=07e2, IR=14 - CPUSH(01) - 1
PC=07e4, IR=18 - SUB 1 + 1 = 0
PC=07e5, IR=33 - DTOR
PC=07e6, IR=34 - RFETCH
PC=07e7, IR=37 - PICK
PC=07e8, IR=11 - CALL 072a
PC=072a, IR=24 - DICTP 361a ; .
PC=072f, IR=14 - CPUSH(20) - 32
PC=0731, IR=25 -  EMIT 20
PC=0732, IR=8 - JMP
PC=06b6, IR=24 - DICTP 3626 ; (.)
PC=06bb, IR=6 - DUP (0020)
PC=06bc, IR=14 - CPUSH(00) - 0
PC=06be, IR=22 - EQ
PC=06bf, IR=45 - BRANCHZ 0009
PC=06c9, IR=6 - DUP (0020)
PC=06ca, IR=14 - CPUSH(00) - 0
PC=06cc, IR=21 - LT
PC=06cd, IR=45 - BRANCHZ 0010
PC=06de, IR=14 - CPUSH(00) - 0
PC=06e0, IR=33 - DTOR
PC=06e1, IR=14 - CPUSH(00) - 0
PC=06e3, IR=4 - SWAP (0020 and 0000)
PC=06e4, IR=6 - DUP (0020)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0020)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 32 + 30 = 2
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0002 and 0003)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0002)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 2 + 48 = 50
PC=0701, IR=4 - SWAP (0003 and 0032)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0003)
PC=06e5, IR=45 - BRANCHZ 0021
PC=06ea, IR=14 - CPUSH(18) - 24
PC=06ec, IR=2 - FETCH(0018)=000a (10)
PC=06ed, IR=11 - CALL 06a7
PC=06a7, IR=24 - DICTP 3634 ; /MOD
PC=06ac, IR=26 - OVER (0003)
PC=06ad, IR=26 - OVER (000a)
PC=06ae, IR=20 - DIV
PC=06af, IR=33 - DTOR
PC=06b0, IR=34 - RFETCH
PC=06b1, IR=19 - MUL
PC=06b2, IR=18 - SUB 3 + 0 = 3
PC=06b3, IR=35 - RTOD
PC=06b4, IR=4 - SWAP (0003 and 0000)
PC=06b5, IR=12 - RET
PC=06f2, IR=14 - CPUSH(30) - 48
PC=06f4, IR=26 - OVER (0003)
PC=06f5, IR=14 - CPUSH(09) - 9
PC=06f7, IR=23 - GT
PC=06f8, IR=45 - BRANCHZ 0007
PC=0700, IR=17 - ADD 3 + 48 = 51
PC=0701, IR=4 - SWAP (0000 and 0033)
PC=0702, IR=44 - BRANCH 0021
PC=0724, IR=44 - BRANCH ffffffbf
PC=06e4, IR=6 - DUP (0000)
PC=06e5, IR=45 - BRANCHZ 0021
PC=0707, IR=5 - DROP (TOS was 0000)
PC=0708, IR=35 - RTOD
PC=0709, IR=45 - BRANCHZ 0007
PC=0711, IR=6 - DUP (0033)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 3EMIT 33
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0032)
PC=0712, IR=45 - BRANCHZ 000a
PC=0717, IR=25 - 2EMIT 32
PC=0718, IR=44 - BRANCH 0006
PC=071f, IR=44 - BRANCH fffffff1
PC=0711, IR=6 - DUP (0000)
PC=0712, IR=45 - BRANCHZ 000a
PC=071d, IR=5 - DROP (TOS was 0000)
PC=071e, IR=12 - RET
PC=07ed, IR=34 - RFETCH
PC=07ee, IR=45 - BRANCHZ 000e
PC=07fd, IR=35 - RTOD
PC=07fe, IR=5 - DROP (TOS was 0000)
PC=07ff, IR=14 - CPUSH(20) - 32
PC=0801, IR=25 -  EMIT 20
PC=0802, IR=14 - CPUSH(29) - 41
PC=0804, IR=25 - )EMIT 29
PC=0805, IR=12 - RET
Parse(): line=[]
Parse(): line=[\ variable fp]
Parse(): line=[\ : img-save ]
Parse(): line=[\    fn 1 fopen 0= ]
Parse(): line=[\    if]
Parse(): line=[\        fp ! ]
Parse(): line=[\        0 mem_sz fp @ fwrite .]
Parse(): line=[\        fp @ fclose ]
Parse(): line=[\        fp off]
Parse(): line=[\    else]
Parse(): line=[\        reset]
Parse(): line=[\    then]
Parse(): line=[\    ;]
Parse(): line=[\ img-save]
 looking for word [main]
done.
writing output file forth.hex... done.